%!PS-Adobe-2.0
%%Creator: dvips(k) 5.999 Copyright 2019 Radical Eye Software
%%Title: Guia de trabajos practicos - Parte 3.dvi
%%CreationDate: Wed Jan 22 23:43:14 2020
%%Pages: 31
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: LMRoman17-Regular LMRoman12-Regular LMRoman12-Bold
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: /usr/local/bin/dvips -o
%+ "Guia de trabajos practicos - Parte 3.ps"
%+ "Guia de trabajos practicos - Parte 3.dvi"
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2020.01.22:2043
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 872 2018-12-21 20:39:31Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.30, 2018/12/17
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup xGridOffset add y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-ts1.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmts1[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase.ts1
/.notdef
/.notdef
/.notdef
/.notdef
/quotedblbase.ts1
/.notdef
/.notdef
/twelveudash
/threequartersemdash
/cwmcapital
/arrowleft
/arrowright
/tieaccentlowercase
/tieaccentcapital
/tieaccentlowercase.new
/tieaccentcapital.new
/.notdef
/cwmascender
/blanksymbol
/.notdef
/.notdef
/.notdef
/dollar
/.notdef
/.notdef
/quotesingle.ts1
/.notdef
/.notdef
/asteriskmath
/.notdef
/comma
/hyphendbl
/period
/fraction
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/.notdef
/.notdef
/angleleft
/minus
/angleright
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/mho
/.notdef
/bigcircle
/.notdef
/Orogate
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/ohm
/.notdef
/.notdef
/.notdef
/dblbracketleft
/.notdef
/dblbracketright
/arrowup
/arrowdown
/grave.ts1
/.notdef
/born
/divorced
/died
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/leaf
/married
/musicalnote
/.notdef
/.notdef
/orogate
/.notdef
/longs
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/tildelow
/hyphendbl.alt
/breve.ts1
/caron.ts1
/hungarumlaut.ts1
/dblgrave.ts1
/dagger
/daggerdbl
/dblverticalbar
/perthousand
/bullet
/centigrade
/dollar.oldstyle
/cent.oldstyle
/florin
/colonmonetary
/won
/naira
/guarani
/peso
/lira
/recipe
/interrobang
/gnaborretni
/dong
/trademark
/permyriad
/paragraph.alt
/baht
/numero
/discount
/estimated
/openbullet
/servicemark
/quillbracketleft
/quillbracketright
/cent
/sterling
/currency
/yen
/brokenbar
/section
/dieresis.ts1
/copyright
/ordfeminine
/copyleft
/logicalnot
/published
/registered
/macron.ts1
/degree
/plusminus
/two.superior
/three.superior
/acute.ts1
/mu
/paragraph
/periodcentered
/referencemark
/one.superior
/ordmasculine
/radical
/onequarter
/onehalf
/threequarters
/Euro
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/multiply
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/divide
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 userdict       begin       /draftcopy-CurrentPage 0 def       /draftcopy-old-BOPhook
{ } def       currentdict /bop-hook  known{             /draftcopy-old-BOPhook
/bop-hook  load def       } if       /bop-hook{         draftcopy-old-BOPhook
        /draftcopy-CurrentPage draftcopy-CurrentPage 1 add def    
    draftcopy-CurrentPage 2 ge         draftcopy-CurrentPage 99999
 le         and         { gsave 200 70 translate 65 rotate        
 /Times-Roman findfont           130 1  mul scalefont setfont     
     0  0  moveto           0.90 setgray          (Norman Ruiz)  show
          grestore         } if       } def       end
 
@fedspecial end
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E752429B985F23EBA0C9875AD055D8B1F640D10DB8F40BBF062F476691
EDAA1D05C5591EEDC1B75251BFF8576F1C9CC5C0E521392A2F0D5F869F8AA462
B3883A673A976328E1F0DAA22B80CB7737DE2537E7B54F5E1643E30046E87CF3
8D9A45A973757BC16CC50504033125D2A68A1C97CA095C56B3D62783960780B3
1693596869FAF5692AA8FA6643FCD7F55E72948D2DC55AFC5016FB2C48AF9D85
192393C682B739EB43CAD8C3FD4053B2D53CF911352E2BA87A65F8949B0B7918
EA727DE4A08DE07B71365B8F31103159F65D30A7A318C1056BF638CD20BB56D8
6F22ED3EACC46F750F405FAF96268E80A409CD8AE0F36B68AA8C5FD2E0E871DB
D2628AEC086AAFC9F04CC93440E1A8B0ACC1DCADB778837360339A25C08E3B0C
E768240F0E8CE9FF939E4B1A6365664AAB69761B7A9C7B95BD29B09B930B0D82
F2C39F9BC0B94E56C48DCB22D8F0CA6C633BE68E5977EB3D88103E4230C6A08B
B4FB0CDEA7D44636102D47AB90B92FA42243943EB3E77E6CC38DEDBB2DB8BE77
78936B70FAE12EB1E2913B766CA2BAC3FA555CBADAF2CBF6B7A216FC93470554
2C841542BC1FDB26DBE389CED193E28A19CE9CBA64FCEB47C4D9C7891741E0A1
23FBBE971ED93F797C02EA830678317452481FB78DFEFDB25A3645AD3979D2F4
AA17C624CAB35B85963C6DED262AED5DE92278F31B2E573FD86696D98800443F
32CF695BC103A3ACA687FBB3F42AF9C89123C719005844588667C3DA28AFA523
BAEADF7BED1F3B5D595DF571540D0855FA377DFA6880F525878D6A3D1980C7D1
05554ACC5D07ACEA1E0D27664F6DFB6EFF878D0A68604565D0BF75FD8BE023FA
36D164B7BE25F9F811A466CE04C2CE5A774EE3288A245769B7ED30FCFA10230A
D6C9E809341BF5E55E58F3288F7298D62092922F07027352BC7C9612CFCB7018
B3394AF7EE7076395E67C3CF9B71BE069AE6C6C412F86A496E7C77173A0CDA0B
CC46683C239700CF259CF668B9F5C990DE3196B84BE792F51E17583FD4A83178
989638A37897AA769D74E0B3A299DD94B314F9BAFA7217AC70D8D9D02544A545
F6880EED34399A835514CCB97938F3E012AF4D68C140C6CE231015D93CEFC522
CF56EDA6F3147B3861904FBF8BEE6DB3D2E71479CD3A02BE03C555B0808D40B9
53D2EC56876076A116EE7E81836676237F88C519F8DBF39EC35FE41D78CF1665
E3FFD09C78FFF428AC27BCF0318D0849935822699E31F5115E7854A22F46951A
51F24526F7190B18B313DC58AA2EAF631A48ABE394668C6F1CE9AEADFB56116F
FB38C388F96143BA870537CC8B3E5F2DC39829DC8A2ABDFC584BBBC8AB8932CB
FDFB9FB91713933221F95DE894A8F0FB390C4649872B940E5DDCCDCD1141EF87
3A4D7DCCCD5170AA533B314D338A42B36912CF67F8CBDFC44617CAEAD49134E8
205BC67228C656F8349C249464D3D477C052773C2829755E601BB620B435C1F8
C806B6F2B26C65BEB92B97EE5AF259DC33AB828E9D80023BAC482F8B93AD55F1
D27B8C439F809D15DA7739FAB5D8E03BD8F283FB6832C55B42428332F2357E23
D066595826FBC6EE668580DDCE70169EF056EA05AD5FEE80D736244D75CE65F2
0B93AD1DCE82AB4F8E7D800B6DC6690E945AE88661AAA8D7B47F2FF82DE20601
02D12C16BE43A0786A9DEFF6A222D580DFDF477821A9913516CB0B28F80FBB49
3B6C3AAB962CB9E16A240013CDB4F38DF570E3B1ED82A59B6F6E4940DFA3D100
2523E04BE24E0A032DBBA6A316A001EF34B710BB4B0E89898939E1925A0D5E8F
9EB605E0167D24052ADA3213CA5EBCA0F8DB4378FE6014FE4EF56765855524D5
E38F1D85396E7C5D3852F593CD8FB5E52B587CFF44B09B25283E54F1D2370901
BB1A762ED37127DF2283B905B9CD7FE4F2F92FF6D3064DD668D016CD47C8D086
A4C9BA264829CBB837D07FC10446E70F07D571C4191D7A4FD4B00BBFD378E89C
3F12BAA82365202E55CC3A814566E465F431B5E236C65678A457C86AB575D0B8
7253912D7140938D234BB2DE975F01D50DA82647B305ABCB2427585DD83DE5A6
612AE12C94851458C3DBFA51827C5774CF45F7BA5616AA35C6FB84BB1A9114C5
DBED2F69BAA7E365A1B0F60BB4CF2E39B13D89860528B5728B7942163227EE71
5A2BE644EA55032F07DB4C25C0D1E15E3395B062B933EB55FC3D39C4BAC14F33
BF9787B1A2CEAE74531005660399A7F252DFC48E9DD4953A244E5AE73B98F820
3B2AE16896D2F6B56E6DF1561215B3FB914BF35145019FE371F59501FD94988B
3667BDE771BC62455181F1B1B613ED44D2F499C69EA518C750370797B96D6721
32C4E706A6376C080E96B4E84895627B7886F57773C20FE7B628606711423149
D9F393F5EC7F62C273D4A0135AA2C6CDA1A2B095AFDF0D7EE69B65E0181D6936
931AA76B9E0D0920C9326B499854BCB7C7CBCD9F9983EC2F0550746CA3B21B02
6E261F8D920C2BA8F9DFC5D3E08D41269ED78A655718F13DE2756FE91B30682C
253274D8D5208E0F04BE512F0E4295CAF659F0A1D80254EBB0D8A2E015FB9A90
70A5B29F6B69940F4150B8E94C4CD160E676E300BCB6143951019E9F254AA043
46A5A1BC4BEEC335A5C78E90E121BEFE8C3E17216B783C493794BF12502E04FC
52064E63D005F2034286736D103AF57ED0F5B6AE95A022F1C722FECF62C2CC08
4979890AB29EEAE0A954A77A254CC31833BCE789E6D15B77B6DA54B7C3CDD082
3546BE4329B97EF05D3926FD05C8FC76D9F1E4BA09FAB2311285D5B2681E15EA
7476356F91248AB53FB92DB9DA8CCC5D4C808DC825E8B2EFB8E2803754084084
CF308B047CD432E54387DC5CD7640E6F9E5046DB1E53D45DD080DB59A6E0DE91
C1250C49E060D989B489D1BA5D33B1FDB65B270A188A7649D8D1437039443AA9
46A7630D18741C0AEF648E977D3EC92D101BC75248B957A4A5B85141F7B1B50B
CF16EF9825F6B20090E4D6280C5283754EBCB5D27C7BA9A9B55CFB48945479C0
9580F378E3BF2E599E30369479139F23EB1F9D299353CDC99BA9CE2DA27904D6
4935ED0E068B072C3F11CF15C402D300D2FA7A62019433EE160797203C142323
DFFCFD374B3795AD33593BFD738991C1F3DDC122A505ECC299FBD9A74A330F3F
FAB956E067901BD307B6477A05334FF0F9C9B79127F949FFCFA845B059E39852
C8F2DF00B9703B8368DFB0387F92B88B9349FB3DE62680700F316E428E93741A
4C19820FE59D9B881181642CB1F63F6DDEC90F63BC86FF201FAFEFEC075F6E88
45A4D5DF1451CB00F7034FC77E7DB90B8AF1607EDB09F9C68ED41A1D6ECA29C1
76E3F39C3548B55E5B04D6A6E10DA98512FB9BDD35DE010A9DCD9026C6CAA1E8
78CCB4473B0763AF4BEF82DC237A9613E63883D55FB60A1F5284E22685EDCB5A
F06EE0CD9717A2A364589CD1AF7D05FAB4DA62F0C1C6E3D9A9FA3B7CAF9D0606
5D2034DDAE9C7B38F502A82A0D35F24B66D1E2D6B31251C60FDC2D95B554E101
66E063832CE329E5CE561023438259A1AFAA427959EE4927606F08F4255EF0F7
FE99AD7ADAD0922C1BEAAAD9B337968A02FCA0132686CA70FB7D927E36A2E4A6
F34E754C8DD8EA2571CEB873D44D6F7D41AC91E8404D8AE952C3C78E4A6BC9AD
63E0AF262A9B23992492626D803FE071A2DC7981C82FCBC34235F261538F608C
93ADF044C39BD2A560B752BCB18D7CD3C3C9D8C72E516C2E80ABAF4F6CA5ECF5
06FD6965F046F959CF3B5C3CCAAE1E43F31B506CF77D970ADC40754711D99A68
E296DD3E74E0DF56E079235A8B3F5BD36171F3EB972479D537F63B50E8088F4A
D38D6923DA6E0F784F42F625DFE333507C3CF7B820037A908ABDF119B189B81F
8D1BA098074266404D32CBE9E1B82208B01415EA7476356F91248AB53FB92DB9
DA8CCC5D4C881CA4E6EB760E528A8A7CB1E78E8CBD5F9412659725A116F51164
F024E0D901D6F4BC37F858F9C4B19B9AD0A82327C678755F62A3B464A0300513
DB48355B3D1870DE8557946B3FFAEBF3970D6180CE16EBE8021E7A49B60F46BD
BCC35182826B99DC9B1615E5C5BF799992D38EBD40D24C652E1387BD302832DA
3B044A853EB94D553D54287DBDC351D190BFA2C1B80178081AFCD61C03E32FF6
A330662A90683655A668931A02B1E2F133686110E9F28BF55CB9094931CB58D7
62AA581B02F75DA5484396B44691352488345BCA78F87907F1E6E32DE2FECF6C
0E45240CB2B36057E00EEBBCF206EF6A7B729380BEF8AAE5EC27E107B0CC32FE
842D8965DB60AB1F70F2794B3C917B718DA8FA6ED6A8582BDA6791F08238AD01
C6655292FD7C04BCCAD72BE7F89D1FA8FD334E62A6AAA8137C42457F12774683
7223316D9B95988E20E1E71BCC60DCB162FE80E643364248898324FE1AB2F1F8
E4D0339BA19E6CE1FB51D65779019E678CC8BAFC026639CE00ED9FD63EE38EDC
00A8415D70BD5463DC64D0B5DA5324939590C8A4EADB08865836B98C22DBC04A
91CE237B8ED9D9F0717F2254B2B54A972B3583047D43D202EC047CC23B80C417
753C4BB8B8E6121EEB51C5F469E6A082DFB54CAA44A4C001792669DE7F11CE8C
ACBF994B414731F0AA42B163340784322C59D5973CFC486571E4247095DFC523
20C0DDA3108450BDF74E5373FCD4127D1F4EAA2AB5E8884D7E84B46119AD70E2
3350C13A50F6D110323B8E267618226FCEB33E58A669E704123CC218A3E114BD
EA9D5BA611748EEA4132F47399C1241AA3613DD291F5D1D224AE221D3C1A3F92
2161EFE92BBED696A77FA249F7F8320BF29606D7692BFC294417B1766257EC2C
4BB1C2FDC53B401639AA48FB347E8A5B1E0D054BCD4F9170AA7C299173C96B18
9C305C68E246C0CFDA15BDFB2EDF7D68140410805D19400A736213F9916D014A
560CDB43136466E2411874BCEA002D2EF289BF18C8EBAE755857D51C899EFE94
6CA0AB0475DA734C00D99912C544BD31F8A37EA491FBFDBF163B51D39167A93E
61FD9B41053DB67BF218FA8A94806AAABDA31A9C1A23E7A19F9ACDC86715A6D1
4EE2BBA631A61C5CC3289354D143CD1A9EDCD1767E496426D134C1090F8CBFBE
01DB40AF670FDC930ACBDCB2C7D2C704581BD389D4C24C460375FF69B34D18E8
7AC359C2A9D675A71BC6095FE0DE2ABB0DAA2463EC7D3F10C9CC925E6B4450D6
1534122A2BAFE84F9E953A94BC9ADB7197A9152E517EF0F65FC96F998CBF9891
7D87F88D1F3AC128FE6CE93C051E13CE2DFE658B0A72CFB65D7ADA8F84B40898
02A732F2AFC037D6B41BD233860FE71B4E744ADF4A633D9A257753C55B22E5A7
D1DABF7E9B9C46C2494527B0F3E12D1BEB1664549F280A535B43DDE394DEC496
1AD0824E4A4E81527F6BEEE2971F8C1069F00BA6008BDD3080C397141FEA2ECE
28CA06D6230472BFE2B815D288DAF8F0B34E96EA7A62A7938E3F656986B634C9
E10BE6AA3883BB2994826A94C90E9BBE0709F542F3EE5DFB1C1A0AB40E808537
744BDC0FF7E5E63526878D37BE1992CEACDF15B23F185B3E4C52D7EE2F941C34
150B85ACF426D778FA362EA425A449197148FC3D55F74A8F898E5CBDE7B1BA3A
15535AAC8A3DF4D1541766735CC1F322D63271752AC8CD9D60D0C430B2C4274B
6C0F87894B0C57FC33CC28D856E1923E8FDE1077F02EEEB01ED13B287781679E
6A7AE554A06606CBF584F4D33498113437859745E3B4BA25D13F5D195B096852
96FC19D68A6C1505BAD201ED5DB6D6483725D0EE18CAFE6EB73C91E282C94F6C
12EF4BC5455A90412B643A86F3E4D2831BC457BF88B116C6A5711DAF0A3F0951
06127F6522E86D15E6D7C8B3745067C8E67580000F6943EEEAA52A78D87C1334
26681DA864ABF61B57863F0A872BEA4FF1715EB5B785D2AB6863AA96EB4D8320
EF3A61D32F77E9D6C13D52EBB1AF728025500D866EC1C6A40D8E524A15FD6DA7
834EFC9A16ADF045E0AF3C46E20A43273FE8CE2AD4D5677581BDF6B083DDE876
B25F9F5865AAB3BF1B8F70B47835A5FF54FD72789EBA34CC609FA509C6886BBB
C3E7354C341159C5FAB5960A2E3E913CC7EF0A07843E37CFC147A7FD185CFA65
DF3DB858BCF75E95321A7131547E0C89AB2E6F6BEEE4ECC054F7DAAA741D8ED7
C089B436056A0D9B3D9EC972D59920550497162B435DEB3C8C4FCAEA23F4F33A
F3E02DFAAFF16DBFCC1F93AFBEA0E6F252F32A190831DA30BD1A0AC04F285150
4C8881A81C1DF38C9F394A21568AA5756B2072DB14584DFAEC37FF325BDAC8B8
337F060FFE21FF47D8FE250804AC5A885463B51567D1E01B09FE682EE128C28E
930169DBAF16CB022E0FC0EFD087BAFFC6C93AF8FE338E70387B4F1BA2119F2B
427DA23F34DDDA919B6B19814BF81A4996474D99E0772249270603A931D08C5B
96E9F5607A68D40CB8DBCEED57460212B87A1528AD133A2681B4DB647B11B570
53E9F880E643364248898324FE1AB2F1F8E4D0339BA19DB96288E630CF29B9B0
C82CB348259EDD482520A8496651D901F3110239048BE84817BC6C82C18B54D4
DE7D6BEA0DF934EAE9355F75676B21D53206AB65DD1F7D4235B9F192CE5721CB
A24721E4DF7EF63891D98E4EA24E4EFAFCEB20F747EC99431D5C184CBB71284E
C3CE8741D3F49342D0FAF6CDE696534896406A8A5234A8AC19BFD6E27F18B3EC
9AD4A85A734B99F26680B00120B7722CC15AC82381BD968678CB38F74D127CB4
3F1FF37D834FA991181FE96A25738A5FE7D15D283886D8B4550D5216A9A52393
4B35E2E80EB89F4782D8F34A5DC8CEDCEDEDDFF490D283E750DAAA3BB7DB6430
5F9531FEC9937F2FC2322AD81565EF1E13AA97507A9841FE083B062CCDDB63C2
9100A4C4A0951F09F5CDA85FDD822B626F0B4DF1B4F8760D8A5B203546F39672
3B047EC58146C835CE2E3F0CDE6013FFB560C6B96CCC5ACF55B7175117B32C32
689541FAE3CA1C359295C7D2967195AFD2D94BADCE1E96BEF3130D6EF52F1420
2317FC40F6C9E49FEBC2B0D192899671F362A4BA881C2746ED44CC856FE7D20B
081264AD37B4CD4E7D4D9BEAA2F089BE24ABC3CAE648B69A462F035D418602EE
DBE78843300158908F77C0AC759565A3E6CF176560A55F02528ABF0F913B5B7B
D8348B4CEC011DE7FFF9453F98FF1E8AF10AC01C286AE887979C2FA424A13E91
220E40F11B8918E8AD39200BFD0358D8D606291B417D0B25542A1691D39286B1
C00698760DAAFCCD32B85D6FE0AEF640C96981DAB2FCE4B01FDE418380A16AEF
2B0C50CAB47B1E1C2169FE6393EAE0E90E7FF7BC2333D4E0215D5201E7C07A92
1083B52C20CF7246DBA338D269EDA4D6177ADE1E9F41F23C77C5072809B2819B
32478FD58A974363A09F7D73BC69C4A71F63B6B2C6B6FCB93802D72D75FDC854
7F01DCBEF33E2B13994C1060A0CEDFF5D386645652107093757530AF7AD35256
3063A1A6B764F66CE61D17FDC29343CB1551171CA4E1EDC85D3D4FECF9402515
70F34827736C9E61DB7F0FCC062D4E32B9D21CB37C9941255C8F04AA43F782C9
C7F3EAAB1C325499024DAB569CB913D3B130694665CCF381570E909DB615BE30
C200F6E27BB35E591601EBFF9580F378E3BF2E5A4E23B6B29C6FB2B8487C2466
496CD53654AEBEBDB8C753201D7FA918D72051DB6CFBA44520B5B5689C875411
28487E80FDB79FB0CA9553B16FA5E8FF48CC39F01871EDCE7D5B5D62A97BCD03
931315E78D198FB6DD459C45B64282A21BBF80EC93F7FCFE82F4DADC600746F7
1F3234D172AC0AB9C34A61B893616A5EE787F986786F90075F3A8BBA061D6A7D
1B861CF372B735FB1A6FBCD7E056A366A29BE5ABE7F331A764EB25E71E0A4F39
17EA2903E365FB8120D2C32D0FEBA047E0FA256A192BA240D1BC5F95F52E2343
BE1D0A9882A8FDE5AA396EBD58CD1FC98261FE9546C44C769834910363D0CE8E
5689A870F7DE1140DE6AB73E6EF46BB15A2B0A06DB37A8BE36083562CA8E1910
1904A29EDC81C301215DE734D791692C5AE0C53DB380ABB8632A6B26408B7544
5A0099EA06E67ACA22B1E387F336F5899439E5F846CFE81911D1812DB7C67967
78B0918C22946F937D5F50730F87461D8166D473BF570B3DB7EE8AAA3945C392
5FDC49F75C0ECEA5D575F34B7F7C38809C10C76AB405E68746B94535F38840BE
C013B783E6A87475B265EE94D92CFB878BB725B0E81E119B3C1DC388C6951394
C712D244CF986BF72386F3675257AC32605F71C14FCC54A74F4E5D1F69A9FA48
67386F2284702C5F6844104DED3571258E7EC2908007837BC79BAAA38108E021
806632448E0B8CCD3C4D7654BBDCD200D3EAD6C6B30031F2D085E30DEBE15A07
B6A046946D1BAEC088EEFB25C8FB2DB53C79D16B085D8400FFC9324014BE2A1D
5BCE1A71AB4D0073D71DC38239BC688D3F5F61CB43AE2A560B31ED8235C81796
D53D084C8941050877519219B3CA4D690E7BF4BEB7FD5733825CDF4A716744D3
D19D52BD69A4F8E3CFE795F74543F4A0DB7EF982CA4194EB2CE331EBB3DE636A
8E4EB10E500A144A602FAE78B968D5F4882FEE876EC79521622318BB6960F758
8E6392FC187EFFFD0B769FA91A58C18B30A6F175A0A71B8A651C0302D61DAFEC
73B8F3419AF9EFF1090AECA836F70405656AA114D7171BAF725B98274C1DF15F
81DFD2B70EAE03CD07F1ED154AFEFCD6DA55C6B20176CFB38E41D00559DAAEF0
BB53B8EEFB121487E9963A653812307AF69D6BCA5062E39BB855E9BD68C4C072
8A5B37F88F7B480E1CFCD9CF49BA37A4AE429B79608716438BD99613EC675996
8F0F14A4424E00738F4D305CE85F7416979CD264489EB8754CD04E4FC6B1E3DE
635362BE899C415584C1F2BB07C8B9D7D6BA0BDFB13866FDEF0C1BE93B62AC49
609509099D7E9417A430304244193B8B5CE6EE63CED9F944B42EC90FDE715D61
801FE189AB7A7530A0C7C921F3944F1BD1D7AB84C2DDCF5DA974B2068488AE47
A9F0782EA752495290E6DF4302AD80B6BB6EC73304F7A0711AFE8C8B757A68BF
C53ADF8F88D7F4844A8FA4414EF3389EBE0EC77D964CF167FB16E49BBF7BCAEE
19FD0C6CBF03D35B160039346F9156826750A779DEC0047602E7D4B8C44AF0B2
552C97BFBD1C6C0062488763FDB07939C29749359A700512C58E83F41C1EB957
05A5F87B523A261206B3C4E44D55AAB8FA8635C06B486739CE5265CE45AAF35D
97C24717BA12809E9C4391CD56879C4BDC972BE7096A0BF72B68B2C84DB44160
00A82B7A78B66DD73785E91E9E4CC60A09BEA9A64E0D84BCA80055E57D34FB16
5E03167D702466832B32DC035DFAF601E2EB6615E616FFD22DCC6CAD9D6A335B
2BCFA6D000A7C579EA6EFAE8FAD53CDA1FAE1447375F693D07ED4187C7F90629
FDB34AC3FE03C7D9738E03D9B5DE922234C3AB8B2DCC9A0F4B1AFC902748231C
B4CD1A96284BBACD7E00195F8AB343CDF942C8ECAE8311822ACD70AE170C427D
588B3D2318F44C7819026F198BDDB718B4780E32DA89CAD8479AE7FFC2E83ADA
764F9A37C04BBE3E8DDC1E018442474E35A76E56225C5A4D5BCF01A08C95ADB3
064AF2C35B4FF17174168F3236BA41889C5669C3216F7ACA6103A69BE3AE00B6
6F4A9398E4F3E813EE0695C87322F046F1BBB4FB04FDC4FE2F15947DE72BDE53
9DC79E2EDC7A4A7164630A7BA34D7C656227886DB240ED7408441F08E92B67A1
324B65EA61E97B2819EF932341824C2157041909A5D130F81567439AF718D3B7
B02416DF5DECABA6E1212740D8C45888D4A0CF8AE610E7017E11E78CF5E6687B
1E128D15E31ACF330CB47A523E5D9A499C1047C17441A26538BD1F7F090DE03C
B62E0F8601FC4D79B521533E5D27113B3B90BA90FA7240719CF20247AFE827CC
E4BD01C368A9C12DF6EBF6890F9FE438356399B49BEEF9B4A1A5A77CB2CF394F
7EB0D9B1117596E6FFDF4E260DFA8DE172104A59134C57CD5CD0305BBF875D70
87C38220B94F320D56406F4EA3202920FE665809102BA7126DC3BBC9925B98CC
9178F1C644D40CE07A4E70B37A6CF712C5B966F5FA87940EE2A1CD5C47FF1D64
98E484B2CDD09A4D644584C7B4433471A5338D30C5415E1EAA291E9C060610E4
29744B45DF032165ED466E72502FF6212D123023DAF80229ADDA35214FDC42E4
14169A39946B32D7DA70174FD46DA36BEAC07DF24404E050CDB6C3D6B87AC291
338FE0EA5971F7D5D6ADB1B3B6C392AFD8566320B0DC3CDFBC2B3B9143E3E8FB
6E53C629EF6065511EBEBF7D54B8ED9F821BE9EB51B17D6F00284F0663CEA16C
18BAE295057EE59E3D2F372B87A9C9DEE25CBB8AEFABF4AC63E36C288D37E6AC
05331D22A0AEE3CC6E0373D58B922AA953832D094E69E6C75B73F4A9F21421CE
159E42D0FAF6CDE696534896406A8A5234A8AC19BFD7926888495F421F35EB45
FBB2781CB050CEDAE7659CF3C7F31538DDCF25F9748E9C7C49CDC758CA99C4B0
63256B4ABA8C5B968401A3CD81976D2140ACC6FA3F605EE9E2C61DC0694534AA
DB7CA1C907C3EAD979BA7BFDEC45A30FE68E33B5A3213250E4B49D16F7F31113
D7BF4D503D836B047EC8B3065930E77CEDD673F09576ECEAF1CBBEC6C6A285C9
6A5DD31E5D9A330111F875868A455F9BB65BE5808EB4EF66BBC42389F67D87EF
C1E935772C903E947E5325EA8D2985AF7B9F14EA2C7C51096681B7738144CBA2
82A9BDD4A1980409CA6EE759981E943CD7243EF921F94E9C9CC7BD30C73E7F15
1C5C6505DECBAAD097AB6B122954822C27F9880CA42AAC79E825472320B4451E
EBBF0D8A9043A119EBA11ADD7501A2AEE2F85AA447BDDE076C213ED883C1B4C6
F98256B66E608AEDB1B49D2C190A6962680A04A5CEB915B8E21F640745A0AB64
5438FD9FEAA5AA98B091AECE8681999D7C8CE7081C6169211FB0E2487E6B1575
25363E1ED15520097495048A5040A358576FC9D03838EC6D061585F61F323D02
11B8766D50BC229E49B5D231FE5E26BAC879B6A7E1A6BEA6E93B60B99AE71992
3C6AE3C993B61EB38EF3A1DD23A8303CD18C1EA75B4C1FC380622AB54A020EE2
840E81EB0E74630F0D42D0185E7FAF033AB7AEFFB9D6B061E389399994F80315
901081B98FF3AC06F5C24B6A33DC92C72F56842EF91A19C55CCA6ADEB88B59E2
4FE4A96A8CFDFFAA67591CF5565A0DCA782650D54B8ECC37EAF5F568B709FD88
0E519D305B0313F71DCAE5B69DF9551D56E6DD346256A34012E907F57A5B907B
F705812BC67B634871A28D51B6F3880C38FB2349BE51D981A08AA153E578337C
57BF96A9157BED25298081601534640AFD502DF5F6C67A163DE6523F9E660D2C
C6B59F7AA87B0624F578549D72A4D4B36D153E5B17838D497D8CAB42412D8D66
2DF7826BE676AA39F9ED4BCE35D7709F7523E4941D081296049E92A7DF9313DC
12E050920A13610136D6E15525C987A115FD9FEF3D177FAA08B4EE28BE2C5BEF
08388EA6110ABB979B0295FBB55CBA2B0D731BA72CAF550568EB962598076D91
12F645A13DE01EC3851DBD7304437B75809AF6881F745EC71298D454AD31AB99
8F5821BD1677D4FFDFE5332262C12D8255314897422139DD5CB2AEF9CB88ABAC
CB2742EF7F6773DD8865845DE5781CB5507E4B60F6343B92F1B67E0B8B99DCD7
EBB4E08F06C456B4E94DBFDF8A78969FF3C08562DE4012BAEF33DC71F93966F9
F7A94394FD517973078F27D6695A95B4313C5D24787A7711638D5760569422E6
03172B7CC7BC55EFD74D530563B0659D9717F0BB4C4E8B8101FFAC7B89E00E76
35C53DF6B0138A284A29A37284134AB99755852DC554982F4503E3C6900F66C1
307DE0DF1816E435F38B2AA0669681D8058179F67449AE6584B538A32295BC5E
3E2240F87D0F698713B90AC7FA85278A2142CFD0DA1C61B69A3CAB44362F017F
0150616720B0E2DE883DEC39F1BEDC9CE8937288DBC4F96661C812D31312FDBD
0E6D032BAA676AF73508E9704D6E01E3FC943AA32D2E5C8A118D48B4FC5A91FE
145FF8C4CA9DAF7F285A012039386A42FBC4FEEF7FD5281A016ADC60AC66694E
DC070A1E2A375324ED3BE8E62A7510075ABECBA8375A5B8302ED2104A335F5D4
03518871BFDEFAD857968CB89756E1BE0DBCE7AA46A79400E279407A451B1D86
6FA197A055E91B7E6E87D240911DF09A7B362D7CBEB0CA28A1E598ED72AEB02A
E905C518E634F6763DEEF59FADE7248B211E3FEC079B0C712F7D2C8DF98D4830
A9D8C8B70A8C5D5610F4FFF2647F18E3C3615CA7AF845DEB226DF86483BF8999
41F23C77C5072809B2819B32478FD58A974363A142DE8F252A4A13C1842F8BEB
5A2416107B1E59084B5A04A4F587E6BBC957E31B764127ECC5CD4D1718F12949
82761F7478509623114B059BDE45E06DBAAB8396B47188F875037804AC7C59F1
92653317BA26FFB09FD38C67A3193148EEF22BEEE604EF958923630C1C7B9AA0
F2E7E5C68F896FCB285FA5D7E21AF5F8CA1DD90BB7149E3DE177F999B09A9740
013734F63ACF54AB05DE1663066331A4608768C3033D0A0FB4B6D89FF0F07276
434B5F97F166169923CEB18025FF4554899EF60A69BA10A8E424C417FE29FB9E
E32F0F94CC9D675700317A06B3722A5D9BF70790DC31D5F15BBEBFCDF0409CAE
4DF288E9F7D80B149B9B7DF58324AE6E3B639DDE323A6EEAFEA964B4ABCD1B27
E608674E546D2074A3AD2FDED543CBEB81BB9E5781FBA297938A3C986ED15B14
730C7BE5794100212D41219DDA8FD87341F337F112E6E649BE407C85D3D11944
14EE7A4859BB0063EFEAC267B5D05C903AEB022FB3EC27522E182DAB2869CD2C
2B0F39016EB778060F30BAD0D133019C4ADC916AA6F4F5FE8A642DA2E54F4223
3D7827019DB32D4D817D360AC4E8BD973675284E174417F3B316FB29634CAD38
F0B9C8B1F4A73AB259EEE0DFB01A8765EBCD0BD1C62E95F659D68F0D69B85BA1
88CD24EF8280D93E247F05FB893CBE5D859076B5AAE89691CF24F7F66E79D3B2
B7687683D34954230DC6E93A7772A2A4678B9658F8649182BA4DD7D16E5DC259
E3F50830BF8DF3D077266A39B34F4B3F800F4C6613C9390DD954A665F93032B6
8AEE779AE3F1257DF466F59181645570223687AA9041C1438B7BCFF69BD5A4FE
49765296D3086AC498648560D837FB67D3FBCA7A93A80A32481524A95DD95FBB
8B7C18E2A7B55A71827007D54E603D88211B0668F986D5E31A3D60BFF389BE97
B750CD4017C1543377B1F9224B1464E2EAA7C8A723BC408CE4A039F767278F16
5652FA2E39A58EA63476CAA4272192BA0698626AE5FAF77B9282769B4DEF9D34
8B8C0AC447681812E3B55E8406EAD8E149AD5B28578E554F7DDB26D77984A9B2
2008FD3C1E5807203C5389F960C2262A263D11F3C1C196151753819D477857A5
3E17D0FFAB7C8A91B883DF2E800DB206DD0229A2B37F520136C4E3D2C9EADBE8
85AE2911622E4A7A73B41920BA2F51F6627DBC1F119BA6B2219733EABF0FDC11
E0564EAB95A2EA372DB1166A15B024C0115789C442E6BEFDADB6D2A741F03577
E7AA7BB7E0B17DC06CE5CAA36431889458C7A33BF68EEA18E6E56D370B42C39D
2AE574676AA0592F3F052E71E8E353D25EEDB3F9808092CCC3FEE0F0F745E8FC
A893CCF96BF912F445B8BE29FCE6F56F93CC01814CE35C353A7EE33D3548CED0
7ED01BFADF46DA47A77998C831CEA17602DEB42C4C2580BDA66B52594D5820D9
9C7C2C98C0799EAE1033E802732D4B23AD08E64CD0EA508DB893617833CA743C
E1E3C2855DC776AE87C783986BE301803D8541D6F9FA44E5D08D7E6119989A58
C066AF5354CD183144AE9CF53C12D7E0B65E32A8EEA690C33C850A8BC6988EC1
D24343749F272CA43BE6C9B5CD3E674BCF858A46BB2C6898420C0CA756B08A03
09EB35638F24A453E9B9EACF7EBD6C0FADF9A6C05BE3499567E930F710682B89
54158F939119BDA2FC6120F98C489E47D1E5B390059F800D5CF8A911E18E8565
8A1BB7A447448D77F9FE1356B85E17A646A2EC71BEE13C8EDF435911D0DD3836
70A99D2BCC4115720B646962D8037B07FE87D0E97CF4FA509B30F5CE185B38F5
EFF96C763F5107940EA937596710EBCF34076B6DA2CA24E020A0FDDCC0498D74
594AE3ACB0ED222847B30BF10D01299C451CE6DB3C8E9EED4DDD03EA99ED4967
B45D9924D8F14C06021B403C11DCFCC7391DF47B9D093C01C8FEFB74E98F68EC
3A999035CFC5D31FA5671106FB840B9089E9CABAF3E342A6841B3D52044056A3
3AEA6D9BC00E54DABD294D53D398EB58F6EBC3B6081B04E06BB7EC873DFABFAA
A713F9F7D2697844E0FA82EDB7D381FAC3EBBCD2DC47A501DC08730522635B0C
AF2EE71493D9F365FDD09268906EF9FD12D949C72218A377F4E0A3DD5015C643
2452ECEC048DCD14814E47DB6118D67019F0CEC21CEAC83639A0ABEC3BE6CEE2
2FFC81D6886064E24F38960B7FF5F735AA82D722934E2A1FAE096E603D910231
25015202C1C08F03BE8678A22E2DC6E9DA7550D3CE0DC86DA1645B9163C671A8
E071FDC87ADD8F54EB151A227A6A71F3D480BA152D4448D4AD4EAF0B97A927AE
FF1F1FA4FF431058CC7C5468B27A13C6BDBE2FFC6E88C3FB8B507F85E91127FC
EC4599BB37C91F64D1E4D244D4BF573DFDBD61A080CDB93C6BA9E506F6BE1629
720E21956A2E0336865660580AD6FAA5A61B3AAA156E5CE91FBD5F44F0E247D9
57956045B1613112C92AB52E5D383DC3DE34556B64F1B8F1585F2DA9A2456C79
1A5FEE14044962F0B4269F80FD7B5E55DC55BA962F397F7BA6F533D3AE96EF14
8ECA646A8C3CC88384C63EA15484BFACDF4042ADED538BD62F0E56B631C83839
F05488EDF2D3BC8D252111E8DB45FF21B84D20BF831732F917C13B4E2AAEC6CF
2829C1F8AB2E1A7FDE227C2CDAE4E45304C3A59D0BE4AA66C14DCED3C6423C5C
F357B221756597F57FCB99FFDAEF963621BBB8373366E023060A5EBF4434464C
47F8DF4DB69281479EF18DA2237A72ADAF66580344FDEDCDF9C693C5E7BC811B
E21F547BE88A44403D2833B34AF40511654F96BCE0064860F39E78B7603DC2B5
9108094C406EB457743043EBEA32B0989E66B8F9BD9F4C10B1CA1196BC062E04
A4E5BDC05842571392295BB7FEEDE3A4F983FA3424D8908193BFF7CD44D4520A
27D96B1E7FD78689111BFA6B2D1015854A41D02BAB459AAFFBA750A16A4999D5
A59AEB5FAE6FA519B188C7C3AAF2173FEC7D13F2F47F4C17029888C8905CCD14
B5FFFC86409023DA0394E3CCA13502D03B122C2216DFBBCA49EB4131D9796D5E
9A6CCA98D3BAAA326A7E20D2D854C5AE42B7888DB9FEEBB7BB5138A9E24821DD
8DE8D6053AEC9EE2CFAD51447F0D660BF7CFF7EBC4AAE903C72AACDAAF2CF94A
6DFE0713DB9B8CBDC0D146C066E67D3B39BF4BEFFF935B48590EB00726C0670E
760E53563F364A4DD82BA880A7A5CD59F8F6000E1978A9EBDF3B4622CF8D7EAE
D62367A97D15EF20362AF7068A89D4BB6361D35B0C05E68E1C0C20518533DA77
B3495C3185E84FA610779DE56FAF0E6E738B7FAC8B9B0E66A1257D5CB11DBE0E
749BBCAD61107F6273E90DDA883A59F460FCA31828CB16281037C9A723C97E1E
7DB9D79E6622D2FD48EDDE07581F8179E4B7182C4404BA54F76A249B43689FB7
533FEB501838649B0B9FF1FF05A13DC3F03F35219E01850B289396C1B9B894D6
457C1DB65A0C05F41B8ADC5665749B28A812AF98BA4D795AD000DECF6AFBFA42
245510890A898D5EDC968FABEB05EF67E2019742F1B2E14F1256A15AC8CDC7FD
77A7C3A86C2B0CCB884762513C8B00188D1DBFE2AC9660BCD5D6AF1CA60FB950
ED56375F1D537EC4280F02F9045E512B66F5204C63C0F5ACF883F601CDEC8247
19382C9F6ACE673C82C90FCC68E45A87DEA97EBFFC01B4B0E4BA5E46010E2FEF
569F0772BED49967AB61994F100F99C90FED2ECFC22D86B42FF91FCE7E06435B
B2940232865EC1348A527EE4B7681DE25865DD5159CACB293FE2380A97BDFD25
8BC893B732CDE0BDC342A927FFF8372D4CB03BD54FA6EE1941A393CA17E459E3
36B3BB30E515CE7EE1DA7550D3CE0DC86DA1645B9163C671A8E071FDC92E07A5
B17E3209DF9F81567747542BD1857B6F5060D31B9FE88BFB083ED00B07F9A20B
71902AACC60C6E686AE00A2E0DBB45723E3858702BD9524FEF8067C9C0ED73EC
223CD816DEA7B21CFF20F3379FB731A68582CF3071F2A09A568E3F27DF88EED6
4E45DD9874A61523D23192198D94E48F95BC1C1E95DEC7CD47889B73CCC9F80D
6C0D5F3408FE0CE1FBFE6756F832D4C985A5AEAABD496EA804E4B8A3BF69D6EB
353C7CA61311BF6E271BF361768867F719BBB2B6C627E824BC870429BF67AF4A
3FBC314AEE9CB0826E77621B58C5A5A43FBF4D4F6A3A6EBB4D176B87FFBBF8F9
DECAFD97A6597422CD2B76FD9D149951D0AF4423D53744408ABC01FC3E9A6EF6
0FFD8D36036677F5360FF62E3350A0EF2B856DE0E73A3B8447AEC3035893E2D1
C6AD444F34EBFD7F390EE3B12312F51B3512559F1D609D0ED4BD6A5589C1B76C
61582F341E570DBBE34BE213E7DDC526FE537374441FFECBA1924D32D059448F
D4B669BC65CD97EB4BBC727B0E325EB254CF24B7A6A261F97999AC4F87B6DA16
4CF19BDD64FB6D29C60B85A1E1D93AAD8FA5CF2855594FBA5EEE06FDFB5F74D1
D499B8E7866AD49DE825E7A01928D8B0B959061B480E70B52736DAA5DF953021
EC02F95DBB233331A735D43EC82ABCD3C06DCF9E9EF6A040C4AA1A71FCEEDE1A
F6EC81EDAD64FCD4F875F71C6713A814323DA321910FE6D4ECFB2057767BF07A
3A0A0DB231E38DD92349F553A1CE174FD50D26EDA5FC3357CB3F227DCB676096
45F37F3F1069E0DF03EDB34A95C2B8DF0949D5C6914C904700745F6506CCA491
E13FAD5FEC47CF6EE9BF7ADC6160420EE51591522FCBE5110207E89D9B77DD74
4BEC1E8FBBF901BBE44A3A1AF926DF6B8A3B74C59AA6A6292B20B22FB82E1303
1EC38FAA42B840D8CB22D962919C8358017FF651CE3A2F684C07F202273A7801
0DD43EF4D36C3C6BFC310B412ABDC95F0615C22E15D7835669581477FBFD6147
00D6BC3A1C4E266C12399510B70329CBC2AC275331FF480589012D7881C8E477
F00C19E72FC8AE9D835BE39DF765ADAAA523C72A635DE5183B040F83F333D76A
43C1AB64967D8405205B7F4EE329DD779739513A442709BCD69037DEE191A28E
CBC0FDF24B5D2D7D9FC167A6E7DA9C87C425473B55DB46F1C1179A76265CC99C
6A0759CAF9A60C1A3F80AEC8673A614D2083D5AE7EAAF30FB9458CC1F8F06A50
2483E02F8ACD43AFF23AB95066BB34D7A096DDBF4126D958E39AB3D10ED1646E
FC265BA8CB6DD606F957C204BA901168CE834D389D42F4B5DD688729F3F6AF1B
AFE83C6FEDD2A467C58639DC8E9AF04A89864C234FC080A5BF5A35D76D1DA537
10E221AA6A20869E0C1BD6DA45F7B6F02CBD5B6DA08EFE805FD8380056987779
47BC8357103E942C2129A95514C575407ED68559E3C67654E12A2467CAE2F7BE
E4EEEA10A0D7BB173478115685F9E9966501CC9BD5B24F799985CA03F1728533
3972DD31A16B24F984E093164189443C8B942BE7315A716A7B5A2A6CE609354C
2D51D6E20C6799EE055BCBBAA70EEC040E8199360CCA39449F3470DD0A85A1FB
A999BE0EC90680CEDCE26888EF617E6D6C023DCFA73BA45944C36DD0785D9B88
A80B79EB802795E6172F9B38890162618B6471106077787B7209B54643C3DF86
4566B3CA48B4ED65289ECCF18BDE4D5B8C097AAF26942B161EA70C3CA23E4FB8
DDA840C49B571102AB15CDC60F6EF7CE2FBFFFA8554D2A0D48865F0B31216B01
DC5B6D3411750D0933C19F36D5557E8CDE9B86BB0D7806B03A4DB8AB680B7725
0373D8383DF96225FEFDC9FAD48952E040A242B9ABA7D911F8FBA229B8754C93
02959895287ECB499D518FF0C15C4187B5842159C81908B75A212B0C9E233F26
989D59C19520CBE7228870D2168A99303C380AA1FC52BACC65348CC174A09179
1F54750F48F7884A4031EFBA4B251C295B909E19DB05594CD16122253CE13C43
24D3FC8E8F13F5BB9A6043A988C3CC39726C11DF71071F94BC5EA67F411F493A
FC6196DC21BB9C83D96F3DC6200DECCB95B39A25028802959E271B92127ECF3E
BCDB0EF81CEF649F0901722481DF3C2CD949A492FD0E0755496D464E7DAC2FDF
F19FDF6DCFBB1BAACD054D816B85DADE28C0C67A74F8126AE35689EC621A8B26
305B0A8476187101E350556D777258A7BC258389E85A38F4D4F39348B96E5AFC
3E8C5493E8FE4A623D385CC023E733705B97D3EFF6C89BBABF49EEA8A49C63D1
5F044DD7D1A1FB182766565B59F1021509A8EEF358C8CB2825CCB577C1669626
E2C87DE60D69559B3CBEF25174CBD082428650B6B927493C30CE9ECFD44B5778
ED38E2EFB55843D011F784F7DF70989F864186CE2A1C11A77A0EE64781CEB389
8C3977875F0470B06BEFC9705293639D1A1D829444F7E9829A64AAACFC251257
11A44EFDCD3B7435B06C1DFB1B85BE285EB77B9CAE2A1DB12D5AD405CA6DD27B
9ACB616F5422BE31E327C28E04CCA5AD3997D5E48C002866FBC7055113F99E0B
5C2C2FECDF5F48B7C00514E3665E481E38B1B9AD3D901290A9FFEBE732E18919
B04F9A60F19868AFA0DC10FDCF1C7A9B7FF8699AC9750CB30FF013DCBA3D5AAD
70DFDC924400CFFE02AD1D4E21E95678CE30EAB1C7EA0C98434FAE393859A98F
C0B3EA3A0CAE07FD9660387BC6B7C2CCCAED347A6C741B8976945E19ADD64739
F4A3D16979D5CD3846BE53810CFB3949E44D93E387BD16A82F64A29C7CE76B35
4A5CB2A662E847B43CEB61791293D5BEC043B961C52F408C0C4DDE1AA36C3778
3F6581E2E9632223653546508884FA9B311F0C625518636026DCEEA351AF9D2C
FD4581EBBEC73FF0E28F0F030907291C28CC2F63DA98E227CBCD3C636B3D95E0
5207D870565291583EDC00C7C27957F15185C23080B3BFF5063182CBEB1DCDE3
6B122E3FFC4398BAF1947FD3CA821E8CE3E3D45F08B683595C33B0F296891750
33533583821D40C78E162FCC451CDF5508519B9B58B5BACA7207A8E469C14063
4C2A432E1514664240BA7C78226D4E8ECC5B15EA6037B4C0BC77E37700D66FDD
FCF2775EAAEED70AAB091E0DC2733B8737C9C33EA8C8E785CAB4DC39A7818FF7
92EFCEA05D696A3064D317BD5BFAEDE7CD709AC285006DF542ECC94EA0939BB7
D2ADC39C0281DA558B901EE7F1282032CC2AABF9F630527A634FFC1C820D7A4B
DC827F6FFFC5E59E8816E1FF70E1F59131266B6197D3AE894EEAE10DD74F61F0
D4B8D263035FA1172851F7222A6EB76F7C42A53ED4FD46298F828F7EE67EA2A7
F4E4F0BA2D4ACAA9342A2CFBA644E098EFA25E8F113C149023FAB6F2072A7C37
7B93FD278C79F3C5BEDE45C3B877FF3AF08B4C4BF08AE584333C38C7675D716D
5E13CA29C7BC6C198F3BBBDBB52F59163233E3AF7FE664D88B56E6F9CEAE61FB
B850C398377A8B3FDCCEBDD5F0AAB6C7A4A26946E9BD79B50A9825D71AEA65EF
7E100BD329B282FC53B9F4E7363300652BEB5E6B6BCF432CC9CCAF37A49046BD
2DC413BEF2621DEFC6E778CD0393974F2D0A93D2E652A0F94D8A01F235C44038
6A516B5DBB4C8F5DB698E081FDD06CAC264DC8F4E26AE0CF878AA457580AEA37
B4D68E8B29B639048688142E433DA54804DCFF119D40C5DC52DB9AC74AE63DA8
D6870B5C5D62BD8DD396F94D0636F60729E5F10461A8DDBA30C8EC7178E13A40
5DB7AFFDF91F37FA0152864BE7EC32A4D87ECC5243915C0BA12EC2F8AD6305A2
F219F8768879E1C50E47BC4CC6B35EE6EE31ADB9D1F43F9D51EDA70AFD56FD8B
31674F643AE42D2ED2DEE02609E82F0ABDEB7112B7DD7055045616FE6F3CD779
FED774E1F5FEAF0875D2AC27452FF2DE1927BD61FCAD6181F82F434ED89AD9CA
6916994FDAA2E22CEEF3B0104010C24875E9807ABFF1D2833E8FD6707FF4435A
D12E668A99BFB241EBF5A74AFDE204502361B372024CDF025620B7BDBB7BB74A
F6D5B8BB38B4A95D94A11DEA7969D73EFC36705A2CFF49113498AA9801EEE102
00C6D31EC20C3F69D426484DE168EEB03783AD89D8F12AA88362C0605DCD6DD1
B511B5AF5D48027A85A64BE0BC3146B82468590E38B4629E31924D4E1DFABB98
86B86F4413114BB2B7C20EE590AC0C65C7D792B49F53AEDC755475660D1AFF5D
F26D456DAFB6C4040E640837330E3AAD079A9D626EEF95CDE822C39AD876D362
FA6C2D0F872D37B72E6CBDF94689952C838623B68519D11ACB5A55AF22AF3C69
EFD38C420B0D93133DD2DC58828E007E0C19A802A795C2CE9859D357822AFAE0
29F13F53F642A7C84B38A212E677E086DE52538B1C8503B57D1C8F00CE788BED
FEEAB097907C74C1107482433ADBD07E6C82C63E4C1426F4A3C8B597525427E4
3F6A05DAF7091F6B63F9A23FE1D60CF8EE45CFF1192A0CBDA0EB4DF7059DAB15
4706E98C0223FC79EB3D1309D247613EA1BEBD549F79515DABE3C74E9CFF1AC2
7B24ECDD6668AC51AA5805FAEFABB436323D319E607297892E09B979F6A30771
EC0FEFE058B9944292ADF21511621F53D548FE2ACD62C502212ACD4ACE665C93
2C85AF503A78F142590DF68561D186CC6A21B8587AB3F947818628AF0513EEF0
B31505C0313797A2C62016519BEF23B160A29C636258684DE7C79850BDDDEE9E
FBC6BD9C192EA36BECCF85BE530330233066FCBA83EE6C45350AA213AD5635D8
0C796FFB9BD8BF8D23D9CF65C4D61CCEAF43758D9EDACBF4C7674FEDFE477570
7A713C702CE4E87755EA87E56C8B7CACEBEB622B2E1CA5CF16CF357CBAA6B894
DAAF566B79164A87AB4CED4A848913531321E4CCF342930684FBAF21BC9EA91B
74EC159DA81A275C732DACE2E77AE1FF8D16C3588BBD6EFBE783A69AEC785315
E5B7C88EFF9F1DB5DCAC498506C4D010430E482FE86137C7DE74DC021CA3CBAF
94EE7552736029B38142005DCFDC0DB8E79BFC287C5803B56F4058A19FEAC02F
63B3708C71BF3B70422353ED2E01FF4C3FF4C098F6FCA427D2A453664AD9C1F0
2C650105E8092702D8DA1BE48FC44AC55C1AAA50E17C875B7531CD1BC116AC4F
21FDF43764C2E9BCFBB9FEA8CBFE1F62CADDC2C02317D26E7BADC9821C498A45
3F37CCB5C6F49F964FB9EDAB8FDE5AF3B0271B06B07A144C1BBAA961E2C39A9D
214FDBD8A4F43B8C4BB923C6151413AE8B600E9FC07EAB89A3AD38B428A2F6BA
98485D1B321583B42DE5E0F9AD77BC7E6B1A6CFBD3FC70343D69983F4BD65023
FF7C9FA7821E5C552F14CEB84B1A371714455C1951CE56676BAE72E477265B81
BE7A4A0AA422D3C9B3F98541C5E6704C90D2DEB61A59B82E17854E41D0136C16
C2109C8762D3B0AF2132CBE5E88C4949117680FCE1F7C4AF8F58AE6001BEA5F8
48CBF25E0A6F1BEA7CCBB4FCCA8317D30BA91B4E6CB548044BB2E6F24D9376C8
355743A581504B8DB075C62725C1F53713226D0A5ECB616487656C1A822C2463
6E6FD8026C79AC276D5AFDA76B422FCFC22D86B42FF91FCE7E06435BB2940232
870C475B9C83229C5598E2574FB40C4F06CB4B0848DA6A3EFA186E0CF93660BD
BB489FB5C5BFD22467E3B7B7E8072A3BB5B470642E3F575F4CA3B9DA9E2DC2EF
F49CB9DA5DBE2DF9CA920E1C9E27FE6C9D4D841359D93CC9988EEF10779597A2
5E678DB4EE7B616DD99080BF79366629148FFBFE042B95362C5B790AFDEFFD04
B04AB3469F33E3EBF1155F34FDD9BB4E925596FE4DDA936CC61227FC0675301C
DA60558F65241DEE49409C10DB07153315041C35AF4899CD0B44378CD3B235D1
BF759930EA2C145995CDD5B85319EA3EABF03C0D21319F3267804C0E1CA6C995
9F392DDBA187B24F6075F39DC5E1DF623E1CD965825FFAB99043D683C060DCE9
3729098B15814D6B80E1FDDBCF314E86EEAC33E4D2C1D1824EF8B65209F703D3
72B90CCB8A2C847DBD3E2E9A7EE41620E83C8ED3A42D7285B63D84FFAD9364EA
2EADD5C0B0940737ACEB4673D7904F3C5C0D1D4B4F510F70351551583A0E4944
DA91C149686F7A74D985BEC536E96633BEA4CBC1B060F561781E1C778CAB39F8
89A684F409BD672C3E6A26B4F69EF6F240C9426E90F57925E6B90462A69B5B7B
8D3A9827F0A0D4B69BDA5F6825733B48FADB06F9C8BEB8E15F398B6963400505
B03C28B5A0D0404D58D40503CD81CEA29721E766CC64377F05DE96C7545B2E8E
DDE384BBB4881829F05B50320D06F3EC60091856CB963A14A99C73A170572C5D
FCC89C2AC26815E0BCCFFA46DD5E317F618CDE196F3847D0F956D77707E33413
7EED8EEB12E05A4AF2145FA0FC5673FBD1F0E09303F8F6B66392FAE76AD7232F
07F13A18F68E71FA1567B10B0CCD4C5E6454A0D16CDDB671CC59BE6D8B935D1A
346C5B78CEFF0069E1129AF438705D08BC04174D1CD50A27D94FB41705C44A90
528AB4D939F05DA69737DC6C256FBD00CEC973C2313D6F865C93E3A0F2E9230C
D2083D6CD2974207407C27D2B9634D43DFA681E5C185DB2E6097142E6C28B981
61FEC445841CAB51A84FFED9BB2EDD900C9486A93FA7C5A14F518E00DDEA2382
5F5E6CB74858E4BF8F685077C152DB70677B8B3BDD77FCA6FB6CFC600A5E6E64
364A9C461FDFEF68C3B532B0A9B8AED7E59D1346BF68E715C26BAC3DFEA6B3E5
BF6BE51ED142B06C89C97F88E9EECDB8A87B598D8DFD3AC326D8B960772B58B9
64E469F0CA35DB7B7E48C0291852C6AF3DED696A64F8BFE75DE0BE2B368F46AE
001303C0A8AC16741563B16054C2F450587BFBA838A12ABE23EAABF432800444
C513B87939EFD9DF31C42A62BF096B816BF1E7951FD7871917478F201065B459
E6086D5E3F7DDDF7030654B9D97F61063516B46EFBAFC450B24986396D06439F
52D146BE2AEF6BFC4C96169BEEA3132C66C160D9C6583B3E2E79609CAC4F2956
842EEDBBA19755C85371FCB7BD6F9B49AA2027A6494046321DC0192CF136CE5A
E9DB5CE173CDADA102698A0D4138D409CEB4657C1BF027033583C20B0382B5A3
EA5231FC9E4787713A2D70759EC05FD9870C55B799710662B4FE3DB74E12B859
237D7F5218A3AE67A8BDEDDBF2F325F764F6D42DD7316BAA58EA64499CEC98B4
259A02B03655E8DC46FAA3044A609AF4A56005E35D2F6C40467E3E766EA0EA6D
803B5FF69233DC41378E58419D52AB4C35429E8BDD8F47E68EF65C6DF75D6BD9
4649A66AEC96D5F68DDAC0C19A6E1EC4D432C913EBB98488767F42131319C2B0
8BEB451836FFA20A22DCA80E8C84D36B6D329ABCADAF9CEB29E09A792E33194C
402BEE9985A94EA970D57AEE7F99B2A930890EE2689F2402689C4BE23EE4244A
76684DE444A8B5E1B437D934C001F1F7C8CE3CBB1DE5A1A15C14A676EF40F0B1
FD936FBFCEDA947260922F22D2F2351D1147C61EBBCD7164DD8E48F62F3D55A9
D81FBF62CCC99525D028DCF0F80190AE28296940CAE8F8712E1BEC7272951D9C
C4ECBF2DC923DFB16554CAF3D09AB4E6C38D8FDB121C7C72D0E46EFD02988E97
27FE6F8AEF5969EFF87EA400501A3B3236EDA0E498258156FB30BA45C49782D9
B2884339D885C3E5883DA64A01E613315C7BABA40D366572F5DCE57511D347EA
0F954AD7D03474A6A82DAF5E1ABDF8CE3C6529D66657A103842D2F74816030BB
C50B3E19BD4FDC27615F19DB41DE3A050C1CE35780908C48F67F60861B596DEE
0E165D118AC07F01C564B7A09A426D2202895E453152E3158D61B3C4F03884D5
2884186CF3D8BEA662E8F935DAC853019B9E138AB7134119A14545C555B80126
84A361109CBB43C62259B7D5FD4A2A17EB842905723FED3F9ECADC92E8C21C1E
6F27E2A025A5B4C20D441996D671C582A6F5E57840EBD7706AA393439450F121
F0DEC0F06B38C966A0AB56FB40FD39C55DBA8EDF09B8B1BB2CBC48AC2F425E81
50E0A2C2107A732170C511EE704B4308A3727F64393E392FB6E0343A473615DD
A5F458D34D1C7FD302D31F1862C85C6ECDBD3121EC4AFD240A5272641789FC6D
C01B8E51BAF4715102F5F13ADFC062478FAF07A39D229B42AD9197397CE93C91
936241605E65D826D0748FD49BFB1B1FB81A8A756D9FEAB2BE6324E5BECB7546
B03B3876478BB3682F214B4CD39727CE28B6FC638E55474C5354392CC0182361
A86C0A5F0AF4DF9A88C88D0D78143951DD77E6B768F35E7566E858B2CC4E9DD3
BFC7614956C91B48CA8686071FF45FF489BCA0F4BAA4D5D9655669546332C9FF
D6B1B81B9E553B4A7E3C50F98DFC652FA9847E4B336C400DCE97D3384AFA5C0B
CEF133DD294C2DC89146C49074A51C312F0F091823E5BE042533CD81A43FA7B3
262724F59B94B56DE90283762771725A7E2D8C722C5F97C1A80E20385D4B8314
5AF95FEBC160B0436E9142040E889BBCE899347659CDD152A758D6237E52C3F4
24EE0524DC5A11D6953BF80EE02E645EBB50EF5B8D4C65D05121AF6C3FF776ED
7996C5EBA0C337251B70D87219BA9543F0A89C4DF01C43A24BFE5463C9619F0C
EA88273E41A35AA2409548C3FA69EC701071D1D9629AB15DFBF59ABC3B9045F5
A9167DFBE34F02E94C86284C9E4CF9A879B420BB9E031AC71BA3954BFDD5EE6D
EFE6056EA4A0E39A39B7FC1A6DA0604CB9AFC2B36119FBFBA42B3D2BA631082B
177CCE6F7C4F57323C21D8208CF7F2854D681BBF176A08D3C975EDC4F3F1397E
B5BB488D476D4E7CF40F9BC85B6AED675C88AC187E78FC37793E289C5B7376D9
9A638AC0DC101B99097ABCD781F10873619010B4C21F46955BCD54FA276145ED
0223734E5A7F68B96A1184091D122ABB1E38913EF74660F955C6F90995E1895A
56ACA672B233D05F41B5BD78F911AD7311DE1E29EE4C7B9F4F01D64EB629A048
E0C0C52E4C859121606C72C3B9DFF296390DF428396ABEEEC954725A92AEB557
B69360B19CB5D3F27D47E84233AB5D7E0B35306BD2180CD198138A8A4A8327DE
29FF19D4F4EF77F2783FBEE4A0333AD0D3897B1A83AE9D8AB4639D45D5A0ABBF
1FA44FA6A5D7779A5031AB41EDA73082F2F6B0E45E4BE3E27CECE324917C5A99
F4A323E340110E737D475BCDCCA0003FF558FB0F071597ED303A770871EB13E1
269E6E9AC2504745F1A193C6E5216DA62848C20F8F1937214062CDB5F5D36768
699442FA8DA47A845D4664D911B0E64203574E588A6F1143DAF25991283805F0
93A069196BAE8DB7E6581F81C57C6E5CC9DA1DEEBF0BF3BAC3B44161787AAF07
6F1F53CE09288702FF2203B2803D2029D2403889525888EA18CE93A4621489E4
6C7D2801778F393B238365CE834EEA5CEB962DCC214A3D8238E53D9342C068BB
A8A26697C5929DFA267E7002FA394244CDD63239F480705C1D172991FC1DA7B7
76DF448467B6252BA3AEEEC60550844F5300D7FAB630C1F9979D1EAD71790CBF
B48E5B3564091976723390F1702445F618CFECDC45A8D96D7B83073CE78791C7
0D597DA47285A073A8183732577DE94ADB70CEB5E67578C998CBCF84E39CE3B1
41286A5994C60855979B402D649F59D4BBF338EFAC34668DCDFD42ADE014DD11
3624729585C33EE973E7CBECACEF5E50D132AAF7E7C32A9122BF5E377D4DB747
34FAD150363C9DFF5C37A1339AAB92EAF48029DB6BACF364CFE0BA0B773753BB
577FEC7987F434845C6313BB0B4C5EC4889FC8C0F634CABABB7D21C8D9B0860E
6FC31462CE7D19968ED81AA3D7E7FF52F27C6151E921E77221D1A184A69A1BAB
C6FB13A61F215FD1F549B35B619754547362FEF57A6FB752A972337861253F09
AB7709626F52CC421949017016918F0AB2D87A8730A3A930E83872D8BFAC1B09
9162FCFC58DEC160DB1B302610AD7CE0DC20FF7AD70ECFB5C62C42B8B0B6EC5C
522DE65BA324640B70E9B902E9FB32F894C4CF46C6FB09E25F64B6827E9F8867
A18F92F1928B97F03B969454F2638CD9FF5592D53F8DE3D429F5D06F3DD650A8
62AC4B2BB7F38FA45B8809B42D17EE04102304F2F59CCF482F899FBE7654F08D
93E029994A566CDDC866CD6CF5C651E1B64DF5D843B0514647A70CB32D9A9EA2
79657EDA895A34B9E6434393BA92AEEF4724C34EBD9DFDC648AF2607DAE2B6EC
8603B6D89B8AFF8A4EAD2E627D4D88E8043B7BC1D982E7CAA79328DE04F0F7A3
3D4CD50F1DD068C50DF812D8CF9F07F4648192A7EF6EFE726C56A613F50FC33E
39354BABBC660642D72DD739877D3089D30A2906DBB6DEEA15F56A392631E915
E1793A11FBF522B35E9BEE7AD5DD407E9C257D69C1A70FEF47DE1D954392B61E
683BB1437FDCD534585DD5AD5AA0468323052D1205BBE6E794D7FC7861CE2080
E5F991DD3782849CD9E6D50ECC4420AD219033ADFE93862641C8ED8ADC2A7166
E893618F4E1CE1CEF3D4C49FCA0E17EC9B53EE00E596D563AD00C3A093168971
B923D21A2C55D7B6A3523D21EFC5AD8E1B3DDE7D3A3E79C8C420B24FF1AF1BCB
4107958F7BA5DF0E28C3DC3AE8E15D6548E39FA117B079C8302B574F7897D9F0
7AC32D3985534DC1B358CE61FA4B9A8A2DC1BBD437830EF3C746089C0A6E1E7B
4D9287CE71718F81073EBCBB4380144618ADC55BDA19064432BAFC15371BFA8C
1A43E6382B3C42628DF4378C539BAE628054B5C31D23B50C2B35707F1803732D
18A9B4687989E55BAAA158678817EEA1B31796196C978D942161A04F980337A2
95BDC869ACED55FC8C8D76A53677E7150CB9A33D3DFF3946558639A02BE4B0EC
68A78F6911E36E12E02ECF7E9DDCC72C99BE8B3C2A58DF176667500E58782156
ED7737345966991713F3D899B4D1C345C18970019E0686B41219E201FDFF6F4D
8274594181BB8AD7FDB6C541B3D526D321A3B254CF1D04E79B685971E34DBC2C
FF4FE924AC9063FF903278F3091F25A923EA9D4730372E32CA0817B42639F597
89BA6B48ACA8967586FC51358F47B56661DF84FCD8A8EEBBF25CD74F91C9239C
F4C16C523352299DA2A220991E3A816FEB195E5FB218CCB914449B44FB92C6E6
3D18E54B5F25D896AC099E3A80CF0CDB10896E3EF92C743726B0B6320CB7B552
FFB89F11EA22D02AE6333848C96328026E6DA17D2763E1E130164942DA5F704D
E35D9839C55FA4ECBD78008B0695E30D3477255EF61C590A8274260E3D59FA79
58AC9BB93E2BE97037023BD77C5AC2AB336E9731FF601DB345CBB8B54F583D73
29CB086189B6069161ECA0BE81C9C8D7B6938CAD55A5115A0DBDF308B98F0463
541489F56666025C854B28533F3D64DEFAD316C55A5D96C622B04FCDDB40B675
F081053377364DEA4C41FEA68FC835EA29E0AAB6D51F94887BCDB2EB6E4D6B55
0015F73BEE98F4148B65F45E6ED5AA51365A495BFD1F4FD2033D79EE3A931CE1
A4A0072B4D0398AAFD267FC4B53A951070EEA43D61A73E72A9B12E19EB6F94A5
0C01C37390C2A51AB4EAC6FB4A789EB88F31D5F2337EAB4F70211D321A6A774F
36277267A2D8C37934DCAB3006734A256116099B6FA5B8477E9788C5245492BA
F032951F69E713FAC394A07EE8CC94D559627274D5026EA0DFDE5F67A912A91B
A88B6EC44292E10449051823F23F527DA1D5811EE6CAAB6E2ACEEDF17D2D7FE4
232862C16D1DED415BD6B8353E1616504A3C04DDF1C9D862B2BE73235E47D61D
AC748EB7607B9877A4729FC7697EEFE344F7665D5A2ED27EB716ECD75C6A6CAF
0F0FB5F6A73A47FFFB9D618E59A1E996936EC7D0A2324269307CAEBDE021B4AC
228F67B5BC95B2E4A03E43E92D7E2F27A7115928226600A6BA95EA5B7AD60F1A
5739952A1400A64CA8F39636ACA0C19C38F2C2F487CA8BC0696574F4D97784BC
D075E49A795EA2F5E4BC9CAA44ECE8FD86CA6D47F28C20CEB5FA9CF25E5BA83C
69FFE8C0BEE3B551BBE0072CCCFF20FD23FD61F346CAD55B0BEF461C749ACD6B
2E995F9302560B0EE9D06FFC2BAEC08237395F6037F0180333B6DC8505120B7A
4B06B2827C245506B5F7A1BC7B407DA454A5904ED7EE18DD6BE4EA182028710F
113F70A98FAF12BB674163C2AC415BCB83023D233714C8195F99F5CC3C02EF78
061FDBB4C35720C8103B2C77E0C9C48FC5403B4A85254985C61D94A34DE3CE77
631DD3B380F4D1773E3E383B40238E69EE9BCEFC8182D5BD8BC68D51BD2D7A9C
F16F7CFD366BF9B140E1940E13D7443EFCEED61613A11F983BAD18079A8C1C34
FCFA63CE7142DD70875A549DD4390E6ACE54B7E7A9CF3D32E278603FDD8C754C
624AA83DEBED0BAB636582D103823BEAC6FE0A2813A357B099361E0A472AC0DF
4A9352B21D423E5EF9C3ED5779CAFDDE787EF2B604061C0118BEA317D3620FD9
DDBF7AEF9959D4BBF338EFAC34668DCDFD42ADE014DD1136247A23ACBEAC04ED
AE551CBE68E84519D138C233FED4D516E5963D48210461A17DF138F37E8D2CDE
2E657D6F91BE0CA12DDC7574223D55720747F855BEE46D1A429EFC799DDB5575
F6DEAFA2298620E5154BD437FED1A7D27E2C62066D33C52443EC8D93AEB1B900
28E9EF812171FDCECF75F78482C421E86AAC148ACF6DFF8555BFAB0911139D69
5B80661A59150668C57776692AD29EF735D58B71D8512B493D4CE9712B587DF0
69175D744BEC6DEA8106C06E6E4A5CB4922F139283B7A5C958AD2AC6CA7015D8
FA35FB6BDB37243CEE09613DF78A436477A32F6D5D10F8D44E3F27704C1A8FA7
6270EAA8C608D3CFA18B0194D78181F826E3C46D633443C55DD06FA07EB4EFC5
F469D1889ED429C9A8256EE09F2D995ECFB03C4534B3BA4B8F6B586203CE441E
40ED7FD1FBFF95C9CD39D97DF78A5BF1F7F215EC18B8FF2246F66E2970967269
583C387A5B74F992A787030817C8B7A15209C19EB0AD30AF6B3B765344754C3D
073FFF4BBC2BA85DFFC64BBA1F8A09FBF9F7A05B445926CDA3194073B01861BE
9ED98A053EB983633B9D1051C94D2CF47DA9BAFCCB4FF5AC351CD834F910426D
81EF4ABE9B958CA7AAAD76DB4BFCADC1CDF4692D601ADE5D32B53467F27A15C9
C39C9C7BBB01B2744F151C563C977216B6B784F740B8E0B3A874F67A7F2F8F5A
BBD2683D5A8633C1853AF2B8E0DB9B8F1E4895A2394E6904395296F5DF2695B5
65B1567306483270C0D99A04F1C49D2804054B765DCBF78345A56D1BEFDD62AC
229D26D86DB6769EE74164C61B09643687C691BC51353F8D167E785472F1706F
0BAD1E6B4408AB95CC3340C7BC87C1D6D5A33D654F644793DF4BCE5B2D821CB2
E9BD74CCA2B9BFB1235109652F2BBFC78CA1CB969C5860864301D1AFACE5B8D4
CA17134A3412AD9A381A3F087BA39A395D484AC9EE7AAD9BBDB8311D164F8510
3FC75C136C952FD66E9E8FA3E89678B5BEB67015E794F767289F5FB13EACEB54
AAB842FA5B6BDB40F21A4E64CC93C3FAFE197C321B8245FFA3D49B5AFF6A90BF
4F9BE92C68ECD4E9A8D7DCDC77030E935ED810D7A95A9DE8F67FDC944A71C412
5F3036588E2AFF6E2C207B26CAA72177F5A8D2FD19DC42B013C63FB6B066ED1D
FCBD88292282163F897AD627E2B50550EF3F5B53B2905E337177A05A4B5AA0D0
3A172B29174D9876F45923711157273B8945D6EEDE1D44697305594D7D7E1F12
8091038A12071B3D867C92BCC4041FF9E63BD97C9A6F5A3029F8679090B6C169
21BF65E8EEC1AF29063D5FA270FAC032E5BE6EE895DD6443B7040A0F7046D7EF
260EC465204AE9446B2D516236094D7D9413AA9C243E9A3B4A54F7D27EF0F1CC
DC6B863208D32426A296B20E1957B48BC92289EDAEA13EBFA6B1E949007DCF84
53E70EC1D2F6E73C3F4ECE9248ED4FE1416FF896A3D0FE313BD45B03B68B6BE3
C9A4FA40B9E3E52D099B8237F5A82604923D676693C4AB2290459238BD08801A
01E760FAAEE9019AB8A0B2BECC04559032DC94EDBF29DB2D5CC49FB4C132F560
E902653714B8752E8EB706BC57711DAF192E905C53AB1BF1C58A1CBF88800E25
81D7677F4E5CF6BDD0A16B011BF2F96042A86AD55C4B2204424CE640C0F3C485
5E96425AA5F10C10B4FD99DC103FCE4A3AFAB8E9E17087BBFF7173268E90B3E1
5882282382FB1854E231D186A23CFBEE28515A2D06C76C22258DA5564F4CE6B0
526FB75EC5FD170300A7E8AF3DB7E22D4DE79C5E65501EB88316EEEED02062D5
D8D82DCA5377189A8B9CB9959948F8F0CFC858E647F9C97762A0CA910A39AC56
1D5ED025A28C67FA5912F9709D6EA3CAF07E02D5EF58422940A1FDFBC3C04CE0
AA147C500AF1AFC4094AFD24CBD73CA098B867941CF98E35DC8120E63045002D
B8348EBE16728C13A5733F80E1465786ED83A3A08C1FBC2A8BC5253CBC3523A9
D836C65A5F7EFA2D8E0BF3744776D589ED78BE000BEDC6CAE3F861DF846F9721
9EDDC6F92F9D9C11CC4B07EC94474396F214E36CBA6DACDD7E1FDFE725A0E33B
A36EE0125D43715BCEA53541E5721FC60AD6DD391A34013F54F755AEB87AAE99
2B9B1A633FD5FD0CE315F49927A3FE9B70444A93B01CFEEDCCDF087A3F4161FC
3FD13E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4850EDCB990134F321F1FD6696F64BA101037918C9
F3EB2C616987CEAA46F6C052EB3FF6F2FB9A6F974915B82B6608CD85F75F0664
5644A5E3888713099F73E90FBC9681A6432D6944A68175A656D126AB96DEEC97
7DFB9A5ECCECE68B7C706A15EA93F5FA7800171D760667E1336DDDED349310D0
BB68B865F3E43C4275DFD82036752613F3FC722D561C0B5BA22C873A42C13AFF
73B7A9B8096208922179B7EDF55236F13203049ED2D3A304BEF0120285E9FBC3
921898A37465752B57535DF5054235CB5A713FDF779C161E40A8A8AD8074AABD
6A06EA11E40F1F4F4090C99D86095BE64A36FA8733362A8D4A2273879968020D
41EAA7F6C1A9B682B344B7DC94AAEDADFD1BD39385A57F9383AA235717AF84AF
BF5D808D32071618FA11E2F7907B9626CA16609BFEE67DB56CFE2E2B90BED39B
54D866320877A767FE000D8A3386EB1AEB2D99809C71C946EB77ED556CD01675
A5D45FC8BD04EAF80C756386291444CFC1D7F12BB4B1304696B2080A14F56ED1
959BD60C7F7F5BFAF8497205D4BD589967F17FBA10C2EF19C1679C5AACA4F9EE
B15E13977CA81B5026C7E1EF4FDDFF62E82B16CBE3D401AAFA4D973976EF232F
76C9D0C0793684D68FE95129C326682238CE9807B35B2C2C0C32F4122724C159
AA1C41DD94D0808809572A0A32125FA4D78B525B256291CA389F839797A13591
6197A48D453611484DA293AAA6B62F5ECBC9D32FD482C74A5387629E03895C5B
946117AA34217BC77B1E075A4BB99145EA55CFD1D12CB1D2E72636AE538232C1
3966FC6E07843E4FC7A8FB27BFB4FB04FDC4FE2F15947DE72BDE539DC79E2EDC
7B7FBA63800A37B6EDB5E58E81BCA267212F3D633FBD44F1767D5CE3A205C3F2
98258D4435F7CAD86CDB2D9EF08F2E13FFD0FFA610B1CCA391B8F65032736F4D
D2EB18FCECC20D99411CA0918A4E18AAEF907EC7D6131076BA25EAB5421B2C55
A43C3D7FD8317443078E3A7FDB6B95539CF003A195663FFB3A1235FEC42224E0
8E3030C575B01BA01325A524D676161B14D376DB237618616EC64BDF972895EE
541BD1EC657ED5D3BD43A15CB7EACE2A5AFE749E97308D8A30731A2D16BEF610
3E5CF27493980D042DB9334244F1B53A7CD80D444A93455702169AD375BCEAF3
987102F0C9D83420D26447974D5F4E690980035348B6E613150446293F3A2B35
3C3C9D2AC6CE183F72C2571F46E81CE317A0B867554FC418A96A550D2453ED75
51F09716732B9B7F6CFD3DBEF2854FBB70F3F5EFDA7CA047CE71B49325EFE87D
508AA84519A585B0D50E05208B6D2C68F8CAE9E03728954CAA40EF5C7609B7B8
A5E1768FD239F48D40506776C2E5BCE6D4AF2E318F2058F294D236578CFFBE68
A3A58E1A82794BABD4D8814B53865E03C0C0D6DE7B16FBD58263E48108AE8702
3FA6C06816598772E12C1CCF051938DBCF63442E4E1621C7B4A3EAE77A96BC8D
7EDC0AAC6DA6407D2629816D401982539FBBD85CE5A495B91553790303BC2B34
C61FA82F21D77803AFDAA49FDDDDB86B8F6978F44EAD1E6C3FCCB186BBE6C59B
B74DAFCC33DADDC64D2A8C99DF087027EC2EC8D96AFB0859D8B9DF74AA62D786
288903BA14F2AA4C819D8EB3C82EA74007016658E856FE5EBE3C8099E375D64B
D63E250047E910F5587847B9B4F6BC4383775280C8337FA283BB4340DDEBC4D2
56E13F78F42DD4C3787832DA8FE8848BA6FD3427F6FEADE6308DA8EEAF8ABC55
508E470D0EDDE6465223B3ED9E26A5D9B2A0136C9BC16AA4812839EF1745C0D9
E8A74DB6DAAE6CA7DD212083440C3C61D2BF3B821B982896932E0212DE5D58BA
9334E274E26C9B301BAAEE8A0237BCB5C7A1CFE8F85CCDCD23E9182604CB5D07
52DD37CDAD896C537B440CFA78A1197FCF102CBDC87BBA4333336530C19C1008
E363144F18651E39ECD39E1A3561F99043CD9EF07F9D957AB251D62164BA463D
C0714424BCFE282588EABC04F4E40A42037773349DE530D7055980B63AC736D7
3305BE7C76A6D637A543047CB6FB3907739D7EC6A3BD1B16ED4B0620CD94F6A1
3F12F4C185CD6EDA68951673D6384E6CD12944F86D178C9E4085E7065FB50E28
631D2A286B9862B0C69172A92B2BEAD105A169AC099700E454C9B0FAAF6F2A73
D0F47FA372D5CF659CB8BCC3A264110C2C6A35909BA14CFAEDC2875F4D6B2C1E
A59D629B0FF93EB424BE478116E5FE553BAE20B09A6F8AE40BE8937089322286
8F2CBCC1A37AC300FCBB1C8F38EFE801F71407301D522C2D87ABEF72CEC76681
F8FF7ABBFF2A12FDAEBB2C961DE6141FECE531A950C020BE383482E14BF8D9AE
C453B7C6B245AFE9025E9D4452957B2F2CD39BF76BC7ED9F3887071835353368
D8131F7561EF5A3DE144D44BB63166AA8C7281F619F322A3635893A174A266F1
46FB68007DDC6962717FE0EEFBEE2F317BC45E4B7647B83B7437FB44CE935D6B
4CF9DC620B2E22056DCEDF9A10781829D8E2CC2364301A79073E539D81EFB4F3
0C40106141EEBFA99CDBC561C949F1641B1136F65BFB1E1FD2D6E99E7F67FA7D
E5C2D9FFF367226E73CA986811E416EC00E3C5746415B1AC57AFA1821DAAE142
3DF997A9E43F30BB7DFC8DF26DA8F6427469C4F61076183D794D01AE224451B5
C13C2CEF05FAA1C17D3FDCD5F6FAD9DE513E0D6D14A3980014FA109C9235A7D5
5DCAD16A7AA32EC49EA31641D1739B576500ADBDD6ED553C872502C08791F29A
7831C8FC85F8BDE8FC66C6F24BBED7138A88D7EB58E6AE90DE241983B0DB057B
72FD370FCBF53C18F76B79AB072E704173D21EC1E057FEDAF53561D04A85898C
0BE02B519493C9E5AF7B22B0C55EB698ADDBB0F8ED15C971AEF113C747B2EB98
20A92F8C86B98A36AB956ECE9F5C5620713A5FFA49628CDC2A8FB41FBF08C850
C509FF5EEB4E85CE7327EE8310F8FC87A29AD6D75C4863DCEAD5EA71EBDAD922
BEAE31D1239719766CD650AF2D9B1753BF0783C1C9B860B740F2B4D53A8656B4
EABE3095AF246B004CC2E0A360373E7BCA063423BF653F266B6254E1DEC9A6B3
ED3261CF7652215E55CAD75EB726F416F93B8DF53EE8E41302E597B15C2F640C
A86F29174F5A713364C8B41EA510D612146659C2BF0FB6959685F5E76AD7232F
07F13A18F68E71FA1567B10B0CCD431C8E54EC3176CE6D4FF9E1672415F7B960
61C2E73C5E4F2DE812CF0A27F44E3AA88DE45F8F70D60AEE9B09FCC642AD0C59
D2368A1CC3967DF6EC4140AC4E181FE4C37546805C3CFC1CFC7241A40EB7EEF7
896CBA737A01D3929260ECC8D9181CE590E61BED0C9FD838E51A272517D28E9E
093AE66DE4B01356388F586D7C4B4CB35F0C5F18788E3378756BCE8659ED075E
B49AE754BF7F8203F03BBBFC86D384494517023CE9CEAA785A842E153568D54E
0077F0F14AFE061E31E285B68B1C5D33151654881E1411FD3FA71C28EDFC157F
6E5E2199C53D01CF167B0D7BBBB83C095D156C24D86271C3BDFE2B891C8FBAF1
AB0D4645AE26BCF46C92C6D2AC9F10D14EC183298277594958908F52261CAD65
564EA5B099C094DA672C9D042051FB5E063BE8D4D7C18DD6A189304A5B5BD933
48951B354102F98EDF3AB2F6C54C1ABE7AD98C4BFF998A9E337BD16D6004B0D1
FD73174F07790D00E851167F0440BAD8771642F8EBB4FBA99B7EFE1571BB537F
C01D4EC43AD1B8F73F3A995E4606C9F70AA43390728A701FB14B6B1700AE32B1
51322270C47548CDBF7D3D9E9D6B55DA0351AC49A8E5177E92E69D23E9FD278C
D5F26788A7E5D8476DE8E217C088A770B1FBC97F1F26859BC591AD95A56CAC75
973E8CE872824EA276E2DCC080416E8EAE46BCF6A6475B41925EA9F55636A7FE
7FBAE9F372C3F0FA8F1880345D6B720E2CECC29400A1C49D4728E731942B25D5
FA8C7D62E35BF81C654B754C7937F678F52C826754E19C0943D37A094403AA47
6B2476161F8C5058DA20F5AA71FD8BDB031830C2A5366F8716DC33D8AC9B5BF5
782FF48DFCFFD671EEB94CC075B815C6A45549EC23DB8597249BBCC944634407
025ADD94489BCBE0D1B74F8D5C783656B758A3ED81F506337B1557E44C36771D
1B98B28A2A46AF9525279536814044F4AE7DAABC43A230FDAC3940F078EF61B4
9981EADC4427DF95F15FD7D1720ED87208BCD4064C3A65B38641C2ADE78C30BF
C3C5B14835769DF987D55CC27E5859EA562E211A70BDD212BBF5C833C0957B43
56D3C2DD059D73A1F8086340A0CD4248B159E1AC0CFC749FAB513205F0A8CF8E
4559BEAD533D5C6FA8E5A493F99CE2D3DFF0982549271B429927D4775BE8317F
69195FAEA379B9222DDA32C67BE4C5F9AAA6971F39D82D327932D9B3AF9DFAD4
E9492EEED55C4991067179802205E640375A9CAA5245667D057C95F2CA95993E
762A67A629FB9CE1AAC9DFC79F5129D4E716768A97CB9ED5DD7906CD723C0E8C
4B2AE897B4599F155E2C839E106E1FF4CFD07444051DB0C9C9843DA6DD2486E9
BA7094362DE47E085AAAECF10CD938EFB18263789370EFC9059DB1F04895DF00
0C2F81D492A9799B23B51A242A498B98DC42EB96569E0644A8E59488469DF34A
C9136CA75BFF1DA4A4B30051CC74AC1BB800B2B30D034ED48B87EDF29D576787
EF5896E8747BD177565DB81493BC45D02E83697425E75CD6015C07D1AC0A3728
D93B350DB9F7A124F120A3F47243D6096405C4BF73E493351E521A8E70387B4F
1BA2119F2642791B7EBBF98AC811FE95EDB29E93C684E4623C0C7142132440D2
57110AB63FFE113F356E030FFD1FEAB9890B17F41B505FA0B5F906C537EFCDEE
4C69AFFEF898EF621EE1F45A328D4D4CEA17E02BAE7A41A84350661721F9E73E
8F903571EADA796A0680763B5A9E7224BF37B0F3079664D269C5E32A0F1DE881
41F7916079CB8D48183926680D97565FE4D1E216A9C768A454647DB379C77588
164C19E3380ACC2FE5A47F2B2F394BCF99217F8B08A5D1D928B222871F54B0B7
74CB1F93F83A7F1C70DC0531AB51C16D1E2C79A7488B9C54BECCF570BB1321CF
761388F5199E88AF05E9E6696DE4E39CA05A8F919A4BBA1F79F0180D81459D66
0CAB4AB3879DC6E8517D66FCA5635255B19ECB89B9DA9A93D028D28EFCB73500
DFC7F93C205F302DB580277A6D0CC1ACDE791164E8F856EA0B6C77C5A8E8AE21
C2C10E9B2AC30C0624C769CACCFDA96AB5BD163E58651D2D017D0876F86FEBD2
5557B85835B67C1EB3108C53E594D933EADE2663ECCD818CD77E5B16AE8ABD71
ACBA23B26E3D17D41DEB9F5AD6FFA10DAC2C075ED47DD6FE8909C387D8F02A88
FD24540AD71A0FE17807E04F51013AA2E2215C03ADCA175FED41854D8D49844F
9F61FB670F5521FE1FEFC260F3E926AE8AEBF8E4E09E63591F45AD67FE373F51
F1A20DAD98F7031AAD428A3B101DB2851C25459645A7DE7CB1086F9A244299C7
3D616143FFB85D78805A95B8CB191C775A2DDEB0E28BF4CB885E940AB179C935
5CE53FBE5B478692084796FE26C658B30905B56CCEDE37F37167FBCFA2CC9AF6
2E6EAFAFB39332B22F2C43C3AD99954E96E39B52434B2F6A04D1CE34CCCF4CFC
655DB5818840D39D041B26E1A450B06B4BFC89854C6244F22A33BE2AB996C5E6
00D61BAD972597685BF59ABBF4DD5E3AA444423F9A4FF38D0A08D3367642EEAE
54372558F00F79493DC9242D937972DBEFBDD34A443F263B41A3B2076595CE2A
7DAAA94E8E2347E94188A4298D6A7ECA57A9254FE680E5344B96E08FF7953F41
1544E56FCC098DD1C6BA94A6B454A75019445ABA0EF103567F98FBA5BAB5CCB5
C196731EF7E6C6FF6EECFC2FD37984B6B44AD59BE051C0B91D4BB0CC88FAF0D9
BFE8B01C6B3DBE65473EE16EC1039ED26273E2A8058C20F4C3ECD7CC083D7025
2227836371FF8387DC5101DA4A94F447A97175E18373A7A108C2925DEC62CDD3
64A134CC099A59CC5126F95FA957C3CE225C0FDA7C0BD337AA1E47A08C5A40B1
08AC669CDE8F23699C4028396944EEA7E4F8A562D88900AE157CF0DAEA24C80E
82A0F86CF2FAD39A7166188DDB17F8D8BB6754CE78EC33A4D5CDFE3940C0A3B9
42DE041262F04E6FBFCB61D363E37D3FF125FB925D71F217A74A0BC2CDC17BBF
1B9D0153BF0708D97515CB6CF112C2A89D2D44816E907415D46BB1FCC680BA84
A84C9BC409B4E1701108EC4F34543E470CE0529B1D98C570663AA47E2BDC5A51
A291FA346D760FA116E97797ADCF97E77D74D4D793167A89E192F08B7149CBBA
4E5ECC608E913EE027C4A7E177C396385BFF862ACED0E4E983E1D37D9BD147A2
D7C0D6183278FE8A4C3B7162BAA05DD142F14DC9532DC0FB76931629BC216CBD
42AB7CF07D86EC7B300C76911E7223DEB980B829E667D37C03ED9C35667137A7
6761CBA2FBFFCEAFE3E98D5590D95E30DB8CCAC4361557D938FC4AEAEA9E88AA
0FF61ED4970DE596E8403631869981BFEE1D0526B20FB55FBF14E80E0F725D2C
12B770B6466A74DE9180A36895C301399D10B49BD9220AE366C07D824749D453
FCE317F53A04F6704F21B97E41AEA8DBB99B156D3D5E566E70CEBEBD2E7644C2
11331156DC39DACA22420A2B9ED27C588AC221C8F43BB36F021C5282E0A1CF93
AD9EE5E71EBBD2284F8BAEAA879FF07E6137447A43961425A18051A0C0C2C09E
F61D9AC4250BE085BCB3D665578EDBC1CF0A05348186FE7AFF1961031A81A012
D0104698BA30854D6D093335EBB36CB925822B8D27EBEFDD075CC89C3E209510
5D24F1108823E77478A94D49EFFCA59260473DDF23A859F82A984DA973A1690B
C030E6B9994F0DB9A2BCFB85978BAB7E3E61A7F1029FA5E9FE7BAA6A177DA4CC
2B5D915429F165CD47F5B91A075F5B644B2E10F5CC72D351157180E0D1243B98
0CBE5BE41C16332B2FB45F19733E014D77F75F2E2336B76A6CC2EC2A4A43C9CA
A357419A0DB02BD1CA4DE1301EE49C1C8469F0783D71E6CD05DD883C8F450553
308B687BC5AD40E7FCB5941FC51AEC6B7D46C94F26ED4B89CDA3C719DA2D9A7B
67404B6B8D6B624DF28C2D3457FD0471B18FDB613F07EDE4EA5BEC2AA8AE7F97
07B454499F1A41DA111AE8C8203622C72908FA9F8590F62933B22EC8CD48D81C
C019C9B4E41A80822439C09A62F2A89E84964B2B68602D92E9EFF00404DC5ACF
FD7B4105F597D9EDF534831D51265DD59CF4A57E8D8020C3B24A9AED4951270E
AD8B3FB7FFFAD84AB0CC3C1CB46AC8CCA89FED056BE9B0C4964AE88138CB39E8
D3BE484526D2DBA06CB803B0E54FB18E1D3B530E8F70DBEA48BF2DC46C219E9E
0ACDBAACA1A5B02770BBF217CFCE9F6967E3623006F57A08D8D6D7F4C72073F2
73A4F08EB879E1A1C18C8CF9E95991FD555A215C21DC2E81C95FB5D14B64DE24
4E3A916F3EFAD1B4BF55BEEF99C197A3CB78723FB40B625D7418A892CFEBFF58
AE1CD0F2DA7063D8BBACAE4B22606DF4F87EC63BD74CE950453257B4FF6E9700
0B07382B048A26F9C28D387E31A3179217DBBC2C87AACB2B1E4EF9E1A8E8B0D5
2105FAB1898B67A730D1B50C8AD964B732576A4881AE9CEE27DEB40757B8A626
8AC96F7091245F034BD65542DF47BC7BBAD5BAA99CD3A98800C31CEA9AF8D9EB
450C046F8B4ADCD6594737FEB22AC8BF9126E6179FF4C5DDB32B9B07D502597B
7E6B04B22D908CA2518285D80234B6EECC77D11EA923B6F43DE598BA28FCF75E
4F4D7F4D51F4F5F39840266A3ECAF568E9A16456309D8BFF61DF17BFC0A32042
E6DE5B6B07A32584A1A64BA4AD9E432F761AE694105E1E1A36517CDB9A1FFAB8
16CE911091C1E8512ADFD9571B8070E2FF25C6754963E1DDCD4A445A08ECB175
BB1F3B83BAFEC9A82E30AAA702BE0FBC2D58E357E9AA1C0D8EADB63411F870A4
523AE8E16F422AB07D8800C1DB515DC2606F28C3998D7F565D5F5539EA278477
BC1D0051E5F91F897E4FB07ECE69B6C0B46A6A12FCEC6464AE32FB52464CE791
E9E85821EC88DF2695238E8A7B84D4E372B3B8D4BF023611610DC4E44648D17F
5E21F0BF2755244AE2C644486D7F58BB8160DABC41DA079D587E4F1B4ABB0152
D48E58788CCC4ABE165FF6A76D5C8CE61D98B0DF3833463C225F736D607CA8EB
562EA1BE0605A9E6A42CB71DC07621C0671CA079F1A6AD3FCE5339E170776D77
99A07CBF1BD05B6887F65312C3DDBD2B62750C163DCCCDDCA88F76E9D7CBEDD8
B5CD374441C1F5538A2B26623F668AEA4891E6ADF40B9765295109B1DBC13E8E
669848260DB4E2DF67E783D2C357AEFB4FE0505B23F19C5B1044339C2037CF68
34EB429617C33666A20F9454A3AFADF89E8F9B0B086AF6A25C69013A095E5D06
165282F335FF95CBCFBE6CB3C85D2088E9623DD2E25F1CD9E7A08F7F2648E181
9966BC2476D4AC4E4347E745919EB60877B9E3B6FCB6764227AACBD152146544
22D7C88566B6B0F795CC6D377F09A17FB2C3F45B2E98C37EC1F59B8B801F5FAF
474A0F212719A259549EF7BD5AEFFA09B27890A979C3E5F3CD8A5CEA47862789
0536251C4C151EB77CEF1F940B751C6D635BEE91E6913B5581A0EE578886F7C7
C6CAC5831D08DC20BA9F3DDB936595259DA4A46ABCD0B8E295F3FF96DFF56779
DE49A1157C7D1FE4EC5693C2DAA100BE728339DA46EDA1FEF945E28E9C85C5CF
EB1CFA5C9924056F33ECDE6F29365A5745012C8D056CC2CF29F74199D60E0EDE
C2BF9E3D71D369639D19981B18E47B8432BD1AD7A9CD912F2BFF83A2C4705A22
A53313C77907FC344161A50B22D67F4575D447A18646242997ACABC52E9DB146
BAA3A8A02B7C530BED308ACE20043F70BDAA74BA5E2BAB2689EF5F8234DEB75E
A2076E756B57919256A220DB336BD4F041E9FE46C75BA73D50E1708C48835C5A
785E9623F0548E6EF413D9D427B89F96985EE632B16E3B9EDC6B4652BD2640BF
F7E94C4C273A7DAF0B60B94730BEE4FCEA18980D0D31894C3C4DBEE3E1962121
67ADE22B5728F5F9B1E60889D97FAC2C7269625B91D5043DF8419DCF881E4A57
135CE1EE3D8A68B021AA6231DDD2B6A02530540DBD7FF0FE7EA3CBCCF9237A39
9BEF9EB82E6BD016871B1147B362BF40B39A47B0250D3EAC620D85C2B4C0C637
EE2910757696C3F132059F3130F2B1FA44654CD5B91CF42DA4C695E910BDCDE5
89A1957B94105A98E5ADBF4795A108E6C6E15097A7840E57187ECFC0EDF5C1A8
3578340AE2AC05CDA98534EFA00AD03B93B95EDED4942299DD2D597DA586B08E
A3AFC2D3A270530780EEA08AEC4786551B7514AFDF162C9358FF7A0BB1C59B63
8E677A4FC26F9D9A17F28132BE55B65DBC8C1F90FF30BDC97107DD0F2BE9148F
D403D196D211322DEC39D0DD73AE3F26702733A44EB5B31E93D91067C50DA54B
5B97820B88A18B6F5E9C82246C7F992E99E541E0DB8CFB173D518F9C51019EB4
FED063631BBD0315B8AD23DF0A82CC481EAD70AADE0E2676CAC4679E97E8F6D2
EB9CAEB51D021C4A341B3FDDF6431296AA6D5765127B1CABB84D2439BE88596B
165E5DA6866E093A6E74CA6EC92FA9101102BAEEAE5C1875DBE42C23E626980B
6301B1902F233736792B3CCAE73DEF3F7438EADDE5E974FED756E5E18974AF90
AF0FFE0D3B0B72D0903F33FE245A32566CEECBBE3EDCDC55F868814C04178883
CAF5617EE1C2785DF3D782CC5EA81B998DB26ECEB21A1007D6F0600E6791BA1E
C07C6CD734A6749467D346335287E949B2DAEC5A20B516EA1591912C731F1A77
DBFF8FE900DDCEF2E611B73B0DEE3AC8043C137796083BE4460934B0085573A7
EAD1994EB491128C4E087FE36AA71D4111CBB112E1B0B778DBDA53BEDA233DFB
B11C665C7E12F29EC4BB72AA6990CD556C341C478926673315F3BBC2ECAB70AE
3B625F98F2FF91CEC66A50A9349FB3B1C2A695930A19832ACA58E8A717B266D3
5EEA7CE9A86DF45930BE230E064E096D0E2BC4321030752BF6E2D970D1D6002D
80C54C78CAD49843AD03C9EE5417D11D84047CAAB708081340E121CA32D1E992
C234D05512EFD27C17C6D344B758FF32593A1D956E779A09F2EE7F6664CB40C4
1ACC26690F449620D687E830A0A550CF971D321583B42DE5E0F95ECCCAB845F3
4EC8A7F41FEA71E4E811982E4641FAE24907573C2C7A684F5B33918BCBDC61EB
37DFA15900E1EF6358A8DF8CF7B4AF6BF074A9EF6D192C21ED40E64B4E57F282
A1DE2049B163A4288A69ED6EDE20CFD8DB8453CCFADA24266BE73CA1B36B4B2F
2784D24EDE4F5244806C190439A0CD836E0D7C6DB3C699AD6767BD9015DA3F03
FDCA07EBDA93F911B4E3AB988FFBBA9B97E7310A31D9EC0382968E85C3FE7104
6BF0C3DBAB3B5903F65176285D4E6B602D25520914622B0110CD084BFE13F58D
0A5B2A7C84A0897807AB1C2EF74F589A0FF17722847C88C9C0A2FE4804ED6764
11B1B599BCCC9E77CB6A755035B1B05F1C86833EEC02FC813143C310B139D138
0519B5616B704E2291D1B3819F8EA217D852199D99012E739E57A09B6024E280
930FC9BE78B52E67DEE775B1D22F68706617693ED26521FE539E4BD15FBFD040
817806BAB81FD676826DE6BE1AFC4028F57A2797D92482747C5247FC949EBCF4
9A2635076A749640786354733A9A1DE3328CBCB8FF1DED4C52CF83421209CCCE
AF41206F504F14DD921D63C229C8B7CE8F110BC3E9842CEB52B1DF86A32A0946
A3BD1E8ED4B742EA90504824432A48F3FE434C00771CF4751D8E85BB97A7F155
5A4C0B7F10ED447C42AB16F3DC305839233A6D79FF1C7E1758D9FC840AB53EEB
D3C417E5C5F2E7B2B58E3FB6D06933F0EF84E03C60BE701384D766CA8CACDEFC
AF9BD2F2E2BD69C5BB80849B85FCC583ED6BC743C7AB0E88697B9A7E118BA9C5
900EE7B1E8CE89A55C0BEFB530C07F9617BB643C87DD94CA2BB185BCD37C1281
78A0F798F106E02883BE3D2874FC615317B101D4DD8E99CEB627139B5DA96AEC
AF3A445FA0805AE960D06C87661AE6FC62F5D899B4D1C345C18970019E0686B4
1219E201FDFB13D42D62C959A39542360C638A47B3631DB34AB2DDB61F678CDF
0871FF84F68829BF1E275B8A6C330DF8E47CF06FDE2AB549077A292B73EC6AC2
F77A93BBFB1A82DB693FCF04187CA5BDC8EF1246B62339A063C5D408C5602B43
A99B6DEAA787FA4E224F7FF959945AC0B31D21CBAC218AAE457BE71903E55F76
FA4EC3273507A4528B2009CB8BC8AC81A2FAB38A815B713EA00A29D9EFFE4BF3
D3DCB642914AD1214B8BFB43159501BAEAB263FAF927B808AA3C59061728EFB3
E1317CF247224ECF9FFD37BCC587C16070C4D6DC4777ED7A723EA37BCF5808E5
62AB94AD6B1D157C6B3945F5898AFA302E1AC7E7711B193B799DFEC633F4D753
F6CC0F03177916551AC63C78F507B757D5A0E98313585FF78E1E9626CE353694
8AE25914322338B435327779649370B565AF4AF38BEE8E5AA5EBB46BFB0F2F00
56228FE28DB2DF160599E3A94522133F62AECD059B0D0BA52EA550DD2D0DBFBA
64279BC875BDD216A9A2A09C7581D00AE9851B126B7BDB0BB158619C7BAFE0D8
558D54219531226ED1669D0FFECB6894E20DD959E83098F89FF38B30D840A907
9480F30EB64479F2660D1A27E724B353170D46D4B234CA5AF1422EF54B217A96
95DCEFDB354F6605B75BDCBBF35A0CD2A66E9B6103901F83FE1FA0A1A4419AB5
92E0C0708320E8D6C7D9F5C87D24E2CDE66BC6BA989EBB3EC8E44363ED00547C
98E77D3FF125FB925D71F217A74A0BC2CDC17BBF1B9FE3E6D2F039D4F536CABF
A083BA6C80DFC355A362A6D8283702DEF40DE082B544B4AF7127EA6D5B8FF5A0
735308452E938C018477D107652BD59E002C56B3DD423BEB848A24246EA73EF0
3626CC1C0ADEB130863434670C73D654FAF8A7B846D5D7690108E2BDDBB7A29E
0E16FBABE3488BE62E4A4C69618FE8EE03001B4A00839DB5076676AE8DF11100
3E63EA4E8D843817DAFD6E9D833942F07F6668FEB1C8FE95E164997DE425D07B
F654BF51B48102C57981412461A5CB5799C8151E4BA86E75B44ABB25F8A2EDBA
D394C7A7C155763D1C8BEBB691166245A8E40969CBBAD8CFF61BB6F90617233E
FBCECF61496F87949F5DEC8A2A03707848E83FD4D72FE9017FBACA70F739449E
42D636B8C192807D64F545448A59934D385554B0DE3BCB438AEF68DB0DF2F2FF
138364824C7D41C3B93A0E8F32F9E827505B27AD12B9AA2BD0774AB3D74F9B3B
17BD82A85B58BA201F11BE07DA0E6C440D1AD07D3EF6675BA576D8D4BFDD5354
72E055CF8DFD7C560CD0AED62739FF017993FCC20F752A75DBC5C1F18BBC9FD0
2B86DBBBD23573EDF7798A4397FC6B28F7DFB72F5895A6B90C1A77A50542DEBF
E49BE6CC438036AED93D9AFE101BE86BDFDE4C1F23B16A9440AD00F6BA5601CE
B6D079BC230B677F15B1A4491290BFA0567F93A5550CD9DE28422505AA6ED3EA
2BA9EE7756AA03B0DC87E4A39927BFE47FE43CB1FCEA21FB89065ED98CEEBC0A
2B16D5EBC946FE3FBE9189E6DE0BEC9F0D07A47A715C1C33C5C56664734CC3F8
14CC14ED33F79B2FA72AAF170F20B33BA720B27CA5BB7A02A4163FF3616E6E57
1DC3871F3BD4C83526A4549AE133CD7BACAF9F7ECD175ED7000248B0E79CE100
8D94A992EAE056707765AEFFB6AB533A5CD92C4D4CB49CB9C38B939602D8F7A3
F70B39F1723B8E668826C261777739FC42EE3624CA9754C4B6A8B33BC05A3C75
793C0FD3F19057BCDC87EDF81DBBD12746885EC0B9380EE2E0987446F1B42166
292D0CFAB1AAE6541A3DB6A442ACA2313DAE81643E32E096D75A6DAAAAA6CA37
3D543A44939599F77990E19358425614D41218CD20852B1E5E178E34950BA290
6B425FE484270855BC7372D1C0A2E2B3E0A3E10B009E48968EC723C6DECDFDE7
6C4A7E74139238514538F9F0536817398DC030E0275051E800D5FC22C27547BF
62ECB5E25A0AE928DA1E4073F2400FA85C85B3FD79F75ED2208F2E90FC60916C
AF61A15C789927FA88C8AF7468EB28FD5E0CBDF9E23D1FF320EBF1997096CDEB
9BC58E4FFBF283C861567836356CBDF518C088CC7C67CA2A599F1F4BA039BBB2
6179F2A72599892E49405B6F39E58816C7A84839C069CFBB069C10AF00332EFF
9405DC64895AA38BBD388EC4A40439CBAD948581A8677E64C338DCAE28398846
CB3752FA92F87103C2301C2F6C59CBBA937F516A1B75327AF1B9480289790697
3E0E01D5876BA691F65E7315F87A826B3A258926C04AE12A7D4F770A1E34F0B0
D3E761E0A154DDA036BA52BF365D77CFA52B22A941B3A6E2A2FC1BFF764DE004
5F229AB02E67F46388416F4E74B4C94398140C11B0D3D8C2262251BEA644871B
11BE44463195D56642A713F9F3E006AEA40CB4E9209DE21B799AEE655E61E18C
B57B816F288007CE85E9483ED66E5BB41ABF15D7DFF9AEFEF7B906B7F23EEA35
7806A3D0D706338688908A43EEAC6048A408F294CE1BC740EC90A0764E9027D6
1CE5938B1219201D40BD085085D8BEBAC637D3C1CEAF96B4581E1C92C0AE91FA
7CA6FFB24BD76E7DFA3CDAF65FA01E47A501B07F528149BCFD7E7E0A23C75927
B4FAE9E687F69752C891C83CBDDB25A0D1A489EB0BB10369D89E5E7CF8E58830
FA9FEB325D9B4567CE2EFECCADDC8A013BEBF58722B6CABD8DE5F42B0018F834
D058A09E910DF1314D19FCB446D9F0F1C33C7A6363FA6FE55B3E0B88151D1047
283EC694674855FA15F3DF491937181FF24CD77631FC83D77FD873378141C0D5
E654274F0A884B4E81A586461BD3A6E2D0DFA7642329EF41F770351FA1556A83
E6964BB1BA245E8BF37CFB4BED1C16575BF519FC937533340A304986570B6F13
B70B356BD4A31C85F7B17599C120A5055F624689BD1D5647A80038419AABAC1F
233E8A6D73741FA3BCF65F7C1BDAFF8F1CB40CDD078B2B3129F4E9B9389BF0BA
95B2A29E90BB4820B6AEF318B1F51BA7C2E85E2CD0FE1C8162B1A98B9069DD88
03284E859623E08ABD417C9C3A47B945865D42CA061ACE401105AAFC18091697
E7A5AB01D4273EFFA969966A789FA2F37D70390A1666241125457C9223404D30
D6C17BEB76A166245E0132C0C6C59A860FB262168EBB9F88CE3EDA258CBF2331
1B59B12516816675EF303FE4F01F1F84DE922D6C74174642805F7AC940DF416E
626B66428A89D6B7629CA59A8293FEF7E667094888C4727B20698DA61FCA950A
17B0CC3A3A5AD57EAD62A642F7BC52D0064D626BA548CE35146AE55A893A5F9B
7B3709B544C8412F8BF64205B0F9D86F61EDE3925484E3FA45344C7FD3D4D3A6
8B7D2DFF6AFAAB0557EE93F87FC7A5DA5D62B266C68434F566171CB8A8CB6EA4
7F3B1F8BB5B13D7B90A4F95E540447537D0ADCC055264CF38070833FE36F3E9E
75ED639B02198B8BF6D1B7A7404D833570846D0D8F4F0C823FEDAA612474BB91
2A3900BBAA22F86ED74A7ED142E5F947666218A4CDD72A7E46709074225CDA47
DD79881E0A4B199C7A6F436B823B1A2FD914DDADEFB5C5CA3A43E3449F7A6E86
5018CFA9A68FC5D652D383688537E7372AEC1115FB185E8DF96B9FE97EE2B8D3
FEDB5FD98D46CD252782B2C925BA9BF6290324C59F30816B248D320852F0C7E9
6BA0612FF316DB41855733B0CEBAFBF72CBD3CE79CFE47462A68A28CAFC810C1
F1A3A51DAE21CA6F5EB70D8542D76A759A08D6C227C3182E3AD32BB1121234B9
C72C9881F249F56881B0FCA0E538AED8CCB91FB008F59915E7E4B07C12A28AE0
3BE53CEF9894EEBBD3459DA7FCEFF79712C2BF46D44EC8836B6CA9B0B0536FCD
B3E9E1C8C13987F85696AF202D90C1A7BE99A8A506B9DE4D054F3B943A621AB4
A04E5063B29C7E2B9746A6233CA4939C2CF3D6DEA8E2A780F2D968007F7E67C9
0E0CCB2482450357011732325272278752656D163C94B93A4C903A65E8C8A0E1
0F842B11A789F73FC3F51E9E1D3DFC1D7D4C4FAF55E151C39FEF8B47E50E1BD4
8A9CAEE7F9DFF85745A875F3BF3C4B8C0F978C069A751B8E0C9251DD4C68226F
267C021CA4C0E99CA324B696A9284A1DAB3BB85A734B583B3E2E79609CAC4D4B
922E30019D6E645EA2B73CCF0BC0BF2E27A0174B3AC00EE63BC9A08A0BAE8904
A5EBDF9FFBE3A3489261A072A56FD71E0A16BC974D8F0867DD9FAAD38A467B4B
AF4FF4FAD8EA305C71530FD9173A18E079156D95730D37D5E66F956B857291BC
DA9B6705F0B062A78EFC65E27BC33F15122074EEB735CD1C98201F895AB94234
C55AC361F1007D6DCB2A974E04CDD34141696BAE8F8DE7832268E2D3D4331ECE
4C3BEFD80599441F6C28F8FFC6DDEDD26399EF4332B8606F8473AABE20673348
F59F48E71CB9D0A7C73EECCEC90B036F773A35572FE436EFCFCB540DA16FD3A7
F768D29951166E7842CC737495F33CA410753FC2DD448AD00C0CFC079AF2D889
F25658D8691122D7DC8E7180ACDE65F8F45846939F96E456F14CF9522AF3A841
457847C5EC09C01622C089AB3CB216A5C27D6348E3D559C4702A84EA37559682
F3D36E63B5A59261765D77F24A9A77AC66F96DC8546CEC766A72A2973CB93533
85A02AB59FF437BB890350A43A25746CC2A5E8097BBE8C4B4AD2A382A29BEA45
338BC07FEBD84B065ED6E11C80D0B7A4FB56119D1DD49218C92FB82785F718CE
4667E32D8D2AC5AC37284E799AC2D4357912679A8ADD11EE24DF284397F86E2F
D0348CD3DE329D8554A44AE5B960C1A2A83CB540BA20127BC5D4B7706D5C7AD7
265D1A9E44130A2BFB57C40DD4D62460569B3E9E6F95C41DE849E94BBC727B0E
325EB254CF24B7A6A261F97999AC4ED0F9EB23AF2E20702F9888B531CABC31F7
3E1809D295441F4BAAD373EBDE842AB0742ED4070F65BEBD55BE691CC01C1881
425432805A253CFEB23C5EA0CDF05C62FC279897FFB1C9913179AA9EFAF1F18B
A2BDBDB30BCB707711622FCCA2C5462EA92B205DD2FB6D547ED3D5590726C5D3
A6271DD6C27CEA2D32409DF97C2A92B344786C68B79CDE22BF421C982054831B
13C0CCD75CFE65E10713619608CCA03A3BB26BB18234A5285B5517039417CF24
BD6085A045F2328C58DC3A2E27C977395753ED4A2E32BE409B945E92CA0D1C1F
1D533A1B124DB186F7419167695940805D0A969F0029538F7DB9A860518B4393
32D434EADD7DFCF002F56A71C1181FDA325C33EFDEA9C50F940129DC8CDDE38A
F6AAE1B3855B272592C53EE625CCE69D93AFFE08E85A849108DB253C45AC6968
643D16C5D6C07735401580EB51473542EDB8976C7550F77428D37E0C38579DAA
7490C29C53E4B06FF730ED6179CDC8A1656CB201E1DAF113BDD0DAE9B71F672F
7805522B1746B84C8DFBC1C7ECB499BEF3981E4A9BEE1E89DD79F858E41B5DC6
7D92DD3689D834C42AB2CD9BFAA0BE81BA6D28AECEC53D8DE63397AB413926F0
CFF2AAF2DCCF2A052CEA0B1D5554E0BEE5AB2055DA941AD2E95292A65A91FDF6
0EC01AC5B268CD52406E92F5C9D2B321E796FACAAA8AF7C53BEAE57AAC5CF5F0
84C0E7EEE8FB6FF97B872F5DEE60B4E9DF5A11615C3BABE81D2B3D63BE5493DE
648B6B25CD474E6BBDD9ED08228EEF66661F70AAA7A4077728F6AE8A28324F9A
DCC19FA493B5E2465C61C6F28E71277CEC08957D1E08DDA1581F66F41CA0C593
9CBFC982EEAC175C5B8DB24B5A64175B2A75AC33FDD2E9B8B0B859886BD7033A
317BCE39ED005F3DFE201DAD08D60DFECE171BE5228A5B316B561592EFEF6905
54F539242D8B4D908F6E29E51F5EAB9838D0D3429A19157B07FAA2B9EC01C7E0
8BAB51CF904B05D9C095F0F44EE51DCA97E4C1A63D7C8163284852805457ED11
7477796C639E5EC892AB35D62836A59F4ED564022A60F063C78C6270A5DC8091
7F6D4ACA95373D37BA214527DFDBEA9B5CCEA5C89F037354F1F31DC682747267
E0A4E9E633BD1AACE6F06A397B5D75289ED307C730A283159E9327F49FAB4515
DA29F1832CF6EB3597910DE7EF473CB539E588E10DA2FF2258B53245D881714D
6EBB848BABCFC0E6FB20991EE2AF0A19777895E4D682AD895B7D034E8F11F121
3DD41947CEEF84001A41804F173043B2EF829E8695EE0C878CC0BE8D63C0A223
6F0228F2083DFDBF3D427C2F12897384AEE756C7ADD987475EBC164EF2A004FF
B10FFEB04C92757F9578519097D2E55E6C7A52C3C7106FE2658CCCC0E009FF63
F56291162167E3044463FEA836F9BE6691B79CE693E75C00E3730E533349E8F1
489D91F013E82CFB4AAC7660C41B27E608674E546D2074A3AD2FDED543CBEB81
BB97F313BB263E3FB3CF998B84796A5403FED4621B4E96D13C9C9A3BA87F6240
29B214A7BB4FCC95CE7D89E721271DE77D26DAA6B5CD92CAA25C62BFD185016B
99DF97B7450B56ADE102C16DCEFF0BD45BE548C2C9085B57BBCDDA940A8A609F
0BB5C039A0661FAD61E7839B3AB7FA122912D490FC21ADDD5D01D88173EBD6D8
B775AC99B57802653882C33FE51BAE736C2D482E3E8C6B4C82BE077E5A89C278
65C6791D80CAD9E1762B114BB44747C29188C5DE8B71133B0C1FAE500F12ACFB
2547DB4C4243C3FE7F822F9E9B34FCF67D3482E7CF2DB6E47F2FACCE7AD608BE
217004C46046FBAD0DF0C989A124B86FD9DB6A6ADEABDE3726A56F14DACD970D
B7F21250424A4E4CFB6724D956B25964EFFF6ED6BE419574E5B8731C6285137E
FA4721EFFB9CD0E2840C2B574E243B74D791FD8561CAC57CFA3F7DE0ED2F8E03
A7C41A532744451D467B4E14DFCAFB2F47B1EE818B18C980FEA326074E3F02B5
065DDE064D6430BDA191A33FC055566E188B166A7EFBF916C417A4797F11EBD8
386E757DE9CECD0047CFDF7B0C3CB1F3CD0A84FFF61F32E01E95BD2C313B1E0A
D6B9D0D2523FB75DBAA6D856BCA04573662D787758DF2939348430664F69BD5D
DE0BBAF875A35A227C08C6F087B8E151F15C559ECFF306D0BD304CC8A9031756
481D7AF31066A7A52EB184761BE599B45656E0EA348B0D6BF5D5EF773F567CC1
027BA442C95444525EE89C8DCD0D60AF90C8F74E445B985D528E4D43485B8EC3
5181321F9D52C41A2C6AAEC130583900C78B50DFCB8FC6BF917DE8D79C4D03CC
B5E28CA462D0CA5DE29A995C8EACBAB3170832A9673DCF67BE7C14D4453E29F5
C5E6D2179E668000C612FBDE773AFCBD7B721D635DA3368FFF6C5967D92A4330
5D763CB3B5110207B9BDFC0722D3CDB380A36B01C3AFF6CA5ABFF396E76D9D3A
C87FAB14713F2FE5F062D414609685E975670F1206652D924259CE629A4C114C
8032A9F3A9FE3660ACFDEB3E36DFBA5155F6786FFBB998451498F5BBB7400B49
4F32EC7294C2E64F4E2B9BD52E86595B1608A52A642870D9C43A0B58E8011EF6
70B709D1800AEAF26F26D4A75C36DA995421B5C22AE4C9D72DBC6E2E49988F00
598E17347C89E5E2725E651510F64CCCA60536254B8DB87D82D875032B73C5EB
9B156F566225F8B0F1ACF4D4C2814376FBF8F64D0C2A1BECD6F22EAE4F8DFA01
56ED2F7FA8C39E6996FD508AE515E9733EC2650BAEEE64016BE3747FE544D61E
CF651E1F742D8509CD6B2FC97696EA93C0EADB10927C09666718A47C6F1E3B59
A1C05B6089847435133BA08D80C95638BF460901EB9FB699B68EBE5A41177AFE
7594B57A2F2EAF73630066A063242A7BB46ED727C9A0A23E316759AB8F6616B5
4E578593E409025FA6499673DA2CC57017CA921F721A5FCBA3AC1C1F72E86B71
9FFAC0A0A15DCD491B2BA474C68BB2F1F2C15BBD9E54CF76D5EA621F35805BB5
09E84EA63F8253139429D5776992DF49545E3DED151932B8871860A039148255
B5A321FB8861CB2C66FC89B17131B3A54F43EDAE02580582BA75F617D6A5FB83
3CEDCFEFEFA15E94AE794AAB199247B82DCD78BD0F9E890E32540CDF67EFF0D4
DC1C884CAAC54F1F933DE26ECF3621EBA2185D976C33A4C1B9D5B83D1D2F57AA
2865018A3FEB86D6C432362D502E746E7C3D4BFA286C4674BC608663FFB0C3E8
DAAEBECC252A7E7157585ADA28191A99C7FECA3600F75D32CC2054996BEDD7F0
6B65C1639BC560CBD4DBD65F7894FA3E9083C8629B4FB5ADA1350021D1839C38
A9CDFCD90ECDADC9EA8A7917A0F359C4C172951461E884747D6E5D2E1828072C
0C6DFBD2AC4CCF96760637BF1042155BE108A8B88EB7DE66C5F0C41B72060988
FE907F39B32311E098A69A823731632D452BC8A23D1259626E13F6707917ABE9
93B2980D0C2210DF0D0170E265D300C9E299A00A787FDADCE71913B3FED2BB49
5356CFF42BA7CA1EB7941FDF65F8573FDBFA644066DF853B005279B6C301C956
DC39322BDD7E86F03564E477B7BC079395A18BA8E4354CEA10EE045CEF7438FE
09419F56B876CF9A25C0EE314CB8E4EB395856BBD69B7C6B5953B841058296B4
C1BD1FABFD497FB28F3AE398CCFCD3AC94AC5AB9EA4908BB85FA39A3E3B24B1C
55ADAB729552D78F6B2B2E12F45C520599D883C8E9A61A0D26DE608F256353C9
8803CECE21431E9D02FEC953C59525F4D564DA6D97711D2CBC5891060B6A98A2
3F831577055CC257549CCCBC16EAE670CE25E4F12A9C53203B8CF2CDE85D33DA
301B80001FAFB3D56939FA2E412640BF932A20226E582EFF3AD447EACCE0AB01
1371A1F3477648500238C40EDAC04F05A332901F6AADEABF0254FBF5D937B7A1
2030C5F8D82D37BF41B1D0FD5692974246FEE786B987C8C4DB09A17B8116E2F9
91879CCB7565F5E3C29D7EF9C41124CDFFF99743C89FE84AAB667376EEC9EEB5
EFC1383829243E806E4BD44ACA18EDFB5BA23D6370F8371C6F58C568D7EC1CD9
28485F48B309E582798019588C23FAFBCA7AED71F6B5CD27B12AF9C139D64F9F
865D7C3B977284E572B5A254E6908BC900121DD8CA9D298F8491D6A0C25E6B45
149C989719671CB8901618078E07ED211FBF599C0026AC79B829261731884876
AF7A5AFF2A160260EBB024C850269DFBCDDE72752B88D113D0C83DCDAEE8B1F7
37F6984225C973A5AC272A3C2B195D82AB304A52628A6A374E0F03BEEAEEEB03
3229E3E4C7E9C85838ED4CE50B0736FF161548A8A41ACCE3AEAAEC2CDAA19CC2
5726F326EEFA873245E46517C369AF49DF174EE792EF85575D8730D5E6430CCF
C20714811F72A6D080B3E92CF4CDD6FCAD5E2FDF5900E42C17AE3B02957622B5
200E0B992D3ACE64FEE17CC0D860351A0C14EBF60C8EEAC6143C6DB49EE101C6
52BA0B525303D46796248D3443DF34B01695D2A12BAF043F22C8566DC51D9951
6B2F8353F69FFFB5D736F85D789C0DCEB7DA244CF11071451A49EFD1BD345D01
56A30F84065E2F0DBD5448900DC9EF5DFEE08F3E1EB5C426B266D62B91F6C0AB
A1FC5DE3FAFDC7AB2028213DC4B62A34DF355B09DCE6CBE003BCF6CA3CA5D379
EA083089EBC2FB5E4CBF8FDAFCF704335B04DB846DD055AF51E072546B9D4949
0F84F7BC577F1363169B598956909CDBCF83F98182202084FF32D04CAA5080C5
0DEC1301CDE738049E937A6D8DC3F96748BE6C3623DB511ABA768DFAF0DE080C
13D7A11D6423D46A8F645C51EBF08700ACAAAC5D593339113FD54267556110C6
25E30518017745D2C9E1764E789861DFE1683E2CBBFE389E8AFE456986F268AD
BEE64EC4EA851AF4CB1A21CC39094942FFC2920853346594F0D382C322586C7E
43E1F4FDBFC71B4D198EEC868FA1A1716A6AACA86082E5BF27AD63B66BBF2F3A
A18B63330B9803EE4FBB57DB3629D40C01CC73FA6D99F53C87CFD3FCF38C2A99
94C3098D805C9F4AFD67A6F11DBEC6C020AF34564D39A73FF684764BB96A8DB6
BB326D4053C7F08AEDE6750DF30C7FF2B337B412B29BE4437B2044CE4C67C3E2
7889DA6ECAC17D390BF4B161FA18B831C31783CC281F5B77EE4601E2275F615D
C25FB0E222B3BD979F21976FCA34C68AA31AFA5D18CC549D08E368D1BB454A7A
229DAC0939F2D93347128CACBF5E2B298144A1CA17626C8BE34DEF93F42EB055
4BE826A2F95A98682645E53BC96D108520D9CE9193DA216221F842FD0F387CBE
2602E25624AE69AEF32464B022ACFB89554439674D1BAFB22E52F8C57F195F6E
652413F527B2581AA05B001471DC02769AA8A21F616EC20CECA31A2671D27AFF
879596AD40EEAFF2F930BED6CDC50A5880F12369340F0BF47C7F15D7E7D88ECE
B1A14F5B6835646D0C62F29C4C7B759F0DD48BF4F763AFF5F729C7362BD9C483
A9CF578886BD3EA9E7396DF23C81D7705BF1790B03DCAEF22F974C9177058CB6
8AB41FCF607D4EA1B026ED53AFEE8E9CDEA0C1748B38CD7508D0EAD76F7506E2
E1FC171337AC5E8807FDC9766DC49DB36DF165EACFC6EA6B562AAAFE1CE74489
C9049F0F4999FC5108D1AC5BC957AF14C2AECE5819AB516CEE0E1C7AF3DD198A
17C4B2236C01B7018BD702271D6EA08EB1FD092326823AEA3ACCB4C26C0BDEEB
3DB6987E14E12CE6CD2418DF8700907DACED6884C69D6136E647F488E964FD3C
18FF34E7F5CA7B97C2240863A039DD1222F5ACDF20CDABCC45E4214AA9C461B7
7DE9A2AE35B51769E247EAE71C6EAC82D9A687B83809EED34039982ED5E56649
49215B7B7C699903F93EF490E1530644E4601D291DA077BE63D94C9BCB476ADE
B798319D7561B43F3859F3821264DA5AA9E03C2096BE92078905E2635BCDC33E
FFFD3929AEF4390F2098EEA47D554A87C0446C41A2F42934B6191B82E5816284
1F5CC6C85E410F0D4EC063D2137E00FAFEA353A510822E7B06900E0E21BCB8A9
0E43819A4B4EEDCEA3A66A376FB5A02CFE0769002893EE087E003BAD4EE78D86
A6BD4C8419F443BDF33C20BA2D1D94B53399FCDB0AE953D993744BC84E03D6F2
E5A5B2796AE96053CE2787B97DF326C7E62E44D31A948E810BE76BBFE338D4B0
E5988A1D37D8CA55701844659EE0124BAD430639324932032FD18F6361965B8B
6CF487CC3371BEAB1B2A629491BE943396D3014628B31CB7D8476C4C361CB69C
C4BBFD032B33E7A047790E1F303CC73D5BB746AECFD4E654E7623C4208063AE4
4D62152AD5A78622568E2FC967762EF0D1C3A8C76F4F6F7298116E7FF68A8348
389D30523072C9AB8FC32E4C859121606C7243FA34348710C506636670BDB278
E50FE4E3F03508FBC2C8263A22AA2A4F2C6C1B13EE89AD39020EB2F47983D1D1
BC4F0E3D9F747E37C3EFFD1897D859753BC2A415EDA90B22C2FDF57B4CBDC084
12B872311C783A8F2BEC410430F4F6665982C069EFEE0EEA415AC49C82B8F6D7
20CFA0C5CCDFA25165223FB04C30D61441B0D8380C64132A43F359E5E1B9022D
2E470005B23EB8E7BD4F4CA78F68185AF1876FB74E5F5DA444FF630D58328B00
099B0FD219B2B9004E82A0515B7901B283BA6CA098406C898648197223EC5822
6D96DD4CC9361926A1164F9D1F528032977D0841C446E0B8F2BECEC0A34476A7
F6A67087C57B5519A98804735147BE66CDFF22298AC94B032DBA0F9B5D7C90EE
C6B06D7DB4B3BE25BD81F0FB6CA2CA571ABECE0563ED84E6348ED97C548156C0
515DBE21CFB33D7C6D034EB8A350261DD4B8F9E498E20DC196FAB7F1529E2E7F
D2F66239BD3F4344BBEEC32D3E874AEF390A9E7FC0D7901FF6E97AD210D13DBC
E43957BB6736941EC26F83F1E9EC9B8B373497044E3372515BDCADBA0CEB7273
697AE8307A0F03AD709A2E36051D710DAFB9333E14C331C974219793DC152652
2F347A7E54C91D69A00CE5CF3F5C7528E7A45BED41E99201F87E0F4C5C5F2087
70EA65282F1BDCC62CE5F908FB979C7A5CA5D52FA134E745FBDCCF979A58F278
700DC1EC3460278D88DCE5788AC2790D410C362670F84DE7DF999096D80DFA32
426D00978C78F90F9D7E7F56667E473F965DABFCDC3909C2B08F99F7B20AA25A
9B628839446D9A10322BABD3BACC7972EB4A2E6044F41E0A37951CF078F09A96
16E5E09932EB15BCF4DA73458BDA9F31F188D5BDBEAF62F00E36C577A8865218
8E0DB5CA45552F8867037B2180897707BFB89DF29932C19E128DB67D6F73FE59
1BDF942BCABB9681E68B720CF1DB67EDD3D6CDFE2221396F2D15F5D60F20CDA4
94453D99349FC4F65130127A3BE6784780833673C39F2762CD95B4BE8C224310
14B54551378F52F29CBB2F30C48BC892599EFAE822D4A192F2A8D5CB125CABD7
1DCDF8E41B3DD3B137C62B35C12F73DE3811ECBC4E1AC6FB2889C5B2632B1BDD
76468D9144DFF266A06FE144AB59C011FD66F3802088026607E24F9FB615DD19
5F15D80EA1534071AAE50D5ACDCB2163996299FA25E75395AAA11AAECEAF2310
0219B1CF3A1F09D967E429545A65BB9A10C4B222B6125267D929CE8BE7443C46
360291593326030999F277A3CCFB54DC112A76770D65A4D098638BA7C14B155B
86626A2D61087478CC491C215925B878116B9426FAA424A816273CADDA8A0161
BD0F10A2ED681869E3FA468DE4F01F1F84DE922D6D203943176BAFB7DF0A1571
51F7625E63296E325E2C329244588C770517916D0CF980216B5726C947293424
7FEA6A47E0D73AEC7A13943749397A7E8BEF6E387565CDE9032F95CF1FBD9774
E6F3DF77AA31EA6B721C478D0DE92BB8936E254310E037642FFB90F3D1153CF5
4D516F85CA974BD5B1A8816E541F239C586318E0C38215CE324E3FEF89F1A1AF
4513558F46BC41E42F1E3120A19768AA097C98F0633FFB5C4B56B45C48ECE457
F4793EFE7AE3D2D384410CDAACBC34A209DFFFD95F7BD75EB9180D0EE7625261
0C301CCB9DD8C2571D20A10763955E3F08C327505BA7A94F44330D45A16CBBFF
AADEEC1277F9FBFCBF4B160F12C32FAE78D4D35E023C7CE0560525A8DA4CCCEA
32F995DB32130C3EBBA6F0EAA156E3EF0EEA375E66905D49892B70588D731016
2E1B66D135E09A46B054E37922BFB709F40562D7D716D1F43EFFC35BA38B0EF5
4AEE2E8E33ACE1F665E9CFF6EE3FBB56EA0B1727F613AB4DC69658C53EFDA879
539CA0ECCDCD40CE7AC49715D8BD0A6803D8B14E755117C5BC40FC0F4228F77F
FCCA2F2F7CAFD93CA182B25D8877501F4D84943CC2883C98DA8B112A75AB907C
4F9665586ACD15F259B8E28B279CF25C705D5087EC1BAF19D53C16C2768087F6
2F0245E47FD21A384A32D13AB5C7C1467959547F548B87A6ABC41EAFB0337313
A0E3D9E8D148B47940FF349532D6EB14BD9207663BA9090C6F9DE3BD3E4D99DC
6458A245EAC7DF0F554F8F86718A96585CB5B060D30F5151D5EBB6B84F3EBD8A
376C27000C17941474D1D90B1B2F2A74D00F0E54CD8F399BCCBF37D44713F3C1
D3A2C9472B2EA38F173D28220856F0D06661ECB6C626F298AD41CCBC9D7F3B1F
A4AC47C7EFE3A8D63D2276C4236933CA08C51C6CFF8FA96D04271BB84AC9AAC0
72FF6D5AFDC5A833E61CE4EDB88B01FA5EFCE34DB39D8690F60922A5775D8CFB
67D6DB0BFE6C603FA96532FA00F88FCC7A95AB5E44EB877C6DEA56BB113B7C6C
1047358896DFCA5854311C92BDBF36A642171CA85C29401B7EBDF030C53F30F7
DBE2FE53A14D106243B1994DFCA051C38A69FA068EC46B16943D3B13EED5BDF8
92B8D2E045E7D139789FDB922523D1A6DF7FCD8415D07AEC5AA2078D907C15E3
328C492013169CA234149ECD5BB2834C8233FFB740A8C0D10C0B97B50303A481
3EA4DF785AB9E531B676AD8BD8C7F047C93B96141801C84073759EFBE4D5A0AB
E27E7CA41A87A4B7B7167DF47801D9737117F90D9835FBDAAF72E8D383C05035
C04EF64E9E0DB55DD4D849774B9DD8940FBDCBC62BA0AA2611E9FBD89792F3EB
2E4F8DE19A1943AE14D5BDF254B2E0383E5C12A5FFE962B4C6295071630687B6
6E33DEA61B0D034BE1DD1E52CFB3E70E40CF3DB144C449209F99D738C2B23894
B6B7765205D82B56FBE9A61ED5799165E2C781E6D9C2BE397CAD1E44C4F80CED
53CA25CB103919C95EFB4E1951963FF98ABC1F5F46C04716E7827932B3FD0F12
48C3C3F534C3CA302F34E0FEE5E007E243BC3270D1D797D8A63194586DD11A05
EAE787A68A3975893E1B15A65370D1BE367AE45F1ABCE6EEF8C30513F23D33C3
396585AC772E0BB0028E42D044582EF9BAF4FD313B01B2A69F02D6AA4E9CB7C6
4D806469605F624E146098A7CC2A669A0F96B470CE752F2D3CF766AF0F89CE19
6A88675FFE82E905D7038C8D74806A9195A4D33C09C008C801DB6C9C09758E6F
FE36081D03CEA7FC64A781473F99475DB1E462582FE22BB8ECA12177C068C712
1F924F2877EBD9C05944518B80A83A36DBB87538EFDCF7155D293660ED7E9186
7553D12CA559E3D623CBBD57C6625B1AB3426B888F236D57DB2F5A50B37FDC32
4543749F272CA43BE6C9B5CD3E674BCF858A46BB2D1077CEE36203B758F1F30B
2302A7B09C784A38A53B53A3E3330AA5193B3E6C9DA1434847EA623CC5EC32C0
5EE272018959F63D9CAB84E0A1FD4F8F08986F1FE7AC39B5AC5EF5D8615D2038
7B1BBA14490D5734D3DC44E7CA8CDEFF0EC51C3827FD0132D5F48E5D967396C9
2CC5641A02B181770BC503CED5991EAFF6938C0E68D4AFBFE14B9497864A0ED1
0E51674689BD1D5647A800818FCB8B41D952C4968903E02C82BC1F338969852D
8CBB5D5671853B2AE06D3BAFFC6376767E66D0F100932F9C200783CA5513357B
9AF84184ADFA53EC6502E6216A71519EA6CAEF429F2C65B63C893DC7E5A3DDF3
1F4B7D850CCBA04985FBAFC32D227D404E0A2787011D33F94B6D26195584679D
D7939BF53094682ECCDA4AA2CF829B47DBAB71108EA591015CC2FADBA1D74D1D
585B3410341740A43DC4C1BCB6C2BE73960AB16231DDA41CA65D050CB6463DC5
887EED8FAA3B94D43153160D21813F1B3849E1959EBF034CD9229C35435A1868
4EA6F40DA3C1AC746A23640AF1DA00AAA5C38EBBEC67724FBC7386A0A15A002D
A6E75ED6C0608CBE0B5C050CE354E59FDBC24C569213D02631D96C56BD897242
77D9F456B7D375D287A6E4B5ACFD71B15DD33ADAB7BA01932612BE59E8C4EA4B
47A39D9D73EA96FEF283F31DEBDFFF78EBD97F40F1B3C7C78221B0081DCEE062
AD596D798871D0640D0ACC03CD2BD48F18EC823A5D4ADC70FAF336B7DE1C1668
5B03F824324A65D98AF27858526B2B7ED8669633E05B89ABD3332811E39DB955
6E7BEF52E251CEDFA01A8BDE36275E76D3407C62A81FAFC701F457542D61CC0D
C9510C95183E2D5DEF0634548E84997DBE21D8264E60CC2552CF26EE8C8BB1C0
E16F3CACC9010C7DD73514E1E186F08F7ECBEF07B3B447F7AD42E1239D19C356
0A545A7BA4701A8A1AFA8DC38771EC28A86A4FE4240CFCCEEDA2FDCA2103FF99
B6C9AEE9C57B299CE9E9203F88C649FE8BA4197C7AEBA8BF85906AEFF1C52B45
7E60950E1CEE70136B3D411630A27D7680B335819744CAC5F1C047BDAAFF3F16
72C5B926DD8420D84FF40E32CFBCB558FB23D5A2E37494828CFA5266BE41B2E5
D828CD046D62D567699D8653BB88A484C5553810EA88E57653126991B0486372
8DA212946821E7A2F40B50A4BC244C3CA2B649DD1D242FAFB7D2DB31CE40B747
7B87FAC8DA069F2E9FF4A1D52625DF58316215F784C6A79F674B6BC4ECD56F02
1198D37F0CE279D793EADA65F2A8F4031008167A978BE24E6C05EDFFDF8F905C
39669C38CC44E736CA166C928D3A6D876536B55707F246C8EBEDA67F83FA8F13
22A68097441DA3511D8FE637EDFEFB8CC7A4CFE322EBEEE15E3395B062B933EB
55FDE7F067F9F68D7637DF0982785DABB8684A5525C6D2397981A9FF115235BB
3354BCDEFD91004F3E926B742368F81AACD1C198024006E44661288F72CE256E
759968C1953D695A2FE02E4BAC5837628BA91DFB138BC2C645DD0C9BE61C4799
5B7362ECE8C07432B234B20BE516CDFEB99EC7D6B2DCCEE85F7A35F82467E8DF
9C6E69CD4B29E20116F74F64A5B0226A4A3E68BF1FF19B17B932D6DF962541ED
2B9489A1BE3F5B0DEB9E2B133E8461511CBEA1BFC0C745089D88E7DEF2985978
EE457278E243314F53B6031B1B5ED77167F4136DE68EB8EEAF35EC68871606D4
EC8799AF986358B661FF1620D17527EF0EC2614EFC31795CDB22DE3DA6095E85
675A81A0E8B75D1C32E17928D081A2C3B07F532F8C1112CF4A84266FEE311107
930B562CD598A16B64E4ADB3EE41DBB265F53084BDD09C42EBC0642F0BDDD739
4147B47C3D0F65033BC0C3405741CAD569BBEEC9041CB8AE33E9C8D193CEF94F
C02C79B3E9EAAB7914044111D831971C4BA33E9FD206A7B97E69443C93899B04
7831B16841B250CD148557D72DD7E683BF122F711BEE1993C1A80E20385D4B83
E81EC47F525934C58FB2AEEB7A5348C0533A9C8F9484ECDB66B1D97296487504
5FE335FBE60504F7C08429A0FF4D2C812DC7AE3950B73A966A19D39D700E23CD
325C78530B4647F4462F88BEE48E1E918A2AF0E1ED9254513D2002A9CCD73361
CC952A8056AB8960B17260850FB1E3077451FD4A24570EA793440B2D52659DCB
7D2970392C6F0911FDFD11B254DA5A7AE4E4BEAC16954E2670695108D4D6B920
B84E040C63CFEC0179F76B67ADCABD02AD41267D7ADCD6E6ED050F0C10241D35
2C1834356FF992BB670E51FA4D45E1948026B00CD579C201E51FBB8A58CB7D96
249339644C22347574466A2C0C207725C84E675EBE9DDDA9124EB30857EC5CD2
FB4E872F94714CFAF3CA04970BB0102BD401E733E317C00CA15B8184553F2C40
D8E7032010AC0F34ECD3195227CE25D05C352B75212CDAA39DD3DA126E4EDD88
04F3A6B8B72BD872061B3852B74B006793BC90615DC552B6EBE9D223D4E55C35
805B79260E90985DA5E5B2F43DE33B114B94E0846FA9259C25AAF3ABED4C17DD
B515D3176F71E3F000258D2FCB243860E7AB59B3C585DB63A60E902239994668
678B73571FFD43128B967BF3983FCE91203C75288DDE862922A8F80A0DD8B366
75E83371DDD08046D58DC6ED1F473C705AB25634F19770334684CD70084D72C8
18589C5A187369C0ACE19FB49931C862BEF41EB5561FEE4414B90EED32855019
1278438BC0F470F03EF75A7E5B7038C03575094F7CF5919156512060E8EDA4E1
AF8177582831736A70CC3AC20585F1CBC23268A567C4A1BCCD8EBAEE1298BB27
2C855662AFD343FD4D4AD2ACDA8AA508AB0CDD558643CA3837102B92ADE2BB38
950881562C628DD2D6AA4093D16B2125A1577850F47256C62236FF9E4827B97B
32E0781FC15DD3C3D5F4C1D5A456BC52928987EB0BBAF4DC821DE215A0C6F2C3
939E76C5C0A891AB4533B977D9F9A551D15857927937C01853DEF6521A049C11
BCB7A16C178CC109302B0425976C12C80E4D9A88629DE47E52E36694837B4190
99F0279F6755E232669B65A7A46A6161F9AABF50C262A6078F4DA335EFA4CA54
911BC802A06B3A53AFF3FD087089E5CCD4368BEF556A281D166D457F08E1848F
797088751474B22D25F771643C1617A0D951FCA14DBE96CD166809206D8FC9AE
A88B0F0623F2191311AE960BDAAB317EAB10FD21EE490D38A19ED0EDE485502F
1A878EE7F770DA1DAF1C0E41278203DA77F32034CD2106773B406588E21CD7D2
20D9CD208CD8CD6D4EA0C294A329289677F31E2FC6B16B832C5979616AF3C6DC
B0CAE6743BACD56DBE9C9C5EAB717451DDF9DB5A309DAC737C05B060BC454AEB
AD5381A933E9E2EC6A78543582AED8FADEB1F9B2815C54CF9F5595B56A90C8B6
9FEE87CF06A30F8A7CF103597CB47279B6D29620A31F345120BDC3996736B25F
BC6C259F42153A89FBB6EE8FC04476BAE7CC71F8F7DE2ED394AFBF5B3B2EAEB8
3C12F7D193F9C0B5E92735B8A7D7C3D9F18545F395D1138826BDC8407658B859
85EFD4A656DB5F88D85F4C6DCF71740058407650FCD485BD56300DA794ED51C1
36C3CA5680F622117252D1D72A6D9D057A413F716666D5D8A453410CF798C740
02F2CACD933EEF1CF2826E6FC0F3E4585CAE02092F991F62E3F6573133B8CC1F
CA87DAB2B92AA0C064D2781D902BA95DBF05EAF03194515DB7AF940EA5ECF9F9
130ADB850B098BF11A91EE84BC79204CA97B91940E7ED617F3BA55D92248B512
DB7EE23922F1A25B3421F4AB7F9881955BDB0AD3FDEE57A8FB923B5497EF22BF
3645D4AAE35E132D1CA61DA76395445853D02D69F06FC20D7DE3791B8FB54AB6
996E28E77A58E7BBC90A2690ADCA3C15438CE5BB275660A378E979CB5E9F15DB
C0F5D3771EE6B6A3E8E5FFC09D8AFEBC31AB20CD19886D6B2B421F7C057DB10F
0445DCD34554D714E42CF90800DF87BD77BFD898EF9C75EDB10CBAB4E9110E87
700E6D1522A71B0D0018368E79712A59839B083C78A44D8F044FC9D819B684FC
5C31ED493C946202287CE32B65CD176281C69B74B2EEB53E75B02B5A79764DE9
7DEBE396116230FE735694C8333BFBE1B3222C89F0A7F4CFBA1357D8E49F885C
8A0FEF4C3CADC2E4D345B978ACC96226775B037B920804532521E7EDE46CF0E6
5A84325D312E8E0B4078AC0480CC1C5D58CBA2B63893887368446781D83DD351
78468E3E0F33906408BB0E8162E959F58CB38142005DCFDC0DBB7C06C3500325
C2BFF8B479CAB483B3A034DB50996703558B509C64277A9AFD2339BDAC1F7357
8793DBC56745B259648DA50996583B43EBE59F7AA29B4339C799EA8498AAAAB5
337B999E290BB4078ED610795231E3FE9BE6022009AAA8F44A6BB4A34F1C3511
4EBAC0B0F263ACE8D89700754650C09E8E89E7C834BB944A456E1A83C5C85C56
883E8E8033BED0816E7CC590056B3BD76F63ED2A2D1BB0055B3C9AD537AC21EB
2A78E15F4FBEA19F325C19331CDA93CF358AB9FC23F12BA3BAD27A85825A46C0
ED86CB8684059A8E6552085C76C98A91BC3818FB497F95518833A1989751A62A
D5C3C3C65F659ACC06CAC02EED96F06F6E4B8A14100BFBAC0086F09BCE54EBCE
E728711255AD5797D4267092C026DC41AFE6EFF5EA374F9C65C30DE793F4A68E
F039BE787A32CE4179F560B5230FE1B4402942F0B098675BF3042A3E56C8439C
0C41547E4CFFFEB953A66691946D34B616FB05977524A4ED62A3897EED8475FB
96DDE81710980FE2C82136C749996E43E72D6A867A1C695136CF2C1DDEB46F70
70B42E37ECC13ADF5D5249AC0B8B379470AEAF6AD990B988A1021C4F00BD13B6
00D687D1978F7CC990BFE76366626FC5BF65B21E2500B4E4476AE7277B4FFEF4
99C10BBFBDCF134E1D1EB8B314610183673443F8DBD5F6735067D8C0F31C456B
B35D31B98E4DA0CCE1CD94F887F724929CAAF970105733D5D007A4498F4F266E
5E7901548B96D51124D9AFB68AF840548DD872EE4C05E791FAC196360FFE6088
E34D60E7880D89AAFABFE59FF48965E7EFE8D15DA0A5FE4321A45C536CCF5268
0DDC72D576BDC1D9B190038388C5354D82C7A44C9E3DD86716D18D1DE59DC8A2
2B88C6FDB50164F07B9C73FA6D00E31F2D60ADE6A55284AD768EFE00B8AABBB6
1E2A82EE737C3E00CD8D788746FA45C5CDB5DF08A0713E7937FB67AE852D7572
74AAA30B1535E3FF98484821CA583928714F3FA3D08D08C1A696775658C710A7
B7FB0314FDF45F05106CB4E5E03072C214A0BC5712A0F862FA731D18CF33BBF6
1F01565E3C825B0D614281DC3A61B0572821BBE055765DAB0DAC8449427E9AED
2A6C0A13F56BB1A0E289C7A999A4330CD4CA8DAA5B4FF8D88221CE5CC98FA817
B5B18F9AA93A4859B29A5992C363F5B57009F9B224366DECAD4E57CC4F917DDA
E0CB7915DF9AB4D56ECDC9A34E8D21C0262C6E8C4C3F2D105D856AF2CFF1391D
72DB08B0C97BCCBF0B43D7A8F74360BF4082BD2B20D8AE8B261D4ED712764125
D9FA9FE2A1BC264177BEB36A2E98DD78E7D23F56853E002ABC509706C00E045D
C552B2E5EA058B57CF35BCAE8EF5FA845DCBA084E4EA827ABB5E76B8835B3E67
DC709556101053958976A09D4D8F15D1416F234F3F4E0EE1B4402942F0B09867
5BF3042A3E56C8439D33B098E35E401701EEF17EAC1CFA7EF940ABC13648A4AD
0437CA5DEE195981962985D4F6B2446E877BCE976680A9A9FE2BFF7603BA3CF4
C6B4C95926DF2099D19B4429541800AD9BDD2B9ACFC3FF359CC8667D7887C9BD
B503D037CBF0CA1A6DB089943F99EE417263F3E4062BFB634AB574425979F6FD
6E014FE78BA477DB54E347F33FD3795AE38B21F702AC54836DFB68ED5DFBBCCF
89B9D968A3362AD6A16743BFA5239A8637B2FD4D5C340FA9754D04BE163B9E96
4F6762BDF2BD0ACE10B99E1A538FB1DB8593EEFA925E555E7771B3E62B97A2B3
E494C0384EBE10242627B08D4345DE43D2DAD18A6E3E95E3A319A2C5448CF5D1
67573E5F212D912797A653A2099524F362A188688DEF40BB855F6102028F5F18
E93686D71738FE955FD7C67F11323E059BCD0C484110BE6AB43F1810091ED573
24213886C65D3ECCA28FA1391FE32A08C9D55C6FF05F67C37D56CFB134D0A285
52211BFC42B80B297A3DB0DA138A7622A931DA293B0A98CDDB395340BFA11A10
6FDACF6EE6F0644D4CCB2DC4E71BBF40FA8A4A7B8320210619F4FA4CB8003758
487A29E1D169327788700BCD143346E0CB67E92FCE10CCA5FBEEB33194AC95FE
8E79771A2835AA3CD1CD593D63DEF774109BD7BBF7DF9FEDB9745D3C854E48BB
E8B79D1D9768CD55C3F75A0616CCEC0DFAA907B96CC50B34C83623FD3E5B144B
1BB709F58D7A4AC90DEE83D511164B53B4874129E1D1D1A29D088F6F06857B49
BD41E2480A3180D880D736D2727D03376AECA4FCED19A3EEA782EF94A905DF50
CFB858513602932F71A5D46639668C6CD6A238DC736A95C247199D4BD414BCBB
19653B9CE7A86A6666E25BAB5DB46CD7200BA1C67360ADB2A13755A5048E47B0
3087A55E15E6BB75DF4F26E8D427F49087E3B4F7B2018F4BA41C1D1CE9CC953E
AFC205D20C02D2BEF3EFC3A71941B55ECC0B3F5DFD44576988215D79ED72125D
6388D0741BB27484AAAD9FBEDC388D8DDE89967203712EA8923582B23DBE4893
7D51F3978221EBBC27424F8ED57699F21754442A8D22242C6813C8DA871C3DCB
5A5073C3B6353A0004D94E1EB83F6FC35164F4F481DA37346301B66E6F09E890
FAAE9F9FC1FAA7801ACFADDB9978F569C95E4F2F7370A766909F562BD4C26A22
7D3BA9A515AC5D6B5F8B5A1402C2C4DC011B043066EBA6A9F0EB95F77B140C4E
1569529D433336951DE4EE9E36EAAC13E8FDCAC2756E95C19ED1D9B125F849A0
8D2318498593F3CB277928A57D8F380FF797E3E6C15A1989BFB7A119CF913952
CFCDC2DE5A13ED881088B6B60682F4DD99DD79DC77D1D13541D8B59BF7447DA9
41A047ABB1B21E08AD0822D11792BEFA9051A8A264103A20E5CCB1086E96B941
76576F807CBF092A4FB0EA09E150319A8AA055E3E63BB78B7DC14C3C0C93D479
FFD5CAF4D703926F1BA042CBA121403FA2FAB1903E361DAA5BC1326E0488726E
2D6F672352A158204542E1AF3972BCABAB06157D58B4C448C0B7464139C35A55
AADCB5EAF43175139DC5933FC0AD0CB64264C3A44FEED2768CA2889BB0DE1E2E
0D0646A3CB0E5628BF6C8D599EBA0F35C0C57C5EE617C78A61EE89335F2E9ED0
4606337C49AE0031885DB8D0B72A02E7FD4C3EFF42D9E05C4C09CC67B8C7C680
77AEF5B99469678E59961827750F0E8E70C3F5D62536119B5F7E15A4207DEF90
96D27D3D6B617CACDED0CBBF76726AA2B9E780D6954E154DD58C64D531617CA1
86D413D7FBDE7A1DE16C177B128893D0DB913BC6955BE9ED8D0F033FB488ECF0
ADD93E7E4BF05B6B656B3B9FE10A0E27F605C0005570FA47070FC79D80DC0BE9
85B6EA0D59D1D2749D40D952A27047D6A5FE33D4EA76CBA0CDC05E45D59FF354
E4F8EF78E7E551F5BE8B11BB383C12155843895629B71900A3ACA96791E39E6F
1D338714CA0EFE6FA7E1EE63D218B92FD4C8C69FC7C305F1E229A2C3C5BE46D6
B96F1339522DD24979B3BAAE6CA0F72CD410E0959D3CADDF1CC54C45BA2FEE00
D577AA6354DE2C383BB4B4EFDC6DD658FEAFE642F6F31342DDB569C347165E82
87E05176C4BD9E405AFFE33AA6E7BE5308D2DAC57265D7219157F9674681840A
CD6DB00356EB6BC79C61F1CF9F55929073FFFF7D9B8C3B2F9549EC313FAE1D5F
0AF3719DDF8688A69754ACA70F3D7C5D777D6B1B4021598B1E3B3DC829F1D03D
211175AB982226616B19C51800E2DFB223D34FA3304DE0E78D628646C32C1D95
C0DAD9F7ABAED0B7498F2C74BB9A0ACB478A992AF2EE011844C83A0E029AA23A
8DD94D43340B7EB2C42175D331BBFB2F33D2D5760CD0BC3F0E1064CB997E1869
BE9917C10E24B9304C248E71DFD0B2BFB84FA980E06FE476D8BEE5443069BBEB
0AFC6CD81BC34260D578EBE223452A5A4F920C9415F394EC9E052B7079D25627
DCD5E4331BFE08AE07500D76B3550286677A1F60A35C064E12A5E4BAEAF54EEF
0B685A1A3365116E7F2E0E2576D9850BC6F0286D6CA8E13BB80609FF15AF3AE7
6B142B224859346B22CD9EC73E29A912F246734A08F51077748D1F0A951BF74B
76495AA9C0A31E6B7B1BB269CA11164E29C2B057181802C0C0857483068B688E
5A302ECFB9B5F1F972F16BE95E6133522021C59A8C25FB825A5CFD16D9AC883C
D07A159ECC675E6A09B141F4D6B25E3C834F74628B06ED1299497DF6964575EE
FED941B58475E4BA09D03745826922477B4ADDBDE879FE9076A77944BF9AC0D2
0B72E6BA974C6CA677643FB82A1E8828BB42507B524B622F10AC8781B19CE8AA
275D156E9D71DC13F231A3A822D4D2F206113B3C307DDB517093218F726809BA
1644C7BFCB667D8A6123F3B3A1C972E5A64AA094FE3697A275D68B3A674D4340
4E33F99B4DFABC5758FF0C9116BB0D00B6E24214CDEBB2918B905A4D42E11A12
4CDA5D574307928A5F3DEDB431CA708178E89F66AA416492AE025B1C8AFC1072
F7FB0206DFC59A399ED965A99750A337D1FCB6E77FE5E754546F80AF65302D8F
D7D36FF2413788B5BFA7E90ED9E04C50C8DDB73D887836C2FFAEAF335F6DDBAD
AA9B42A89148C1A2D5AAE1CCD2BBE06270B5A50A2C749EAF88621697BCCC33C3
00F527446B86B8EEE58C91C5E8503016F80CCDDF747545081D6CA0EC448C83D8
24819CE7515DE4C95D753D423669D55C5695604BE3F210F167C493C15200B64C
5669762E1919F888656315B78EE140C490D6FF29B4EAAF2825D0D565FA516563
118A600F83AF3F999F27704A23B357534885203483712368C4C2C7CBC3838125
77D224E95065C383F70419017840B7956956787431C5515FB64A5915548BD924
2E4986D5A1B764126ACC54854724E740943A2841310C6E52AC1E874C8AA1D68C
97231C63D91450E7B5F4E6486D35B75C478D8D7669FAA04B286DFBF2129C3134
77150DA63EE3247B077892652D04D839811E4BFC64CCD59A630940F8FC1B7919
CDEAACB498D952EF73BCB21DEB74671CAA7D2E71ABD9B651C4AD1C43161E84AC
919FA36F2BBEC5061C2A2D47F1C1154498E07B4F01E4BA1ECCC7353CE064859E
1BADA81D5ED68198021B827328B0F314A8158702B3E070D395A20D09E85FE184
DAD7B349BDBDD4C228D3BEE1F4AA00C639F758606E5E751C2E47ABBA1A1FB037
4DF51D9F900693E19A2E2187FCEF43F14753253C0E4C81D9D739DF882FC0D1C0
05B7F3E34397084FEAACE48BF0C69C95B0A30E6E95E12ACBC4D99CA2BC2BDFA8
290B84531D5B7072A7E3B530036225A578BCD3E9C6A0D4E41104072EB2ECAFA3
6741EA03A58BD77D0CE799FE2BBA11B78B996D665D5C219C4DAB6246D5421A66
7307258A99B990A669B501DB678D3BE54C81D4B0F01940D9CAD7BEE7B61FC8DC
585385DEC0F3EC7AA8FBCCCCE5F59BAC74908B37DEA1CC431A2E0FD72EEF9856
7225A16C4CD76EB0204F1B9F2A5711C2C374F5D5FC4FBE04F010C161E2706120
209608E8884EB517DDE61A98976D37D0BFFC1E0882A5AF26C154D95101E6E438
7788700BCD143346AA8958285C3CC234633F94CBC42557B91915C9ECED807E1A
24762171D30A92EA6E4A4122D0CC2011DDE30F202DFF7BEF6C059D92DE21E326
3B3F193D5D9370D5FAE75FD479CD2B0F2CB5D87DD8488E6F6FE3B3925E2C6FED
BF4C1C4A9B87B339D0FAF97CB6CDAAEC5411126927EE8C0B1CF2948ADB8ABE04
8E7C5ADBB166D892AF1B426CD2DE588E61E56E5ED1DEDCC23AA13274AB67B2F7
8ED16099178A98E7A9103E36D0AFDC3E7141BAB753AFF62D98CF1B64EB15D626
1C61EE491F6274F09AC3DC769814DBDDF4FD939A0C882ED483592193B62C7098
51EF7CD6D65F838AB4F2258A67B5097FA04ACC9A36902DA2E2F4661BCF3AA80E
0D52460C934660D69AD2303842C303C71212BE9FD07FB0EB461ABB77C8F15D7E
4FC83E134F3BADDBA8624BDC9D3F223934973B050CCEC5C81D687BF9CB2FD11A
E12853F880EFE842C39831C3966B1D9608A0E2E6662849EE51647A97F4CB7AF7
B2C9BBCBF198EC9C64B9683B30529DD1D463F7EAD883F76BC42F8AD605C563E4
806A5BB05E670CFCE11E6829DC1C4331B0A7F00FE5DA9627198D702B51A73664
657E7971306C36EF723C299F7532AB274A7E3F7726CB372E58A5F27EB39D55C9
99EA4ADD59145B9CD749E4DF119CABBAC4120050CDD56FD06BFBE13273E4C2B0
F9E20CFA3EEDB73500B7AB987420E8734BAD9A2E59897B40B6AD9986BB21805A
3B8CE6B5584FA1EE0C76A7DD7080CD74B4B49F32086DDD44CB8F11E6AD58C752
52E1F8132EE16CE7F3A7538D1DEBDA9AFFDE9489F1CC4B6F6B55ED1D99ECF476
D2FF14C61E54520C9D74F869A8F9F887D03CEF1C4312CF2BF6C1C35891D77752
1EF1BE2DC7842CC7846E7D3DEC45D837953030688B21DA28065552A46DABB6E8
F75E3EFEC05A12F543E3E1DCA380489CC18DA17C61DA6E68369324BA3889831B
871F1244128DD91FC491E76ED596BF83B96BCE7DA625F13D9C50F3D7A33A472C
0F81361B2A478899C2E6A6CC46D24DB46E339882831427CF2BBD69F960F0EFFC
28F42A92156CA5C88B29822602693C071225775C5B0CC7A13E706A11E66CC5AF
9E67D8427362754ED163F1C2F5E26BE8448924255127B2EA51095667E65DC915
B59106717124FDF7D589E27C87DD3C828F9154465D3C50C24922FF656F29EAC5
275EC13567DC7548F6820972C97FCA4F21E9D45A500A11241F2D47B02EC7F915
D1DFCD41C476CC895DC3953C33D5AF077BC895D59F4F3D99BA5E645949706C49
6AA53185B6B57B34FACED1EA51683EBD2B709F0F5ABF97075FBCC0AAB8BBFE5C
88540E0E2F87F25897605F2DB92C81B258CAADE6AF5CEB83ADD19E2523966991
844FCA56DFD385F0FD6AFF01708EF830467FE78BD53C38ACDAE0558C96A7E0F3
1AA5CE1C8589C0BC547A1BE89782DCF7399866B36F2691D49C1D3FD7A457299E
D4818CDCB80FD9B553A5206E7C5F8FDA892F591DBA276FBDE03985D8F400BFB1
0EFF1542E0F495F767B6C4DC19755A1F281E9B56AA5808CF36BF58E40C35F316
2649D6CF8B768B3EBDFE06F36970702023D095FF3AF90E77655C9ACB73795B8D
103D394C9701A2E003A56D99EBD08AA50000790191750784267C835D898D815B
6DE746192A983F94024B37CB947F3A0E218A85307F93C8E734475DD6B32B7891
0C8B1A7642110FC02B86CC10C6E9A9DE8FE70D02BFC50CD21979C66ADCE9D649
7C7405487919B3BEA659E11C994A58D60E628F2A9FDF2FD166CB1A4C9731698D
06D64A4B6D6E303CD9127CFE0EEF2E5821056A2BB6D94140BB23109C8B1B43B2
820AC044BAB9E7EE8D34A37B50B776B605112F647D61D91219C131EEB376436F
EF7E2C2948A21AC8AE3C1F7F0DE0C9EC011E9415CE83DEA1EA14FCD7F183DD39
A72810104687F8E996089BA46DEA97C8BE18761A173EE18C6DD89878F12BE8C5
9FE23AB655757308EF47BCAD3D345FB39F0EF059F5A9CBC90F916CBDDBC52789
9E6673EDC23B1DC0B76DEDB316833DBF9D48D509688C64D3312AFB918985EF5C
6E60B148A2452A12327E5494D6487CA925DFF15BFF8E4EBF5FA4D8E8EC834971
5F5D3DEA16C3AA1D328E573BE8CE4DC921C6485AEB508D71531506E93686A4FE
C15355C075B6154E20E729A018DCC7341DE6ABE31767E20F3DE53BA04BBAE754
70CCF7CAED960AB7F17BEEF95E3E06DE6EF7560E4C6A7C2AA3A3F99E9E98A10E
C4785156D82BDF8B09AAF60C03EB2F8024497E24C144289CA6A942FE0F7E1CC2
6D55E419467787C6AB50BE958977ADEE662E4397369534D93F247D20CEEBC1F1
CA5000C8C241286FA5C889AB8A67C3BE4CF7F8E52D222CBCE5B8EC2100419F5F
8F163ADB466DBCEA8B0CD202EA6395BED825C42A39F8C7549CDA3F36889D626B
8BD46D59FF26A7A1A4F040BA8DB811457084ED4A63339FCE690CF816A620C2CB
367D80F6ECD1BD73A557B203A8E18DD06347F5129C459F19EC028D7819861BAB
E4250B06F34DFEDBD0FB48685BF2743EC19BF2C5D0A0310A9E3E937E23B150CC
50E81CAF236D9C176EF5A8A85F9EF6C96CAD75997D5067FEA644C66F4D07BF6F
714CFA96A25565C4F4B9D881E41705662C62857FD9EC6ED776C6ECCEE89F911B
363C1EEE071641F9F1AD5BDB32771DE1C3B2965B9663FC87A104ED49BF480302
C505202A18CAB129CCAE660E9A7CA1083A721741B6AF48AAE86AF266DA12E4F2
D17C3341CA6B54601699CDCB16130AB7531988FDC5A1F558F176FB9C2653E906
72CFAF01C75CBF6EDD0E2B37D197849844EA2953483993169243AC59E817D966
B3D1C29461B421969E10CD943F180816333D455181DAB2E1FED53C4205EE2405
9AAD767FE3DDADCC6CF22C833B5D0125E1E93D6814264899723A02F2BEA74283
834DB128DD41D4444D026D87D034E19BFACE3729E20B6B00AB8DD90C22776F38
20F86F4F0C167E553B3BC3F5CEDA6789CC905F7ADAE8237E4A34D9C4AC870874
DD2808EA318C96E5C826DEE9857D42E067D7A883340F53B65E9BE8823FEE975D
1A50F6F1698BAE3C9E94A5B17AEC41026B6BFEE5A4252A603B3E95EB85CF27DA
3326061FC7A2391FA9134A20918B3061A81C466B5F0960352C75105A84306317
F5FDEE21B3D9139FBC1CB0DABEA30ADCAC24BE8531A2C929B8801DE2F425384A
2CB2E0C40925CD33A583A2F91A2BBE0E8478945588FC65179CB1908526540C5B
B7B80DF7E0408C03EBBFDD7E8AC758E5D3DE7D9E4F3DD8BF57A0F91FBFF4E9D6
175A03E7F1F1958D6EBB0C32D1A686322FA5B61B396B78FA1A47A0913A87A731
AD8902DBBB306A89B60E01C8D8AA9C533490490FD6202210CF7DBC2A2ECBCBD6
5C2245B1C5A5059D17033E534DB1A80833D0831DB0E4B3D2A945F72C410248AA
32C5D865F50B5D4A4856E5013E1D5B73975D99083E11990BF72FADC189EEF8BE
BB6D10180E9B5FFAC58EE613895260789DE383E8B0F95FA76C9799BB53EC6FFF
94AEFDDD2FE015784C9957F015D604C9FDE13A2228F669B6045ACE7D9A42446C
6246665081EFFFA4D757D6265D3AC73D8F1BB6D556CAC4810D9296D4EA825F3D
6331F94DCDA6E5EEB09271629B39407DFB8B1CF997075835D460FFE9006F2C2F
3D4CDB5A4749DB79C7F6F9EC019325BC334A7D1A70D83A06C10135A299DFE4E0
A5FE4730FA4569F880369ACEE82A1A9551FB99E280A847FE29C4695E6B6159B5
84894ED2831E6989D7D159C95704093D878CCBB2C8E03C23E0AE08F566A4813E
87663A223F1BAA3B41B4838F319DB20FC53F5908B89680DE65F59CE797618CD6
9C3A063DCC6276943CF9EDC90E2DB593A7A672992A94CFDAF08BA60E2A6F0546
BA6A5B7D3CA2CC7D88A31DE96147FFAA74B67C79F696BCC473F2A112C9979376
C958D4F9A887AA9D0FC45B5A7987DC6DD0CA97B464526310FDF78C383C9B1074
881C67353A10A3D36141925234887BE006ADAE9318BC7801E7956F4E51147E90
185ABD326C1699CE03776F9B82E6A7B1B42E622A52E44865D4DAD2CE9FDDC4D7
9691A6A5531A0880A2A7DF0CA6F66B0C753A2A3C4235274C47E18CE6137506E7
9BC75D21F2F3777FE270856D9787E536C229EA86FF45165E55F7518408120ED6
87F9115FD4229FF94E44A6B5A947AE245AE868B3F5914E6B2D81EEC963065566
45090D6486EC23DE2703FA02189480753272DE63FCF454444A7105D4466CB3A8
0A4AC3F891322DCB84E50BCE2F7B5892800CF059A716AF88455F59F2A7548D39
D29536C892B971A77EF69428D70115621BA623B015B17578AA46F2E5B768E774
70985558C392DAA11A24A40A257FE99C28C86360DF3B3C7434FFA0DB4FA1F380
04990A84E6E54324F13E384728A9A95B1AF3A53E143B8FC0360C56A7E7ED3AD1
D4C1C35FC867C4616B134B8A2596FC0BDFC2B2F72F6D19FA0CEC456A8B9E3016
3D8110D542E7322FE28E62A599C367943A20C4D483A10FB7CE671AB69683EE2F
2B6C9D1B371A0E9B0B9F823F4CA64EF2DC01761A2C258425FF83B5ACF8E2E91E
26F92C4E8E2A16909EFC9FF04BACFD0F7AEA74AD464CD041B76C6093756DD184
178EB66459B1EBC777011A237E432D5C29ABC457FFFDA87424C7CAFB65C7234F
1FF6EE52C5F11631A78765A52D56F9F568F7649A676D7A4B31A4269A579D102F
1144EAEF3351EB9096F8DED85DBA9094E105CAACCAF3E975700787079E11F8D4
3CA1928D5859D2E5D77A0B96A4CF929AD097357842645BB7EF641B63E7A29D96
EC1CFDC97093A7F3E1485F699694FF5C4B88A8D1CCAA9D38A58E11AE1AEF095B
36580EC066319191D8B13B497756712465BAFC67B721F6FB441A5F9F4FCD2EDA
05AA0AC862D11CB75B373746FC6F145D933BD426557666D8C327D8BEEE365360
ADA854A1BCD50C5B527B74F41B3EC7A069A53EC030B07245D8D8937C3AE820F7
9824566FBD98ED49087254400DDEA824E786CC034339C2958C3E433181DD45BD
A79D4BD7D260AA6A016D2D3DB6BE7BE793900358367086B8209DD73736E3E1B5

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman17-Regular
%!PS-AdobeFont-1.0: LMRoman17-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 805 195 0
%%EndComments
FontDirectory/LMRoman17-Regular known{/LMRoman17-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman17-Regular)readonly def
/FamilyName(LMRoman17)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -252 def
/UnderlineThickness 60 def
end readonly def
/FontName /LMRoman17-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-400 -286 1338 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105D56139855A7DFCE26D44F42E43DCD4B09BCB2
C0B13FCCF45D66724D4F9BD1AE3C5DACA322D5F106264D18B14EA595343FCFF2
E1123332F6D493151CBB41DFD055E2CD496D222EF41B4531A6CF94D6BB6825C2
1FAB496F22FD3B47B1E926B9B05CBAE6422EBBCEC149FC0C70F6F86A0F810CDA
0AFDCB50F75368AC58AE244325EB6CA36EE300BA83D807CAED125E3B16569E7D
1AA186346F4F62D8BF78541FD9DE8C6F961A6753785923F4F221656FE25458D5
0A9808613A1EC6942E9B97B18F0E235388746DDFB04A5234ADAA9F2B59A2B48C
0C094FA865AEF464EFE617DB7A93BB5C2F57C77326A329B432A6BB3AE294D926
7D1EF387E9DD04FFC10FDE445DC4ADFE15D2BC0BFD34906D473A59603FB41480
D35869D2D71EB1F97B5CC81BCDC2ABB45437BCB13EFE608A1DBF25BF03B63C27
CF678B3ABF5C53DBFB7F3E4AF705F3518F7B3682A0C50B4F026D3AD818ECEB10
ECEA905FD14A5D0D09B7B38A3238990CD98B0256D11DC6907857007F39B09C8B
9EEE545A072FE5A265C9EDF7CED499645D848821594918F4F56B9D154A316567
BD9A2462398F07C1CD521F9F3DC87C721A67F56D69470FD29CF72CF5DBC7AFE7
C602AD7D27CCD4689F232657467C14A5FF7F7D1BAEEE4E303119C510A0B277CF
F068B7F4B6EC64A5D969993146E720A1EA0524D58468F113D6E65D18FC32F4C3
90363D9FE4273E24589ADB87E3094725B46F7273BF66A03998BD0D14E16A1B78
96474EFFA7572D9D2E0EB393022F3E8341FD99DC0382C7972E10609B64468C85
4DED836B378EC22C47D64389EC39A4F9559CEBE3FAF93BB8E469C01434A269BD
92AACB6C24C5C93C36059974A75F1CDC349CFC145EBC13857CE69AD4F14FBF35
AE0E25E3A1B65947D70FFEB85C9253075B5D04025AE0344EF76894B658A64DB1
299509A1E7F6F61659F406C52B44259FB9B1C3B24665009041CFE641946FC93F
1206E30F2B6DC521CBD9141150AA9E62C83643505CE3D74F73A8D13B930E6290
9CED0E34F12EAD4B266DD80A399DE156CDC649D036DA389D47F5FC0B6D570340
2EFD2C502B9110D530661670AD0B281E212A94C9E3F324BE1BC4AED0DC766810
A1779ADA929D291E50B6F2F4222034E26E42AED14A2966BAA5D3D6DD0A38574F
EB6FFE88F4CCD35C133D00044713D8770796F7E1B46653DD2778F1181D774D8A
4CDD0A5787C961FE2354A01EBBD2FE4DC35FA945B109E02BC9D0CA8F2F54C306
AC2ACCAA6366E6F24A603AC3E2B599C47DE9C5F840B8607ABC3EBD65B115CB8C
C3532436846921964AB2BE5A83FBE336D8C2D1325E033E6CA7B01BACCF8030CA
D26310FA1CF769F4A2A6DD033D6A0D6B27DFB7E5EE5315C3163A5E658CE844D4
F0DDB7D17FC1F755919054DC900685CE73A8D5738C2BC3A5CAAD63A2DFE5DE21
E630125AE03ABBA75B3C5272D5BBD5672BAB714A362DCAECAF285C3F8DEE0BD7
82DBA0E886D584E4E06BCFF708B6DC29E0E0E03461C073EA8B3DD439E5109C42
56E14813707C96C369F883A6E09BBD083541DC07F64A09099CB9C8A8EB1F0469
2076EB31426240BB2AECAF921477FCD299B2E5EA7AE19978F96F7CFD366BF9B1
40E1940E13D7443EFCEED616163438ED70E86F742C3B5D9421E2AF8F2412E78C
A82BB17C1EB3108C53E594D933EADE2663ECCD818CD77D92C0A70F58A3967DE2
6F93EB7C1019B8A18D4135AAF5DAD0E4ECC35934343FFF7676D4A816EE593943
741564CF1F083DAD9233EC198B785F96E717350D2178CD96C11B52FE22BA824C
C6CF64C894F4718FC30F4D8AA5132D2B427B8583BA12E5708AFBD8B07C313A04
F32DDF5F6EE6D222C9572BDC4DCE6CF3F73F954505CBC76B9127245B79FB2A1C
F6C474838566F026E25F3508C48A8BB31377DE3B1B91161DACC89ED4BAC0C5A0
DDEF52F121996E2483E9C4F229DD80EEFAA50DC64C2AF35A3F9916784B964679
C691192C6D351853990FD81536DBBEE2ADCC6EA159977154EE7F9DB99A4CB309
AFB6D06F28AD54C9C388ED9D34A511312DB573060A7E73001ABA76E395D789B1
9E2A4530B7CBC274729C142A06D14003C671AF4B2C82056B6DF07609B047450F
38572C60BB4C4565531425C87B0D922B8384813E560211473610D33CF7539004
D10E53D42DAF400AA41C55881CED39A6EAD01854DD37601E6B8FDE18C678282C
0A436E853EEF76EA21462FD2BB819F43310E4B9C2EDEB3CAAE9DC6A960D12995
838CFBBC7D000498996693533B3FC1751878D403F75CC1E5A6817EFA23906866
DE7293A1F71DF875BB199FA58D4448987509862B93AB33E5B66B12904822C982
37911453E1D3ADDDCC7E8ECD80C062934DD81F3DA85863D9936B883ECA60623A
F6D9E93D1D93EC8C8C2E8D9D06EADD9B7422C2C2489D209D78E0A2FD3FA71C28
EDFC157A61CC9849A0B137708F4F07EF69543F130F9658D785717190310A7A22
A46895D1F5B665C1AECA4F3AC8A71C492E3CB877FE38C58A7F5468AF52FFC11B
8C02BF09D3CA0B9CFFFF0802EF93C18A00207C13BD757BD22E08B35157F11930
C8756A84FD681880B3CE799AEAE43FFA08384521CC92ECD90D53471FEA922D00
27DCA554348ADD815687DDB99DDA88F1E2C5887707CD48595AD4BAD7E3D516D0
9D38D4C49FA268C0A6B5EFE30C57EB61C47265049EF59628DC8B04C7190BCA2E
251DC2AF7825D029C3F827820774927E009606313388DBEB484521715605F224
99156FE556FBFE1DA14666207ED4C1346E54223361FA1DBA789C741EFC39C266
0846E6D246D604E27CC427B415DAFEC7C78C8BAB8C28AF1C3E2C76D4ADB2D5A0
8ADC1D399DA6674687851715E9BE11CB03C9FDCFDE3700BDDAAED61CD52A7CF8
EE897306A92F2BBF8556983A809C6A252FCF5F1869FEEEB5E3AABD25FCC13339
A1037B3FD98125E92E3B5BED5199C717C8C05CC48AD62E125FC003D7BFA82A4E
D31D68B15F2B74914BF86548D87316170A909B56CC3D3CC3A173A7346B4A33C9
9BBA62EE86C30D0DE0278EEDA0833C35F798D66B30AD10FF770C9A08125B9FE3
C31201F240B5ABA0F455DBD4F8C7D91BE319E89BD06EB28A3E1A31DB992E807F
01F1EA184A04067D62F885FAC00BB53DC0400730FCDEFEA475AEC43E05682399
72CCF3326488DDB3D5AF6B8285E4B468DCA5FDE87A4B7F484A55FFA5B83052AC
23F4B3644235890E33B06E3DF0CA28D9626A7DEEE92DF84CF5967CD2F37C940A
8F4B3E4DCC91413C3273DAC2A3FD2C4F9A9BEDFEE780E040423DDC5E3B4876FC
8A9E07B69ABCFAD51EF554621FA6B22F0346F9E6D4462EF7D04FDAB3B31F1C72
FE37AE784561BFBBFF0182B969C8B52BCE11C180060557B45DC9615555BC5CA5
FE986AE2ACAF67D919685FEB7556FCDC9D79CC6D60881693C2689A9351186F64
352EF047740074B483D609A3733695A66F9261D70E7EE6B32627A4236B55FC68
72A733E8616200AD37489EC9A75BB35F29A5FE26A2EB57E343C23369EF2AEF19
214A5DEEC7E88AF09C8E66A6F2FE6CA105E94563BAF4398D2D2BE7E7A3196129
502ADFAF9C4ED4EB6464A75035F130195AE2B431CA708EFB78BD5AC554C7A94B
FD3A91B3FFD4F252EC7052730ACBEC9BBA82740C4BDC7CE426F4239D4551FC9A
8DF81AA603DB7C65046CFDE4172E5134BBF95DE794560C1D817B4DB795BFBCC8
0F4EFBE3D7E3776948F8DDE5E974FED756E5E18974AF90AF0FFE0D3B0B72D09A
21FD326768E57DEC8F6CBAD51D1B70C1D43CC2A8C7C60E2749400B4D9A8BEA50
2B531A95D074A7642D5082D56A77CCFC0E17F59396E5016B8018BBCF48960DC8
AC4319E18341C0A3D1002523E04BE24E0A032DB4C061C55F6D7C5ADF691D4C16
3883BB2994826A94C1F46FCD739618D3A7A43A88BCA04612EA2F5A6C8A7096CD
EB9BC58E4FFBF283C861567836356CBDF518CAF19279E81D9CE04C5C360D7677
FEFC0BC3255F0108B7031BBF74C3D3095B2DB5108BEC9C46CB95FEF4D4A1BD3B
A6BCFBFEBD5D3333E32FD2DC6FCFD5299FF226B13159F6F0DA988C6FF06B7DEF
84FD26D379426E3A6F550A87C7C3696AD83CA15099ECDF3A273E8CE7F0D53C67
6AE01DDFA4252A5D7186A9CE74BD431A88232AF0022CA7C9CD80CAB18E2F8F36
CEB9CCF1F472B7CE6AEA8C43CE8FFC9D1AEB97BAF55DA23B2FB4A868B3ABDBA9
510E58CAA7D129FF4957E6012DA8F7EEA4DA8C45A27A9AA8A21F616EC20C9183
4AAC2A80D5684C50451429330A33E361C619BD62942EB727CA1870F9437AB18D
6105A0E23FA25DD024213A0F8087A08EFE3C136CF8A58278CCAD5FA2CD9E3598
8FD5B8584B58D2A96BA4F87927D33F2EA3132EB8461984D3224DBEB1ECAEE51E
D5E40F4334B48EA578982D5FEB53407BC29192867A109C5C561DB84E0DBA4681
990CFB4A9CFA7584BDA40904488A2DCC46E5D1FF75F727D4D0BAD12793CC7A3B
CF905C594C43A33EA29CBE2AB98CD0305DD935D8F0F5EE31572AC4F09CAAA37C
EDF28E1AF9F86BE6A1662353BD72F6AC950D06E44A86218B56D8558A85840658
90A9267EFA8B50CF1F984E972E628C1884D4C6CB1879CF8386180A5F3B7C3CAF
A5F99ABE792B377B97E059D705A0D83B4652F9558FD8D9D5B7478A9A196FB126
5991CF32B73654269F8496FFF2FE5D5DD1C32DFC80408D750304E9FF5C4CC172
936F0D6F0DACAB0D382B2514321AC39763F9668112F764626BEBF9362E25D22A
9C6ACE18C3988C8F3E78A03FA57080AE5C40688DCAF754A276F0A1DE4CA0F0F2
506C959D1871BEC575BB74C8B309694819EA9FD87096530A263D604E53091F7B
9738BAEE1BC63DF9EECC48BC5DD3B94BEC96107E64F621BE09010CB6F43790AF
F8D7220AA9CDA067967A43B3D1F3FC4F591BFE0EA1D3265E6D7B0D4E3F717415
3A5D789E88984E0A07EE0944AB677868D480DF6C530C83A874B32A4CE1F47F0B
760AFE02EEB25BE176957A0294697DD0358F569C59D057CE0EB803EC5B28D812
1A2675BFB1538011B31D5E979F30BB8D4D69A043327A588B8C5B1CD693757C3A
5B86E2A64A4847CB082ED09958E703F7C6D723B9765172D5C83753442C45C1CE
04C07F49CFE7A8E40CCF6CFE964A70EC23B18F7577B514C7361CBA2CAD63DB76
728C31B33528ABA00289ECDB306F226579871CC67279A95F558EB0BF0C9AB7ED
57592ECBF980681A1B4020B86A9E14E6776FD4CA13720D3C291A3211D91902B1
B47F21FA1BEBF910E087E76798939F0AEF7E64F621BE09010CB6F43790AFF984
8F65593DE423E11AF9099F7586A67B05DF4C366E741D4DE34AECE622C40AD2D3
49F0A99EE75CEDF13EC2A71BC33F871D66D40597E4F20CAD0CC21D2C3A11820A
A5B1A8A9D5FA08DD485C3B1D952361F75B6CA0D9B4B4F4860217FF6574751744
96299457BECACD36404D977C4968056586CEC7F8ED7C623E5517726F6028288B
8CFB9854CAE5E580CDF8E9B9EACFAE3A6CECAA632EBD3B5BEAFBF49EBCFC9A8F
A266C157C0B4F4A6CD1C1E1DAEE76D95B26656486721814B59840243587FEECA
D354A034EC1C18B4EBAF5DB938AECA1124060D8D138F01FB4737BCD3D773D17B
9EFFDF4910FB17417A40ACE20A956D46E6850B3426A4E19A8C02D1BD76715168
E7E2B72B95EFC9C7ED997E502BD71B368E9F2ADD787FEEBC4A63D583CE7227EC
10365966AF2C0E16F0DAD5D4A5479C77743044EC0600CAE66913D3A895BEA522
4212F6086D865C491EADBE21EF5DAEA5041C654A410317FFB83C801DB9D655AC
9551F10922392F1BD0C164105C4987B4DB7095DA38628E622CADD9CBBB97E149
D067B3085676EADB90FCF6FAB4B71CEFB43381D4322976AE41210AA7A444428D
D055DD35D91A1DD46538032E3A5A59DE7822E1EAA6490B2CCA01A993E505B0F7
6196781801EED5F0D5A166C0D6545888308B44C75D9E7FD134309B0226291676
64E7533AEEF54C6A6DEC9D5D66957E7ADC7CA9998BE79DBBC7E1738945BA0F66
4F19C2AE088DC168AE63B11D15A49B6E46D8EC621225A259A56A8342A6A64360
6966EA4A9E1BA41B6AE24AB2022B6793485EC219D9C8CA25E69488DF641E3A08
7A0EBC965734A9F31A28199245893310CCD9B4FC3546BB0240F44DFBFCDE7F3B
B2FBA15D02DDF03EDC5726A21888E25B6E2F90251302BCDA11FC4491EA792C55
4CDB77B0F15E951A3B28D703CCB29BB0939391BC57C2EBAA31C5741780C0683F
9D917B293DDCAEE45B171F5125E4C1B5EF7BF71E4DD8A696A7DC3322D57784BF
A903DC5A829DB662C701AF16FD14F0C92F0870054818B7AB421E6C1383C1F00A
D10BF0054F72ED0CA0451E5D8A813AD6697E53A43F330F6217B5489E162385C8
4F86E70D3BCB5ECE08BFBCA2A7B936C2656B59AAFB74F9E40E680D890903458C
B931555AD4C8278F0385DA62ACDF1DE9348FBDC32A12AFC773074A7E31F7C63B
C4DA2C8E1C1CEA7000F63CA5BCEC058E3A8D6C39E9D913191CF13B665149EFDC
E931CBD5E9F847285162043549D78E2B9DF1ECC680AF5AEFC435DA11831536E2
F66A2B9F9683381C56776D27F95AA7A54E69DB22BED937FA03CE28ECADB6655B
EF2710A5A8C3E1A9F961DBAA19CECE749A9FF24B7AB8A5C5A2BB74C86C9436BB
0441D1ACFE4B66296218E1EFC5BE6D85403FC5B0D4D107A3EE7F23D1E763D760
B0241102646DE6545900E06E6A16131CA22ABAF75E6672E59F8A4DD691A4C460
B6DD4513C1F1A45F3CD7BA00458FA7A17EB94CB7F233A0EF96C16D45B427465D
CB1466D62F4436EC6A4A7FC5C7637451A1D5694EBFFFBDC56E6E1EF7FBE3D40E
5EBD687DB29985A7BA9571C0C192E1B320DB0FBFDC7FBA165FF099E2D5173413
B3995A7DB9B4C56C828F8C6D2F7D428653FEF4115DF9458B70D2A89EF4E1B65D
9494FF90F10F9FCD090D1108CDBCE3878E032C863869EC971CBFF3788AACA2DC
8EFBF1825630B15574DC1FEEC782F541E51F352F5ACF474B8D104A5677B23172
7E89E119FC0B8BDD86421400B49D57E5AE8FDDED5D706EEBED830DAC0A2EB45F
E7328E735DB9740967E6887D1A3A4A472FB073004DC08552B28BB3769FC5A368
C75E3951789F222EB6CD7A4A50AEED2824980D3B052BA6ED7645C89B70E1A70B
539A55941E830ECADE50F091334DED6FD0759649A066060746C0A627E366A2FD
240E5FE5C96CCBA60CA2A61D75C661613D01155E2002BAE8B740656A07DF1475
6D0FADC205A0A26BCB8C098ACA6C8E1A94F6D9F5129135C70CD0214CF04A4EC5
AD120D492F25CD6E1DDAC72EF9EB9AD584935A58676976DDD2B6E118FD1D4598
5AFF65AA47D59BDE98DFF72C676430AB9A60F28F0DD0963C451C05BAEBC80F28
B6AA7ADD62D4FD87AD3E8166529A61002EA3132EB8461984D3224DBEB1ECAEE5
1D2628ED20A96E8F4430344988EB94048545A761892E4FF35A3B72048904BBD4
7D276D475E2FB51F74A8BE2E5AFA457CFB456B33079CF0BD3F7C5C53B5F23CF3
1A615ABCBE8416161FE31633A6EDA118E563BDC1C42F403BEBCE281DA87CB1D6
E623D1BFFAABF19003B0D12632E659F803292723E9740CEBBBBE4A72103663FE
29397D8ADF208D6689C748B923012E45D9F06EAB9F4D43EE01EB560690439677
CF0EAEC1D37A6200BB11FFA5F3B23E1895F8F9356284802E6061EB752BEB7034
482E93D15693E7B0D095FB57D17CD3E503C8419214AB037971D55E3AA8F27E0A
98BB8F77D161F652DAEC72FC4B6984B4E0CC99AC20DC2E543DFA9327409AFFF7
DF7065992BF4FC1BD306F6D7F5E17C9103FEAD06329B3CD624E6D38B5FE1E9E2
78FBA86A6A65792B16720DAEAC440C578B2E507397E65DA1B4F5F24DBA3A7726
0179470E8E848777A845F6E4F585C85E8CAD341C90FE154344F677A4930BEF4F
9CDE56BFDA5F3EDE0435F57FCCEE637518F5812EB351B6558151AF3935B2C417
2DAEC9AF82B841344A2A061F5D409ECDB9F27025B92E55DD5D5897F13EDBB335
6F9E2B9DE1FD5D0186D064B69A9D0C7BE6E9DDBB45E069C587FA522C26EBBE70
E4B79739F2FB995A4687CA6C3859C1866A4D4E164C391EE9AADC6D26F1D3B0B0
E9797836CA0B1D5970FE0F4F644413C2ED9D0848242FAE8AAEAC174E133342FE
7A3843716F052D31C822DCDF6415E2E933F65C2EF0A11BDA0437225E8EA1FC5C
A55634C938CBAC138CDA0AFCDF5C7834138A16E9F85EC9127530F18DF16ACA8B
465C4DA50EA2A8F3E6D5BBA1E2319C65E68A4ABBFD0EE8AE871510FB3661D8B5
F4D9120A155D32DB5C681FB3CACE30362F178F311A8E08E445E0EDA3179A4A56
13CAD2152B0AC9512BCF447499C2005348B848036DC6131FAA2D8CF855891180
493205BD9016FBF72C42CBEC9CA7830A2BADA50A28342A2B7093A3F7314F4F65
6E97438F9A42814BB0394AF7EE7076395EE78F41DE23AAABF46FFCB2D5DC4A73
AE8610F898B23B501CC0382BDC172026981E6E86A1A5B5F4530A89DF33968A09
453ACEF9D7A156E3EF0EEA375E9511EB72BCBC723DACB35A598A5CF2683E283A
2FCB0CB21D0A240CB3BD73F6BE22FDF71CE5EFEAD65A6F1E19F6F47E8CA14EAB
930723612B3CF355593C7D2836A7FFE09897138C278B0928D44E03AE8FBE45CB
67C880EB0682B9BB414DB5E90CEE0A1DBEF5C74BB5151A2C24F205C0C3F6AD7B
57B980E19BC5F6C3515EBD682B2A587F38B9D69462A34FA883B2AE1A5BD4BBE2
BD235E2928FCD08612B8EB136B47C4DC9A780E3211EFB72BB51F7E92611A2947
13F9F4280E9B13BA72428181FFA0DF57FAC61AC56054C40290FC6BD7E6287796
CBC279092E030977C13AD37F824620F59E1C7D58F156E9EAC6EC03F7EE53CDC3
84D906D528472089C3B162E2359C910FCEF969A42280FB9AB2AF1F29D84187DC
C92D6F2D6E83DFB470508F3BF8B740187441B0D4749EDBFB35844F8CF727A387
D3C6E0570C5916F2EA99E13818D23C61043B5881BEAE339FC00B753618A37405
1DF4097191C6BBC815C3DB9617663042FC09D14C99A69FCCAE3D3BAA6C3EFEBA
ACF6B79A69AB9FB5659AF715D308A82D99CCFDE7136C97A5CA52C2606F28C399
8D7F565D5F5539EA278477BC1D0057990F210C11818D3575FB13A916E3197083
C64A1E2987D305167CEBEC6582937749AFE68A7B6BAAB1E8DC347BF71164F024
E0D901D6F4BC37F858F9C4B19B9AD0AB4EA29A879F6DB6228C0105AE5F8C1D03
3F0ABCA75BFA070A6D0FACC20C8DEDDE1923AAFFB416FB3029ADCFE6F32FE279
033C4AAC3E18B02E195E87257DEB8A1F648AF8E5D55DC081E8B58F2F29E19F7D
715AD567F556BF4A2AF77051523EC8C785172FFDDED3B859563F8FEAD4BC9269
7228F79199CC91C50174A76857DECFCE2FFF482C801AEA4554C959537D1AC094
541331B0FF94968EF45E4CA4AC3617AD77C899FE86E54B8BDB1490AC76FF84E3
6C40CE0DC42FD6D4F0B4ABBF4614BBB181B06F7786B09D3582F2A80550E3A89A
A8A18E4A00E72032EAF44C1D949DD257CFF8AC01064DC59B43DF12DCA626F8A2
147CC52486D794D5E8EB01E9169E93845117CBE2F0B5980FA6D9C5FBCB5BDED0
C269EC967551FAAC019A93A7A1648207C6661BD18215AF41660910B4BDE9E749
2FC4475B6D588EFFC4E2DFB76CAEF16CD3EC1B045ABD80A941EE8CB98BB131F0
6294B45300705B786BC0D0653933C652D8D4BC2F407F265666D7579BCEA6D053
FE58FA2BC93BF93317CAB537A70F9439B5E8BAF9E2EB03F07F09F1718D10EF7C
24C48C184E2BC4350D72B6956D0C2F54961B364EDD29B3B4B551C48CF2F739CB
2EC7AC3F669435FDD0BCB72BD872061B3852B74B006793BC90615DC552B2A855
1FAEB72E564662ED30792FF88AD564478CA576828719BE396E177C09467EFAF2
6F3773067464CB460F78BF8C9B0409FA1F644FE5B7CA424D1640502E4BCF582D
1CBF967F940532E3CA8507FB01B0DC74484791223B73E15449B30ADA38348503
0AEE93AFBABB827D996E563EC56140DDAC291B0C4B29733DCFFCA15AC3CC55BB
F9B28560ED16C6F8AA81B3C82D877D1A368F54911091A9482ADDD7C18DD6A189
304A5B5BD93348951B354102F98D18C07BB9E0C33618F76E5C0AF797744A0916
9D3B1D3F683B80745A2E1EE8BB1E2717DDAB52753B36705655AC9A377E0FC74E
1ACD6579A7DA0CD12FFEB765E13449109A12EC901A7C9BD2634ED9F6F2F7F847
D39053135644C619BB82EF2B3AD0DC0EDCD1DCE78055807A3A8E822BED2DEE4A
BA3633A9BB597D6161CBB2BEDFDF7850C36B5A414F119AB730E1B4296A154542
0E633F0FE9A9BEA10243D5C64A24965E7BA6C7A4C59DC071F8E63B22CBA16BD3
7020C2DDC0033D035B1D85B51723A506F0222132EA46587E2AE8C6A58776AEF1
D0799F33FEC6EDF59F573E7EE66E73A1555E2922EDB5B12AEF0F493C52096232
783EB06429B169DDA29E77F9419E4E98666752ECFBE462E14787DB7E679608D8
8BA5053465DD48BFD90F83A00CB87473B2B8AAC3710CC1F1523D49777243B0DA
F02CFC267FF10148BE708825C7BA991FCACCE730AB774EF8B2C7C5DBEF5E30FD
859FA34D94635D78CADFEA384D74519CF5E6C7B1EF77708D9F5F4CBD9F351FD8
3CA9E8C2D786CB4E75B9CED103496C03093961B820AAC061A879C2C1AB2E7662
8DCEB3A3F5A507E82C8FBEB7F71CFDC3C481050EA61C554759720D87D83B605B
B46274B908144FD6A49D62B4AA487C72F456899AB0902516D9B53B06017CA640
FF1CA71025C1F53713226D0A582B82D254165ADC4C980F349927924B24C11120
97012440040E1B6A6C1F554FD4170A0A88E0F772699FDFB1D264DBDB509B3ABA
73070F8B3C476A78746E509E8AD29D89B413FC97CC45EC7F06FFA457F1244C6B
5E4238967370A588E43EA7817F74DCBF89D41141C599FB05C360657857D5364B
1D5B9F73C6B94242713C8CE3D97502780776CBF7731A353F93ADBD8FC5DE5224
FE992AE7CB66C69DBE7886D7ED3F26160F86A09422A17124B098EBB0C3F25994
A35168628E153A2A5F4F9A5ACF9D140BB42BDF2B5683587B8F726493750FC14D
44FE0BA2BC9B866704D0B23B83EF806F9B144C8E138C7E1A68DBE739C01D6D36
68122629F3C62993BBD68D4FC3E80AFDD7EEED74F66BE8E8A733E43946EAB8EB
6E8C68859734B232A7C0ECFF1216CF4C910844B3313DC9AACE8D7001935C9D93
85749042F2896A43FED4D4239C57FE699CD9F0CABEEAEFA2A97D02C82012C1B5
52BCA6644C8B88EAAED6A1C6305348CD49837AB3BF6745ED0223734E5A7F68B9
6A1184091D122ABB1E3894457B7834D15EAD8CAD4CCFE92F79019521AA707257
5C92D4149D298C63AC26EEF70CFE84B3BFFA10EA4B6F4019A4E4CF249C4D6BE4
13BB4D85E540A2DBD430F2E13394E32CD7F3C5C03EE1146A1F417272A82EC705
585C986223DCB5AF1919C4F3EE314D0F09A5DC24D41FDD14A82729178F33BA78
DF24F7346872E84795059D0A12F0E2923074BF21FD5DA3E9FC028BB07396B6A0
21CEA623CD97D95208EF1DC1009C1E9D28B71A246B043CE44E65F1F4B9092FC3
F878B108184636112593D1B0A35E8DF362F34C814DA90F05AF8195CD5239ECC8
6AA143DA368738D2DD10D9E3553DE260FFD590BEDC71CA9AD4AC12B09C249589
86C4F5D8B2B4889CCBC5955812365F3AC660259B5604A4B42F39A4935E10F10B
AABF5FAAAA47A65D330F6FC041E7C56351F122EA8045C697647502CDF96CDA51
8B804C28E32FB3BFF145BDDA844AFE41C6709E48702FE77A8FE6B6F2BECFE199
946D22396E06DA8FCA17AB7A92C882C7A5E2768D210FA622491C4B224888BA29
A71E0C4BCE2FCAD37FC498AD7D881491C1D06444915B1436C8C84FFBA306FC5E
40690E464D46673BC84C902C0D35B018C470914CF1D522123E627D0009737725
8E81CD068A82342AEEC5762713C43E7E94884C06329D340EEB3F773EB7E92A23
86B678179EE7279BF20CFCFC70378DBB5770C47904DE9A4F6B520C1ED4EB1C67
E7E16CEA47A065FC6D24A091A75B5745DFEEF5C1162900B5F1EF58935863AB30
DC3F3BB4B4EFDC6DD658FEAFE642F6F31784BDAAE67903B8C5CC99288333EFCB
59D45103580B01E3CF7D8B2DF6A3B6681C63BCFC14135382469123169FED2BE9
6C095EED5449C6319F2DB9F1065F9997AC886452BED2C9082CD5F8B74D44AAAF
83E4E04ACEA44C5BA804E1D915D7E58D777D53156CB5D90105651F3CD4CB9427
D8239F0F41E86F2D4EEB998520A57985CEEF4463EC7897CDE9166094B03E1B34
4E3B29A9DD939BA4C4B32515CC61AFE9D26BFF842E08752064C9D149D5AB137C
15B745E4C03D01CF167B0D7BBBC53023A12C5B3581D8F351C3695D85DB4B8EB7
62BDA2CCDA2F5E5ADA62706D4C6AE96ED0EFDE808AC369ED17E1AC94F2BCCCB2
9902029E3B0F01017DB6D4137018EEF6C9BF625A1596A7A3BDCC08D2A3F2449E
A5006EE0724C5B5D085846A3C7C3088620493A637E055EFB165093E904545A26
E9C5B2E79EEC3897A434CDF2A2ACCAE877C3B56CB5A29F919EDF2ED2CC5E15ED
402A0F46027DDE61EAD03E8DE7EE3E332AB29CA4A1EDDF6A0122789BF66501B1
4680A3B9650D6DDE6DC320C05FEF8BF68D616695ACD14B3594882B491F6F3100
800271FBCCD9DFAAB5E93F903A8FEC0119ED1F1AA5FF86846BA1B1B2BFE36AF9
E311D31CB4D124C5AC8CF1088BDF5E020B27F5307E54B6F4A4858CEF9F21FC38
1E5DF0CB0E032FA0793789483374DD552E9B16777E9CEB239961D451D10743B0
521AE48DC71EF5FF7BC09D562B717444C8E2C33EA2B27F17185FF2C992D480DE
335773FD23BC99D34FCB2E6586DE317EE3BC34234AEDFFB4AE1238DF70AA3A42
1603ECC1623D32353CD7684A19AD134BC4409B9A97CCAB9DA5C76148888F30AE
04C7E9A813ED2460D9A9EF2A95B7D987384C7D5E552E41C99423702938BB5079
02E7235609BDFBAD62ACEC039D37816C342C96C41E33A1F66F931F2A9A50D285
7A8AD5CECA25892B5B970CC74AE8A08E28A3804934FFA3EF4A169755BC850BB7
0534647A4C09D8B5EA9DB838A16A02EDEA2E36A798B6E803A0A99CABA87DA35B
532BCA16C510BE833A54188D11AF8339662D164EF37BF8635D5E0A836CD7C746
5393A7DEB7DA08B3012A99FB2FC7F6FF7AE570B96B141D0CC94768B538891AFC
33B1E9929C9CEE82C585FB73854A5E51E73652B90264B50DF8CC22E516C5CA5D
99C0B8E8E937971E94C01CB172F3A0D8F7D7A4E3783E4615CCEA5FE4C0CF761E
921D7D2992EB24625547D49325566B91425A2A65C07D4FBCBB8FB94BE05DFF2B
3DC8EE825097E3E048679849A829F4171A1515A6C5DB908A173333A9B31EC7C2
C99EDC7BBDFA0CE085C7CFD4C0AC1DA45A8E98921EEAFD82A9516D47CC0D6183
D68AFDF46134D6205BE2434118077B908451C4ED8341D28931A2D97998A32A0F
6414BFC5E4AB5E0BCDD5E76534B21C001A82B53CEFEE5A5C18087F2C3B28BEAF
58B3EDA5670C3097A434CDF2A2ACCAE877C3B56CB5A29F919EDF2EDE93E547DC
F3AF3471F16FF759D63A7C091ADDCD3076218A99CE058CA4994F6AD3FD93A2EB
D338C28CDCBBA1D69D9C97BD38382FAE8F93AF77D94989AA693B550699340ABA
9F7F7C0089818E3F82FA42E9473ABE2F9E0CEE7FD175C5AAA0190182797E6083
5A740EFD72228AC15C565C0346CD9F59A3E70196ED37E6BE3262D1AFBA82395D
8187E2791C791A0005560EE26C52E95B71C4B9F6D1D64E1986461CDF084B59B5
786859662242E4FB89185C0AE93904BB3AC4563D3E778E0C96590D2D4DA46741
AC1D2C3082DD7583FE4BC0A3A30649486C002BFB9868AAC135F6AAE1541AB6B5
EF2212B7C645986B3B35D7FFF41A1FCC7C29E99B5641BF3A81102D49B5ABB051
053D4E2B387BA0BCF7739D813518451BBF41F9D9F03F14667084F66DF6E9B623
53C3A97B9BC866CFBD491B08704C6C875819331CDA93CF358AB9FC23F12BA3BA
D27A858258D1E412FC23069DF8D162A2B400EDE05DF412F5D3AF86BF751B1D07
91B6056EA7E06D5885091CF68205E2650E219BC916BF9A6BDAA24DE24D6CD658
31B8E50C195D07F126807E09FD39B4341967F54537ECCBC61816D57CA513147C
8DAEBC28D7DE5CB57A30F23A2859902409CD49D8E6DECDABE9F3842581C3BB3F
68A47752328AC1739D3C80C13265E7A78843F80CD719C44633862B102690CD3E
CD22723CAC55F4D5236628739606D8EF5ACD55D67E91567ADA087210CE220862
D385C4A97750300F7E066746B41876C1DB3A6B32B70C9CC4B27DA28E97CCA8A8
85F4D0B5691166D59F99616224E706E080926688173C80156AA27D4EA53FCBE6
7F188553AA98F8F2F93797E81B49BD69AD60434EF2824246CD4B7C7592758D2E
B863245C0C28723810DAD7CE08EB085D29AC7925CE02513B497B5FD93625C5D2
D7209315F9E358DC4BEB66160A8FA506A98E184B027F08FB8C4E85D8F183D2C2
0E7518C87F204E7847107009B163709687F03E8904C670CBFF1BC60BA1EE9F4E
4A3C202A378409F5A1591F80E1281C37B99663BA8729D9692720373831BD3C4E
8F387C78E203E2B1ED3FE72CC66F826A3A692434D4D3BE6ED6DABA6016FBBA2E
C88D6323AA7C2D6585F57CE1A9B1386693DAAED251AD39D3BDE3E416E13D6B23
272517D28E9E093AE3C367CEEB4DEDF80BA158F65C546E9ABE7B6415B64E2BD0
B1721F48AD00693D9EFD2E0110B640E38CB4A7EDCC9849DB017FE6C5895D6B38
283878928E69D0B4B7D9F1D1D05EF2022EA1DB12DE17BED15E6180B4FD492079
4D8F5743D0F9DAF13088E1BC59640E0336424602EA4A35299AC4CE1AF752E3A7
B6DDE7BDFFD0954AD15D9D20810A61B4F50EE635A4C8F7A3B6866F93CA641F3F
2CC93C7C195B7569629AF50EBCF7152E3715510FBF60F16750C579477C1429D8
5F6909DEF8C451A5A38F6A1656BA95CD0259836FCF6CDC988E5148B85F481697
37499815408D8B64E1A2935F3463195DE95A253AD84C9B7EB6D776E958479685
AA9AE8DF53A2A21D951A60E73E67169DC5C1CFC5EFE56334B137F76A3EA01B7F
2FFCD4DEF3DC9ACF797F39C0FF5C49D1AD996A67AB0914D83D859C06AA0980D2
6A7987D1B6A10A4D6765835DEC4EA0645F47A766E81B3F3CC28EE10BE6610B88
20C212630C2D9D32EF4767AEFB56A44965744053106BD5B5E99175BBC27E4718
26160A6ACBF9C2DE66992CF4DAB3368A64C98FAB5D9FAA0B9BFC4919F2483E98
68E0D59E613B99092C8C0E1BC2A9B3B3E4C94830361C8115DC829905CDD01E94
3FD5D24D5FB00FABD415EB4EDA15C15D794AB11EE10C5E971A9DB382F2181EC0
0A0208E0451F6B0CA3360AD99B2DB2E5898638982FF191687F723B02A05EA5F9
5D79F1338E7050D043B09368E43CEB4EB4ACAB454C6CB74F0E46C5D88948D284
9734E5F9DD5CB5BFEA5D7E820D14BE48CAB55C1CFB942952C5F2D227B7A94085
C657D1C6E557B240CE43444A3778178CD7FFA7152F5351D55C683CF59C2C04D1
4C4C65A43095F7F0BF8E2E5795683F27D26481C8552BAE2FD82785988D02E3FF
C53FBD9B984B003AB5F0E6E195CBDAC59C6559274CED2B0F61820249B62694B4
03E6922EF30EEDB86012DBFFF13C7DAC43B540D55442428332F2357E23D06659
5826FBC6EE668580DC1C1DBCE1D7B9AD890D6BC64614C5CF9B2479B4E7C3B12B
60AB056C27A87CE961E0DDABA61649AA1E4BA1237B57266471F1662AB7792300
49079D9DDB03E622B8665779D4822540D36BB2C736225102573D21FD0B03969B
A7FFA4F3B6102F19D4C26C51B773151E91659F532E4CFE9C30208BBBBE8FBCA2
3F602F13B2F4140A0A7DE082798CC9710E29409BCC90E1B54328E6A0C7231547
1578822102A1FD6C0479C8F89AC68DE87D86F3CEFC68FD0886476E4949E55CC2
A2BB87E8E9DB44DB791D1C46AFE2BA7EA3EB8D2DA4B491536CEF9D1E9F4FD8C0
003E6F232C4EE17CC79D75EC3262338CD13F13C659D762DB6199447BC8C757B0
FD0A10AC1127B4E7D18ADDEF5FFE63A9BE768D1EC4DF4956D533E0A0670D60CB
D73D1E1B9865CA92D4466870C3B0F9F47FFE4EF9561A25F70102C8091BAC66A9
CD3050FCBB2D04764B751500A6F3AB7A8D39A6281EF758CF048E713C0C6A1A19
088BE630227E5F97C41D9F67FDAE1B24D89C50C3C54B4136149F76989E8C596B
2A00893A100BEC19E13A6511D4EA600B1ADC4C374FBFF33E6CCEB0188A1309F3
9157CEE8D09BA136B97665661A8AC2BADD58DA49BE097447E45E5BE2784E937E
B01404FCC4FDF3704C77BCEE0DD24EBF066CE4E6A9D2F0F4985DD9F9645D2BF1
C1AABA1E2AFB1682EA8409E9FF00869412F9A6A7431DF5AF888E3C414F73321D
C5FF5D48434499435270B17B9AFE2E0C0729E5F10461A8DDBBEB6A27BA9173B2
B324C4A9667F5692B30D09EFB60C18C10B7DEE9D4CBEE4DC23636D83F81ECC28
DB55A59A294D481C34CB4BF88039971CBF0B811DA5D0453701393A1609A14002
E454BE43246A11B4C17B55516CF4256C1C5E1CCCA936D0011C53E7B33D5B50ED
7BF3F41289F4880CBD65EB106F365321CE68091E6386CC913D4554731177BF01
94240BEB2B017C9C4F9E43D85CD32C949F3D903BCA25DCB7C07A9FD4973CA993
6C7CEBD55EB56E4255E94B6B47F2E2057457A2BAF74DA634A429F9D0B4733615
190D5DCD70D140B498BA43863C45D94E6642DD04CE60EE52D3CE37E2F63D1B34
FB1EBDC9A60F4AB8C27EF468BEEF222CAC2C775B6964AEA57F562C969C92D66E
11A666CCC8D838ABBD910E13589CF5EBC5DD20C62F79E11EBEA5C97B6B8F4763
D21E005D89FAEBBD7D8B06F3FD66845F48BBD28B37BD51EAC7264D45CD2BB8B6
13752CCBB4C8C868FB6AFAADECA9158EC9419109D47C0ACEAD4FD34338305F4E
01DC7DF5B3174ECDCC3BA85A857933C2C08E97618B0C337A906FF31C4B78EACB
6615080D4A3C31296683A898B0C9B0D6A251BF1E8DC9D091F67A974BE006D67A
9A82BE2AA6D7C24DC708CBAD17ABD8F8850FFE69376ECB29BB35D08017FDB67E
D9FD13987E816CF57541CA1F657AC2C11EF6DA56C9E257471B964F0E4054447E
BFF3D34CED45B9B6F70BD75E21AE5D27F0F711B055F69D601845AA683456E50A
78708DAA3545F98D9126D0C1967481EB00E0DC469BE7B30DC18E634FDD024461
27B1C87D37B2CDE61C00AB0FAD3B5FF5C7F420E6F27CADD1653FBA6AEE4BA12C
6EF5F9788C49C93364584B70C2D0D648EDF6CBF3A2BF86145AC84E43EE8389D6
BA0D78F7052003A02207E510F60B5BA606E48A0BBA9BA05B63D75B82FCF69BD5
A8404282D7AF68279457739633DB5CBBA6E5957768255AA56B79DE786773EA72
6DF4692E0E21F7A3A8B611B7C90EF39CDC279EE67131AE0D2C5A6DCE9CB48D96
498B115E7339EE8C0C440E7462A348C2EDAB11FFFA5A5619DCAAE5CB3F269DCF
323222B2E36B5E3B2015E8FD3B00D7D34007DEF49DC1DFD7009B9ADA8FF961E7
2749276885C46637DB5F4089E9D1C3C7E53EE70844EEE70B0E301D7E5317B670
2AD0EA26A1F6B727BE391293BACF45D1A49845748D6F6F4C619646B14A25BB40
D57C2B958845B8788B6C4132DB52900657F018FF227701992647C9DB8E4802CF
468EA0068316D0DAC23D6366E798FF67671C829F078DB1088A3498A8A37BF1F9
C5C075430490AEA44D1C9065490945323B24F840AA363C8C06EC0F4D58005511
B085E975F7132FA8EF7281043D30DEFD2C68CB4E6F0E2490760440B506667401
0EE3696D11299FD0C1A24986CBB84BBCE9A2AC7430BEDC1F8785C87E068F56DA
505CDB64F301C6758615FF4ADDBC5F3C0B8E126A674EED64B1DC467BEC6295FA
0C7F87228A0AFE3542FFD65C78F96A432D8E4C5412BC5661580C9139133AA366
DE3ECA14EEECA75E5BB9B7CC36606A3C50120F97B28D9C1F023A1C9A25FB87C6
BA80A39FF158D081C901DF372520F6A2BB2CEFACDA22C239ACEDFE7001C2039F
C62C37DB28EBBFF30F651543A11127279FF933DA11831536E2F66A2B9F968338
1C56776D27F95AA36999BF799CD2C1106B9B9D92F4EFBE5FE4E2ECB891EA4CC0
CA325E3903528359F9CA0BC77DB2754459F271F8C68E17D6E9F8516E7A94A19C
FF201263EAE9247975F284587989B92F1AEBE26980D08CE5D2FFCD83CDF411DC
380969255122B89DB264D93CEE1EA755297722EB6D47D045F9F45D5E45672AB2
4D2208DA1CFF64FB859EB2F79E1D942C5A730A89CEF5CBD7C814B4D310672590
BD7BAD051317281D7A715104DFF4CC0E3010F6D683EAA9F7ED484EB357AEEF22
C16D4CACA1B436BD38DF995BD98FCB720CE30E44A96214F93C68C7B70266EDA2
18C6D2606A4B71044D05803F4C580F80546B2D997B174FD53FA4041B0C4878CD
5CDE798B725558C8B741341F24E8C339F174862DDD4D5FFEBA3F61D35AE7A030
42D2F0C84EB946AB43B544A99AEC79FBBA92A27965AF40A71E05E4BA8D7FC14C
AB13116BFC8D8A92C7D46E318C46F44703B645E2673BA996610253A72E63479D
BFE0FB8041A873898332BFA4BA407B362BD75A9928C1AF3429563DC0B1F2FC50
C26E8506E9B5ACCD5A74A899F7B2DE0BF6BDFB9BE475CEC94604D64C25B2F85F
EF70DDDAFD3C10D3647A79B44453F3D58F72B5BBE45CE2EEF899D95A8268F5CD
844FA61951C24F8B8D697D1578E9B275AB0009C06C9CDDE56CE88F3C05AF222E
70E934750A354F9A10F7C6AECE9276D30412F4E1ADF2D35C9F0F5BD9FB3F8086
075CAFAA40CDA782878DCD1076B7BB70BD7CD3F9F720E758D344A4CFB4F15A94
2D04E4C292352E1C66D456E4C5DD727AA41FA5B369D5E10CD71C0FF33C1C822E
FA66A75E01A68758FD97C5928BB2B1DB2F3D6ABD3D815E7369EBCB3C06B40481
9E48BF00F1A3FDF43C439B95A48FA01DA34B5C399EC8874F529E4AF2FAA34EF5
5CDF2CACB2EEA5DABDCB79FF7D9B695DAE2927C05F0E3BD78A7D4D948933F885
24592F028366D8473FF4E065F3449D4A7FC310108DC95F8A624BC961432A854F
C4DFC75455A2200DBC805F99EC797F49979E2081DF49365AC1B832D55382E122
3B42A1C367FAAFB12FEC5B70C2C2E43C32C3C2864C63C768B946AFF0C2F758E4
BF27E227336CF27D87097568E2FB12BC567DF5DE6587591425CBAF690718574A
536E89F5F7FD9F78314C430A754611F00EFC9ED07EB0904E95D00171279D5B11
1782A27909B201EFC170253BC93856A0015867607DF9F973DB5A1127CACB695F
360AF60C43D62B80EB771338729AD2F7D818BCE09720645DF6B5E5D5E8459680
B9E950D27ED0EE3EE4E3041C7222EB6AA1B50E2607945E432C31B6CBA3D9E7EA
775BBA2EC97CC91D926CC76EB4E1B8EF2FB45F3D0BC0DB85EB2093B526208446
99D9BCF89A6C07DD8B372031711A9DA22BB8D2855E7C9E55B4D6564D85543652
3D2CC0050716A966B65FB55DFCB22E9B160171CA011C79B557C330AE92214EE6
C53E5CADD9672D71D173E11CC603E82A0A12602BFB482E06C093E9EBE22F3B9F
D5B28AB8931F1C90320ED09ABD9A75856C0485CD976FCC99FF82B4A73B22E3C2
581B35BA7E1B6B3DEDD1321936B04DBAD95818B4FF293D8288A3C4DCEEFA1F30
76BB941B1832E3FDBFA33F1196EC8D2C2382F99AC70E64D36D236DC6CB621035
F65C3A4A93AF550285DA91183C4F754C307CCE056DCFBE3C40E5604C9580910F
6742AC40A7CB3E08E73FA1E59DD999397506DB4D41EC266C58862DC40E95DCC8
CB87E534190564310307BC6CA5E7CE47C726C6F63AF0E289C3D3A9C743D89648
458FF54D551E13C05AC2BE93653B2FF55A3348837002E65F7D56C2B1346F2322
D95134299778AC7D200A6D54B7547D2912CADA48879D20A1149E54FB59CE62A4
FEFFB32897B04BE4111911199190C39985028A01626C65A137489806DD832779
BDFDFB3E48864DA5D70547C069957DE29DD19532FBA498149099FA61E32124E0
B4B5FB1029C16FE8241238B7AF2503A3671F3FF407915DA2F10E46CF71C05A7C
911225D77F402626B1D4B471B96F06D4DB2CC78FB024D8B8C93B14187852E081
0492155ADDA8E704EC5CFDF86D3B00CA7934C296FBB8C866CD45B80656513B68
71E5258B4F80702ADB0522161848133C2DD1CD525F4943E97917C37315BF6F91
D758EC2461F4B71B7028415CCED34DB25B1C87ABBB901CF2FB3FD9B134E7F7B9
B349EB005E2E7957E228D692175AF6F8864F8D506A27BEB279D71DBC5F3F03C8
8DC54001E3BAE802FDEC546D3BAA5F7C754C05ACEFEAED4C2B386DDD6AE7AD74
7FDD712F14A7FD97C9E235FF7AAB6253B666A8B0C44EFF19E758AD1466E94359
58F10375C7BDF8314E2322C457EC624B6627A186EAE15F637D7E107FAFB4619E
F957D4A70F7C59A74F99126B53D62AA055681210B796A3533F9432D2834A3DD7
FC406ACCF97579B98003B260BD887421EFFDC3160FA3AEA099002BEE8FC602BB
D6EDEE6FD1192061FFA6E7FC9D84A0F5D7D4B35D4E24AC4A11F6D76807539CE9
1804815203BED8972A2E4B94BDB2FC07702E1EFC985AAA6FC10413A373A9E0DD
CE6E0CB200846737236D9ABD2D073A400E7CA0B870EE6EBF02A0707CEABD8975
ADE6EAF582DD36C1D29166CDC5A658EE2DDDDF061A2CF3935D54BC20ED3F9090
5788CEA450619E78AB817CC6748BFF50F09D2625AAAAF2A00708D49E16850162
0DECCFD6AF026CD8192554F8648029BA74D83DF5269D75A14D74796BA5A7B637
A73A860A779059D22B71C25BD4181DAB0784A2BE1A7E183749D8C76C2ADD5E29
CE17259FCC5D55CFA6B2426AF263C67B61926E5A7695FE9B0A14B9386FB81E70
6104300D19993CC0D90D2BE83169D4F886C1EB48D22E71F0F57E906AE3F15F06
2CA4814BEFA3FBFDCB8E78B6C552479B1E51C74F3BE16F39C0B59D1079C7F022
0F55F8342930A75193E883C04AC3D262EFF1928B06B9BB930A88335101F127C7
39B01CE8927FEB98EF53AD579713735FA47174630C757411E78EE7E862E8A419
9EBBA42DC3CEA88BC85FCE976E29494343FBF47F4EEC10F690C7CF1CD8CF6D0E
1335A4058E25F6D9619B9DA941449EF06590F446448C1DADBEF2BCEE271D2BA5
DC855E2B938ED8DA31BAEEBE739FFA32545089856E54B26D3E7596DD9C1EAE6D
72382D60A1A753062A05C1F137ED241B22FAE6EE3AF85762C36421F291360670
4433275A68CDF6788877A3104070C223170140A7516D83EA6B4E32AE3F6835AA
1894A23651DE79890BFA67C3436A83A4AAFAD480BF227B22599528C44516C018
0D6E3C2D6EA5B0DFA1C5380CC12EA96D6B34D99C045F0E979C277C9EB03DCE0F
9DF500C4200875742CA1EAA12E93058758656CE2B783748D24D9DE6A1BDA5D1E
D7741E60EF4C53A3C983853B0B44DD29AB53B47F78162F06BEF2B47D10782429
47996CBAC9F6F7A766C28FE837ED9EE3CE4D2EF6EEBF9C590D4EB40CC40AB17F
59A9501A17288D7A348B68D811FB37097B3D9123E213615887456F195B123171
A69B2D426181910E8EA5EBF6D1D7F54D4DA84DF20998014260A53269FBE38672
FC59BF422835ADA8515C4A4972910354AB20C935E0EA158B8AA6990E4BCCF70E
AAF9F8C37D31577E8C0D68A4B89535FBC434BADFEE4DF997633E53480A1DD992
F8753156C3327A3EDB5DFCE07CD6B383450430CF867408666C11C1B82D7F0625
170F3F9DECEC62F2E7186C23BFD0F22C77957F1E740BF0387A7CD0F3B55792C2
46E2E3A78173A5463700F2C695AEB08870DB22CBA2D2D284F09826DAF85445E6
C8F04DE5000FE419755D087A3F3D5216D8AA3517BB8A99CBCFDB6C84A32807C0
BC46CFA13B270AB88AB5CE7C6B270128639A86DC6412958577C144591984D9EF
B342F65D6ACA71BB04D032344557CFECA0D324D2E8B7353F81760BF1CFF48FD0
56EF147E50C70C8E5A6FACD3EC45B9A9AF0D4BE95D1FD3B745874710A71E89A9
4D6D4DE03E7185A1A8516C31AE58C074D92E17607854EC96F5C3BA6E6CD5AA13
8B168C23814295B0BCA19D3868654EEC38CA4CCB5F26D1C2D5C8005D2871DCD9
89AD08B76C39EA6587B515F5CAD0858001D0F08DA33F14F3CEF12F4EC5F788E4
6EFB2EBF78FF44364DAE6371A20FF2A0D4B69BDA5F6825733B48FADB06F9C8BE
B8E15F38D8E5BCE6D4AF2E318F2058F294D236578CFFBE68A1C9B86A30B06FD1
47A2003BC98E41F463A11C10C9CAA05B6D247773786FF3A19B5DB1BB9D73B205
D69ECAFB6B0770F7423D2A3DACEC303A032718266FC1D0E4C1A6FFD4032AFB72
148ED6C631EA37DDF577BFA71B8A651C075CD9C453FBCA9132C26716B73584C0
49A786679CFB5B69CD3CD1607BB4E0A1A7A244B1B309A2858EA712B5B1DFC3A5
FC5B4DEECAFD111614267B7A44683D07E37FE14022BB54E07D94B187D72A9351
8C1C686CAD65DDE0CF36B14B27F7370B134CDFFF3FC74BB62F8FBBF658F5DCE2
7586C7F617FB824FC072B203F4F59BE1AD9366701F2D16C8B9643D9B7EC3B35E
1F3AC6C95F14FCE713643BF5E2C15F79D3C45EB5F8353C55A5FE5BCFE16F81B2
5EE8C793400A114DD547128F3C4ADC15C89974C7D876531719C5D46999CC1FD1
C1587C815D776F30C559DAC9A82AD31E1F52D0D00AB41930B30DCB0629E6ED2A
6E81E8369060957F68A42ED5DBDDF77A3AC7E84A84BCB670611520F82B54B156
921AABFB31BE9C77E57EFDAB7374603762EAAA72B0B40EAF7A1DD88886C5917E
A8C3D12C66A4CA6D951C5831F822FA0E4BA401C657A6833F73F042DD5D59021A
DE17E43F83BF6D1B07293724911F271963907268939A7077AB632AF83A1064F0
916BDD424F82B5E00FDCE505FAC094D1308496A5676D177D65D68A55D40B1F81
CB274EEEAA28E5801AEC9DCB0572AB667F33FE709E3DDBED5D26699EC3EBA065
039011AD4C5F22986EA0FC188FA30CB08809DF8587B1BAA4DD57ADE950401D73
E1E0FFFADEDE5FB46DE214C1E73674DEDFC3928949F16D9C8EE8F0E56DD9DAC2
3D0479DFD74724DB43770FA520D2AE8114818875E6B43240AF502F2999AAA98A
D431C8BF19D402A5BC1C541C4CCC8D3530B283E59CA6CB76F70DEC47DD6E0A80
1C1C10780F7FF8981CB58461FCDDB47148BBA3B80CCCA6788AEF25264822AB4D
94FD51449F12F9808B3E9B5F81CED307128F7F523149B24460809E7A45ED185C
6EB75D98BBB45B91E0281845DF8F8927A0D305620487351BEFEAE26D641D49B7
A3490F09BF16B8D17B5FF6C559ED8F7F8B7866E6D3AB07968275204BB347F333
6EBFBF3AB63819BF6541E73737B25312E6C66A69FC6AB2F0069858293901A027
3116E89395A49AB5121BE9B670CE12B7531AC67791D0E6842693642532E9F0DF
AB6CF6D6102D91AFEA73069FE938E4401000284F0663CB133C0789E848AD295B
7FDFC54DC6939A8FCE4E68B91F013EF4F2C664871EB1A07B3A6946D45571FC76
0DFF6B008718331C87CB83A65571AB482E2DE257D768E49691D37C2D1FDF88FA
9735C944C04B919B7BB6A60DD4DDFB93BB555A7270F0032E465BABEDC57CCC60
DA6B88BE7C745E416B79718F7C53E34C5057880AB32CF15942D363FC24EA419D
1F6A957DAFD77599C504C8B2B7A6A708FD8B1E12BA34F3B17063DC90998921E6
87F2CB6EA298ACBF5AAD89C7A604766FFA65AEA58C77DC4ED68C27DD8032D3CA
CC91A2805DE4D0637913EE6EF6D06F8E219B54F613C7F2D238B7EDA1CA4AD405
276E3513DB07C2186501E65D34781B178A186480F3532DD7FE7613B1A5B4D166
DAC09D647BE595260BB70C631E70BA8FCA40C0D862694D00055D90094EB79BF1
59A65B012A2EACFC2FD63E7F4DDBD0291F03932E92CE5320DC3DA94674E8E633
B68073CC674C4D0ADCFE9C9883B5B532CA46FBF887214BEA56BA3D75F1EFFB11
2F0A4D9FC5B6A797EF69C179AA51B0D7B340A9C9F279E5D41653288CC946C4F5
75601ADBCCC4F415CF6868F70FA1C2E310091C090835F8B62D4281DB8347AF8C
86799F28DFAA06001A34529703808135CEA3BCAFC49C48F9E5C850205DBA79C2
C345958391589B431E90D4571106E2AE72AA71D6D54FEC2E437F4DB5105AB65C
49426870C7FBAA8C2D1D500481358BD38A52F34923E7C63E9CB9E28405DA733C
A2487458CD969A7D3CB2390AAEAD3C15E072DE0A84250D15ADAEDF43AED50CDF
CF7246DB5FF9584EFADB688F84A913C3871A0FCE53DCAD2FBCE90E273C6C8554
D78D27169029F4396BD3C4C1C8143537BE246A92847CB9D9B3D5003D79CDA613
B8B4263412C0CF0B6143176F9D72DF8DD163A3CA1D6A8C6C902E1F966AF6EAA7
BC6A485615B913A00461E8A7DD2946468FA6CC0A0617A6DCC762160E2424FDBC
576802EAF13724990B905666BED8C73D3F63A0E77220CED0EF8DA2C258BB0697
06D80738EC9553C3EC0EE8DDC9546D4F64411F413D11D4F972436FB4F4C2EBEA
E439306822F44A5CACB22DCA7BFB2E6747739DBFD8DB8B19E152524A12F8C4B2
7C5C38BFC073ABE4F36EA006E1E60B8D8578F1BA54305F720A87C62DCD6FB58B
840C6D14EE78FC84B1BD61C526475C316066A50BB4E5B18753CB1E6E18FD08BF
00E01DB649715BBB4BF469071963E5A576DBB19F3E748799D49C30612EE279CA
DD132C551ABBDDEB4A06AEB42B939458D9DEBFA1DF92B07E300E3F5F6B8B75F6
55406ED391304EDE2330BA4C975EA8B9D4437128C12B3045BB2C9D0DF23A6D4E
E822FA23457A91624203BC9931FDDD5A83BB6C66B998AFDD35BEEFE05CE8ED74
EE7E513BBC97205FA0BAD80C3EDDB35945946E27DC968281653CAF62A6F0B386
7EDE0A050EF258A7F49F5081F1FE08D2D3DD09F60C7E4966B4FAEB0406B72F8F
F605BD06D1ECDA25BE97316CD29DE3D5E84A070772AF9A660127AD84093C95A9
938EF236F4147C250F6D7F8459AC97D82561552BCF005A05EA389DAA2721AC6E
6BFF0015EA347A3E11A5EE013E80D4E092D8B192E25D2306A9907DF8E602D08B
976210456F13FCD152FF9102718D0FC57EC5B583F3B40E5323A575E10783F79F
90EC2C2B435FD29027CD2563EF171CCD22DCB473B8173E8F9133A6D45FBB5CBC
E0CB8F686C1919BBA14602BA5474FF7E82E9C5CE62C4BD9D66F8BE7ECBC8A6F5
489B0C17900AF38B219ACF32FC9A148ABC5B96912E91FA3F498774DC2F09A3A1
E44D3C44775AAE38EAFEF8F3DFFC4936B29405AF8C03B7114CF8C6F705EA27DD
7817A5C161B5D8B503498A3906733A92966C2F11E260A5524656A9A15C8D1B97
E405C045C305C9970551CE63E45D74F8B759016B89ACC11E82553D3DF4A5BFF2
00843BEF3B3DB3C1FB882FEE876EC79521622318BB6960F7588E6392FC1CBB59
E01ADB495027386100D41B4B76E83104F4BBDBCC9F39563256509346128EBAAF
7D11ABA3DC2932E9D0E56C3A375EB881D56F270E8C77CDA90EC7FAD646EC17D6
FD0F150D6D6C486459F92347E9BDA4BCFDFD8EF64481978F32FC6C071F5F1ED3
EFBEF70FA8740DBDAE3AE4A3E7665AB3E7FCD07D218B1C37357393893A33CA9A
DC6826C8B02072A0ABF6E76320A58D587C0F29978CBB899352F7C7D9F5FD2389
B0163F45D707240C8DCA84831151D652C1E371D57B511B52A4DB8F69D76C3BBB
4782AA2E3C709E9102C9FC4C68FCDF6949852B16E2BA582B56C93306F4A89AC8
E95965A3C79C82898315CEE46A6E2308B39E90FD6AD32DFBD4E8C89A9FA5772B
D7C4CCDAD0B569C347165E8287E05176C4BD9E405AFFE33AA6E2B9476F2EF299
1878E11F38FF36D1F1D67E0A154F2ED2F3AE7941F78325CA190CBB2659BCC601
BA85B214C40A6C564C86ADF67D4754AAE8B5021D9EB12338ADB31C32E960FC7E
9B9BF26D89F808B05C2E483B9171450E4A1563777739FC42EE3624CA9754C4B6
A8B33BC05A3C7136AAA56131C3C3E2DB3D9254363A00BFB2F2B2FFC89862C080
DDD97C3713D2D2751EBCDB6B4D935084759EDDA6EAAE612BCCE43458A6735454
808004710523E45436A4568E5B64EAC7FEE09C6B193C4E6E66142EF709DD5B43
76F8DA2355A2BCA9632B90ACB9D965245EFCAD21412904F57761E450C65E13CE
8D473552FCDA484F02F53486C3659FBBC1132A2366F8776B13371D2259CFDA89
55B4CC3367F1C389CD51E7B2BCEC765248C2F863BB5A36712B44DC287DAE5C2D
BBCA73CAF31025A3FD47B8B31673B6B747BC6C90A3CD9FB434F4D12484E03E14
C9CDDE193B768EB5A9DF8F572F92BEA924DC028D183288214BA3BD18C470914C
F1D522123E627D00097377258E81C9CEB8490E32F7F6C96FC7D6D26B3226DC5D
DEBFD6680475D29DFF60701F4F7C66B61198F8066DD493031D1A58CAA5F47C93
6E6A2C452093DB4231E1B05E7DAB444167CD30D9076F46FC88E18E019B8E51E7
EEA199D39C2CDED178F63C632FF2ED52027089972BEB0644E52D859C3D96FC93
269D7952B93A2A83A34F026C39DE19590722452FD66895CADF70334FF6D7B446
F67BF70AEBF35A2AE55713097D20DC7D7B9AFC3EBCAF3321F98B2A67909EE0C1
896E95D56E7C74C2D7A847D9117591AE308EA6249E5A03EEABEEFB1ABC2BFD5F
DEBF3AD2BDD5E78B2833CE36A08EF0A9D8EEB3C43A5D5FF2E5E04CD671F797D9
5601CECD1CB4CD8A4D97BFD4D9F8809DDD97C73E082D263F7BC718B343821AD2
0575B7C1EB18CEE6EB3F8558F402910C9019348D3DC98C095C782F79B396A22C
B41880C6855C94FCC02CC2B21C06BE83AEA88DAF7297D5D3182735B36842AE49
F6F875DFB2AAE41F05B4B314BFB2B27CB52C1A2FA9E61FE835B2F8FF5AFEAC7B
D6A7653F62251D029F7F2F3CAFC7DD736BB0C487962473000849102B0745FE0B
75AC33767B7F328A8E8E537444E8FD3935060219D48D74707A3FE02203544264
88C60CE6792A625A631D4636B2687B40395531AE88840CAA741F4B1F3630EF10
C079981B1AB12F9D212615B7D1235C390776C41B2C7C0F69D4D0C42D8586C0F6
24E6534ACF7677115141CC77B190D5012DA0DE324EC54A4A49847E7FE2A82D45
522035B2875A44EF7DAFEEC6B06D7DB4B3BE25BF6556643B31245412952085C6
99EF4D7E65ADC8CE164D6138C0375E2F37692FC6772041BB732AC06C381F7B82
4F5F98F9749939BA747C43B4682F868B604FB505DD59889FC3BB5F4FEECA2A8F
28EF2935387E3210CF1A247B4C72338E0B37511CF3AB6B7EDBB237ED747AD16E
7C3D0009DB4C5C203539D1F5B72F010F93C7C4AD5B083D1CBCD6429709776F04
C4D5E4D04DAEBF5C475C7C3EB2ECD488FEC9EFB184F8A92781EA228C2F15AD9A
B1DA750513B6D68E527DFEC6C96CF09019822C2A7402CC77A43FAEBC911105DD
AB231758BD41BEE389B057A1F7D25210E43699271ACD54FB14E5CEAD55450E12
1E29408AFAD485B460BBAC04662F667CEDFF82EEA0C70E58AD2500BD037000CE
5F0E3BD78A7D4D948933F88524592F028366D8455A6D9431C05218420DD30B79
1B1D7359CEDC67F92DD483E1EBF6BD0F5DFBB48002662A05827F07BF83281CD2
FAD3727AD23D57B5B632C7BE3C1BB789C23D47946CE2355A1051090E04997FAC
866356FB00A1B25F2BC121CF9F4F5687CE3FBE729923AD54AF7684E8E036205B
149DA99B2CD2F337147B5D3884FF5C0D480E34D300EE501DD6EEC702869029C9
1DEE292022AB847F88919FCAF407C96C3AA0B2F20F09BD300B59B03B09A1E0F4
E76D7634AB97167A72810BFAD7E53CD64C97A8F65464577DDFC461E6ACEEB25C
AD1B04B9ADA70B6575ECD3E4BB1C50447C558FD565E8C78B0390D0A8325C44AC
6F52BDDE513987D5ED51662BDADADD4BA2989A38F3FE175D39CB192F7E2F52AD
4F28DE13B9765E231A9B18047663F09E30886042C59F9FF2662369BE0D9D1AE9
6EB4CC354B33828276F2264F3155D4DD61B26AC3151413AE8B600E9FC07EAB89
A3AD38B428A2F6B834AA99C2D6657E242BEBBC0D9C6CCDB639869DB9B644FA32
BFF73010E7625254A0EB74F63C285E2D52D69BEFFF6B5885F0B53FB07AB5935C
B1B851B96CD7BF88F9A3D58BB620E9F9156627EEF4B4F07CFF943A70AA730E28
3C720EED7A3B6BF6112C35C2953F4A76FC5F90AA018D5CEE6A4EE998CBD88DC5
D8A8639131EAD11B2A320338BC439CD426AF9CD9C35372E0A6B90A6A848CEE1E
283237877446DE8A3045682DCE85BE2776C854E9B465EFAA411A7F323F60824D
13F79652B119EE55207B3DC19A5F34B7841067A0B618D05A149DFA46587DA67B
A7005F5126D32C0B4926CCB9B73A8847B4EC479380641C1F340F0C99BF781BD5
C69282459F75ADA02D7ED5D348F7CB96AB7C679092147F5BF9CC0D4CB358EA58
704A8EC8929731934202D2DD6A791071EBC06C4E9E790CBA02ADC6D25BAAE274
902D92A9996B2B93CB8134FD9863DA24235781B048CE81A460D9E28DFA35856A
8A7D19918BD23074BDEA10C3DA37A73F99724821E1E756D3DE2C19930AD20C40
631420C685B7742DD1E5B287F5743B651794C8266D47A4F6907CFACB8177745E
DDF7099B6A263FF9D3EFB89B829BEDB5E3DD60F5433EE1E6728C071FC55E811B
C0B7A2F8AAF27E7E115BE85D71C3003914643B4EBEA26FE7C2418EEB63B7E393
108CADDA24C91C1963DAC019EE29BCD29A724AE4024D5B5A6A25612F7378707A
42BE4141DB6573D0A1958374569E653B273C15533EE84A7A84F3D9C5B900DDEF
EC67F64BA15C70420AED98BAA6A0ED3E1145BF16D2415221B68BFBF3F265B1D1
A1146A91079B753C8F0650589DAB1A2D1032BD4E9458C422FA2D9CD6CA9CE727
9650DBEFEFB2E348375AC634737E416DD9A2628A075415A2D6F03661719C6752
7EB25CCD9328283C9F0A171B36A2AB7CBA04422CE1EE9BCED2F9ED18B8A26187
F67A6E3EA48259DC08D6ECE0EF01BCD9EEC871AFD57FD3D52A2EA9DC4ED432F5
107AAC6C8EA201789EC66ACE7813873F5A58EADB30BCFFA3A71EF23D13FDAFE7
264285436EFF9686AEA33CBBC14A90191909AFAEA9BDCE7871D0847A5D19AE38
6456AD8C5D6D789015B2CC356F40419820938BDFFBEE6578EF6BC38C012E3041
D0437B84A777CE0B9FF029B6659B40BF3DD9AD2D9BCE76781B0672E92D31B881
EE328FEB0692AA733A3822D3CB26ED9010D76B9F9D69B5D8D2BA0F0F0470AB6C
672AB594515E77B6C2FCE677C5175FCCFF8E4E85972EB60BE12FF80FC957531B
F6647BAFD829244AF2BC290824B10C3779A1D30A3D8BE46A66C1D73A8143C8A2
4C4A470432BD989259D7456EA44AEFE84130BD4D15BB2EC8597057E4EDEBCE75
A985D0BE40F822BA1ECC9339131AD6F60C2D6475E3377D40E7A2CECFFC5CCF48
CA297980F4F0CD65865D0A2B0E285D5C1344B963C22330524564CF6C39C230A6
A9F7BD40EE901940795D0F15DE5A23420BC6DB59314AE0F2F3DC3421056677D7
1FBF913829720B6BA3BFD44765FFEE36C9C760818BB03F7FD90598C38B1C2E0C
9A9A82F9209006B45104E76E3846515C25C53DBF61FB3614B78568EF2FEB500C
2C5AF1427197EE6637F539123745CA8796560627C6CCDFA25165223FB0E43685
472CEA83AAA842CD0E120C109681827F0D782E9D225F1D15AD5AF1155422A5E4
052ED21E50BBC80F93F95F2F4AFE08768C4D32F3324E9DAE1176C7724CEE2C70
F3A203377F7D1E82A0119B35B4AEB6B72F30468065D1A2ABF1AD34324CFC9623
0B103C1BA0F0E522055846D636249FB28B7C58D1B0209ECDF1387960FB843E1A
31E4F20296F2B4608AA6E88F26AF2C70DDAF438047D9DA1E8AF5F4C16E56A03B
D0B97C1F349D3BEFAAB89187A28EF131E429251F2CF9D221C5D74FA1FBFB1C17
7AED502F9F054D68CB91DE6F3B7E0EB047051BE634D62F6F164085EB045535E4
4A6BFEE66596CF31A30BD6C429490F0CC591217AAB40D202AEB0DE062FD583FD
795AD2FD05FDD5F21E75BF0A4E8701830A19274F765773730F2EFFDE51D79FF8
D818EA9EF55710D3CC7E89BA81EE6E462B186BDFDB94FA42FBD898736BD104CA
905F33476D5A85EC996E1E166C61126E841613066945EF87E654F8A53B3C4907
DDB687A20A0BC10C4F24C3625AB14F5CF73CFFA8E8028DCC3032E43861530EEA
4F039C49B39B0B7A38F24A31CF2BBE8A4A77D330EA5034DACDEA2AE6C8D0C0CB
AF7A73BF883DD295D0E65DD4F8AF4636303DDD37A8AA4709C1A1F828B222B28B
8BDA0480B1C00698760DAAFC244F3DB97193AD0D276F35BBADB72FE01BC60AC8
1EA719E23D4761253728F298B53FB7B49E6EC7543A28AC0C066E84670AC5FCBA
597A12E36AC76AA686D2B8662E6427BE654B36CAA76F70105F375EEB758568BD
986530CBEF461C1F6F12D4426BE8AF5859BDB0E285B54A626F355093FF33E53C
5CE371379CA05C4D9E1097A3A943677452F926027BAFA13509C95EC2539CDC30
631FAAF1BE95A9980D937E8758241D75D2E39828DB2417EB437E96E2C40765C1
F1718956EA29D932625649176E425663EAB4B6461F41491D72D187945360396B
1573B9F02724729989E8BA3A465C5AC6E9A472EE1678231C3E2D85AB545573C3
B6353A0004D9E9AF5EEE5D2C2C866E00477091AF409241AE51483529FC1CD765
AF4A7801CCCFBE933F0D397789FA9905E28434CFB5D7C601FDFBAAD2925C81CF
7CC61260CF9EA5AAAD08E804F324EAA2BE793A5F959983DD75259F429A46E873
898865D560A5E0981C38DDCBE56BA3356F66D12371A6A7039306234E3A36E2C1
BAE1084A97C58DD2AA4D8CD4C7797575C9D3197EB8E2DB4227638EC8FD203BC1
BD4116F7314CA8A86BDB8A6761EB9A1A98BC97E38D2E1DCD1DCB08A9CBED24A6
CB32F03B01C727F89BCBA9751DAD82C9A22BF194362C862C253C207C44D79FF8
8B04D756FFF92BB41EE528DF025EFE066AAB60C5346E04F4E8EF3F913BB8FBEC
964E544A0109C34A491A529FF47B4D8D52A10182F1415DF6138E012BBB929CF4
93ED94A2C809F2077DB0E7D7B1306E2A896F937E82E84D5CAE62C1D10BEF7FE7
6C65DBC23F439F89099E19AC2E7315A578F46F55748EE2E49EE7FB26030C54D6
136579C405F0D7D5B0048F3BB0AAEE401751341EA0687E7E2B4033DEA2D98CA6
712ED2358F6139EFEC4BEB40BA845BFB87459C43BFB93E8B4F1AA185F7EE1F34
525DEF7B7C97FCAB3AFC1ED1B3C02CE749AAE3DDCFC9F4D5EBB242824F9D958C
F443FB1CD3FC972FEBCE8B9039B5673F1930BE8F0CA182C183E7794EC568C630
276FBBDE9DFC03B058E005CDA3B005F280B934BDDF5936B95A2DB4DA981DF777
97008E068A6F65DBA047C12D94CF748BD7879B7D3FAA6EA120D38AF77FC6758D
AF59DFAB8E7A2F3515B9DD8B8DD2B4F5A441CAD0DBB987FE354466065D5350A4
8FD8FB914C89FDB2257A8DFE35E2DAA5C7696F6360A1D682B61EBA6BA52A47E3
8B7D5911590EEAEDE7A87187C4EA0272D204CF9B76B27F3638B59766AC9E1452
7F1F0EB558AC9BDC806BEFC45E4A9F87C9B531DD200C97ECCEF062B818A87DCF
3F7DB539B907E458D76C8C56AFFA26E738905BEFFE2C8C9BE659C01810E27C04
BE42A419294EA3C11A51D71CA242329932AF7FB77AA7137169D7EC9AEF519966
1D1AE8F32A950F09D5F680771CD1EE29432E1514664240BAC8EB7C6A9DA99DB7
2B0ECE7B6B8D6A20FCFEFE0058BC460C0874A7D7816B2FB3BBAF9C3248C43718
2DB6556DBDDF67762D9FCF0E09D40625FF5A8F94FFCFC03AC841972F9E9EF81A
D04AD862D3BFF8378C70E677D044C15CED88B017859A338B4394A30CBAF41C3C
1D02D00993A2AA1C4269DC4FE6E1EFA5E284FB78DFB56B17CE548F2CAC28C7E9
D79AD417A7B9E8FF71508D36C1825454D0ACA65E0025E122F750705F0C935590
8D8383B58E99A65017B0A1439A209D4B99C4D5559AC0DD717A8FBED9A0ECCF67
52519C6C8C4D5769B059AED17AD34284DD73957F0674FBA3D5E2A5881A035618
310E953DCFF572B8349160206365DB141F9FB21ABF817F508E689ED6F7CEC395
0834600BFF71A02B78344F284981C852B75DF8C6581ABEC7F9D50690CD31FF1C
7AD8AD47F4E79C6E00BA1411E2CBC8223D20EDAAD93A0740104267F5C905B1DC
469A1578FCCDAE0989ADDE7B9AC5EB9E1B5056C33F445A59047F31D72EE25D82
272470482F837DB58E117C3EC31B965624BFF28840ABA46BD8A0D11DCC809290
7B4793700DD1F6F09BE40CB0F5806BC906568AC2211318A8766627F8C830CB99
A4C0D1CB03D4A1C207D44489310CA241E94EEF8D43542B784D28E895B5D1870F
B5D72818248EBAAA9F9B47B994857E2AD41120DB87378ACF4A94939312558D75
2D3749DCCA66BDBB3E2785C1D081D1D3A6F18B72AD4B56ACFB85A738EA32F83A
96F021B47589AAD72ED5C7F873C681995F2DD61EF48855BC4A31771A554341EC
242D44F6B3AEF58089AC0C495A2297F5A454645FAF20A3AC49696C5967AB5916
C3C50532EB80109887D90BA36086011218D8E4982719194B6570081BE91C2190
ED061389964AEF9412A12C48E97F228A6EA40AD3F2BFB7606DC0F40AE7B8E82F
B9A7F88FB3BA8CD0BF99C91FDE78ACD0F7610091B3F0CC1BA054F52269EB58A3
32EFDF0E03AA4EAFE33E3CCE1C24A0A7A8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600
(Guia de trabajos practicos - Parte 3.dvi)
@start /Fa 100[154 155[{ enclmts1 ReEncodeFont }1 143.462
/LMRoman12-Bold rf /Fb 69[41 49[76 136[{ enclmts1 ReEncodeFont }2
99.6264 /LMRoman12-Regular rf /Fc 100[107 155[{ enclmts1 ReEncodeFont }
1 99.6264 /LMRoman12-Bold rf /Fd 141[46 2[56 4[34 31
3[51 1[50 62 54 27[74 11[56 56 56 56 56 56 56 56 56 56
48[{ enclmec ReEncodeFont }19 99.6264 /LMRoman12-Bold
rf /Fe 139[63 64 66 2[81 90 3[49 45 3[74 1[72 29[106
1[117 9[81 81 81 81 81 81 81 81 81 81 48[{ enclmec ReEncodeFont }21
143.462 /LMRoman12-Bold rf /Ff 3[54 1[54 6[49 5[27 3[43
7[49 19[35 82[43 51 51 1[51 54 38 38 38 51 54 49 54 81
27 1[30 27 54 49 30 43 54 43 54 49 27 10[73 70 54 72
1[66 76 73 1[61 1[50 35 73 2[66 75 70 1[73 5[27 27 49
49 49 49 49 49 49 49 49 49 1[27 33 27 2[38 38 27 2[49
18[46 46 16[{ enclmec ReEncodeFont }68 99.6264 /LMRoman12-Regular
rf /Fg 133[52 62 3[65 2[46 2[59 65 98 3[33 7[59 14[86
3[88 3[60 23[59 1[59 3[33 44[{ enclmec ReEncodeFont }15
119.552 /LMRoman12-Regular rf /Fh 69[66 186[{ enclmts1 ReEncodeFont }1
172.188 /LMRoman17-Regular rf /Fi 135[83 3[61 4[79 2[43
2[43 5[70 1[79 12[115 1[117 1[108 124 119 3[81 56 3[108
1[115 113 119 13[79 9[61 61 40[{ enclmec ReEncodeFont }21
172.188 /LMRoman17-Regular rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-128 109 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -128 109 a -128 109 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -128 109 a -128 109
a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -128 109 a -128 109 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -128 109 a 0 TeXcolorgray 0 TeXcolorgray
1027 611 a Fi(TRABAJO)53 b(PRA)l(CTICO)1722 818 y(N)p
Fh(\272)g Fi(3)1378 1026 y(\(Ciclo)f(Exacto\))1538 1322
y Fg(Norman)37 b(R)m(uiz)1444 1555 y(Jan)m(uary)g(22,)h(2020)p
0 TeXcolorgray 1856 5956 a Ff(1)p 0 TeXcolorgray eop
end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray -128
-95 4016 5 v 0 TeXcolorgray -128 208 a Fe(Con)l(ten)l(ts)-128
427 y Fd(1)91 b(Ejercicio)37 b Fc(\233)p Fd(1)3190 b(3)-128
645 y(2)91 b(Ejercicio)37 b Fc(\233)p Fd(2)3190 b(4)-128
863 y(3)91 b(Ejercicio)37 b Fc(\233)p Fd(3)3190 b(5)-128
1081 y(4)91 b(Ejercicio)37 b Fc(\233)p Fd(4)3190 b(6)-128
1299 y(5)91 b(Ejercicio)37 b Fc(\233)p Fd(5)3190 b(7)-128
1517 y(6)91 b(Ejercicio)37 b Fc(\233)p Fd(6)3190 b(8)-128
1735 y(7)91 b(Ejercicio)37 b Fc(\233)p Fd(7)3190 b(9)-128
1953 y(8)91 b(Ejercicio)37 b Fc(\233)p Fd(8)3134 b(10)-128
2171 y(9)91 b(Ejercicio)37 b Fc(\233)p Fd(9)3134 b(11)-128
2389 y(10)35 b(Ejercicio)i Fc(\233)p Fd(10)3078 b(12)-128
2607 y(11)35 b(Ejercicio)i Fc(\233)p Fd(11)3078 b(13)-128
2825 y(12)35 b(Ejercicio)i Fc(\233)p Fd(12)3078 b(14)-128
3043 y(13)35 b(Ejercicio)i Fc(\233)p Fd(13)3078 b(15)-128
3260 y(14)35 b(Ejercicio)i Fc(\233)p Fd(14)3078 b(16)-128
3478 y(15)35 b(Ejercicio)i Fc(\233)p Fd(15)3078 b(17)-128
3696 y(16)35 b(Ejercicio)i Fc(\233)p Fd(16)3078 b(18)-128
3914 y(17)35 b(Ejercicio)i Fc(\233)p Fd(17)3078 b(19)-128
4132 y(18)35 b(Ejercicio)i Fc(\233)p Fd(18)3078 b(20)-128
4350 y(19)35 b(Ejercicio)i Fc(\233)p Fd(19)3078 b(21)-128
4568 y(20)35 b(Ejercicio)i Fc(\233)p Fd(20)3078 b(22)-128
4786 y(21)35 b(Ejercicio)i Fc(\233)p Fd(21)3078 b(23)-128
5004 y(22)35 b(Ejercicio)i Fc(\233)p Fd(22)3078 b(24)-128
5222 y(23)35 b(Ejercicio)i Fc(\233)p Fd(23)3078 b(26)-128
5440 y(24)35 b(Ejercicio)i Fc(\233)p Fd(24)3078 b(28)-128
5658 y(25)35 b(Ejercicio)i Fc(\233)p Fd(25)3078 b(30)p
0 TeXcolorgray -128 5836 V -128 5956 a Ff(Jan)m(uary)34
b(22,)e(2020)1255 b(2)1413 b(Norman)32 b(R)m(uiz)p 0
TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 2287
-114 a Ff(T)-8 b(raba)s(jo)31 b(Practico)i(N)p Fb(\272)g
Ff(3)f(\(Ciclo)i(Exacto\))p -128 -74 4016 5 v 0 TeXcolorgray
-128 208 a Fe(1)162 b(Ejercicio)52 b Fa(\233)p Fe(1)109
427 y Ff(Hacer)42 b(un)h(programa)e(para)h(mostrar)g(p)s(or)g(pan)m
(talla)g(los)g(n)m(\372meros)i(del)e(1)g(al)g(10.)71
b(El)43 b(usuario)f(no)-128 548 y(ingresar\341)33 b(NAD)m(A)g(en)g
(este)h(programa.)p 0 TeXcolorgray -128 5836 V -128 5956
a(Jan)m(uary)g(22,)e(2020)1255 b(3)1413 b(Norman)32 b(R)m(uiz)p
0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 TeXcolorgray -128
-74 4016 5 v 0 TeXcolorgray -128 229 a Fe(2)162 b(Ejercicio)52
b Fa(\233)p Fe(2)109 448 y Ff(Hacer)38 b(un)g(programa)f(para)g
(mostrar)h(p)s(or)f(pan)m(talla)h(los)g(n)m(\372meros)h(del)f(20)f(al)h
(1)f(\(en)h(orden)g(decre-)-128 568 y(cien)m(te\).)45
b(El)33 b(usuario)g(no)g(ingresar\341)g(NAD)m(A)f(en)h(este)h
(programa.)p 0 TeXcolorgray -128 5857 V -128 5977 a(Jan)m(uary)g(22,)e
(2020)1255 b(4)1413 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray
eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 TeXcolorgray 2287
-114 a Ff(T)-8 b(raba)s(jo)31 b(Practico)i(N)p Fb(\272)g
Ff(3)f(\(Ciclo)i(Exacto\))p -128 -74 4016 5 v 0 TeXcolorgray
-128 229 a Fe(3)162 b(Ejercicio)52 b Fa(\233)p Fe(3)109
448 y Ff(Hacer)24 b(un)g(programa)f(para)g(que)i(el)f(usuario)g
(ingrese)h(un)f(n)m(\372mero)h(p)s(ositiv)m(o)f(y)g(que)h(luego)f(se)g
(m)m(uestren)-128 568 y(p)s(or)39 b(pan)m(talla)h(los)f(n)m(\372meros)i
(en)m(tre)f(el)g(1)f(y)g(el)h(n)m(\372mero)g(ingresado)g(p)s(or)f(el)h
(usuario.)64 b(P)m(or)39 b(ejemplo,)j(si)e(el)-128 689
y(usuario)33 b(ingresa)h(15,)e(se)h(mostrar\341n)g(los)g(n)m(\372meros)
h(en)m(tre)f(el)g(1)f(y)h(el)g(15.)p 0 TeXcolorgray -128
5857 V -128 5977 a(Jan)m(uary)h(22,)e(2020)1255 b(5)1413
b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray 0 TeXcolorgray -128
-74 4016 5 v 0 TeXcolorgray -128 229 a Fe(4)162 b(Ejercicio)52
b Fa(\233)p Fe(4)109 448 y Ff(Hacer)31 b(un)f(programa)g(para)g(que)i
(el)e(usuario)h(ingrese)h(dos)e(n)m(\372meros)i(y)f(luego)g(el)g
(programa)e(m)m(uestre)-128 568 y(p)s(or)e(pan)m(talla)h(los)f(n)m
(\372meros)i(en)m(tre)f(el)g(menor)f(y)h(el)g(ma)m(y)m(or)g(de)g(am)m
(b)s(os.)42 b(P)m(or)27 b(ejemplo,)j(si)d(el)h(usuario)g(ingresa)-128
689 y(3)j(y)h(15,)f(se)h(mostrar\341n)g(los)f(n)m(\372meros)i(en)m(tre)
g(el)e(3)g(y)h(el)g(15;)f(y)h(si)g(el)f(usuario)h(ingresa)g(25)f(y)h
(8,)f(se)h(mostrar\341n)-128 809 y(los)h(n)m(\372meros)h(en)m(tre)g(el)
f(8)f(y)h(el)g(25)f(\(siempre)i(se)g(emiten)f(en)h(orden)f(crecien)m
(te\).)p 0 TeXcolorgray -128 5857 V -128 5977 a(Jan)m(uary)h(22,)e
(2020)1255 b(6)1413 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray
eop end
%%Page: 7 7
TeXDict begin 7 6 bop 0 TeXcolorgray 0 TeXcolorgray 2287
-114 a Ff(T)-8 b(raba)s(jo)31 b(Practico)i(N)p Fb(\272)g
Ff(3)f(\(Ciclo)i(Exacto\))p -128 -74 4016 5 v 0 TeXcolorgray
-128 229 a Fe(5)162 b(Ejercicio)52 b Fa(\233)p Fe(5)109
448 y Ff(Hacer)39 b(un)g(programa)f(para)g(que)i(el)f(usuario)g
(ingrese)h(p)s(or)e(teclado)i(25)e(n)m(\372meros)i(y)f(que)h(se)f(v)-5
b(a)m(y)m(an)-128 568 y(informando)43 b(uno)f(p)s(or)f(uno)i(aquellos)g
(que)g(son)g(ma)m(y)m(ores)g(o)f(iguales)h(a)f(5.)72
b(A)m(tenci\363n:)64 b(Se)42 b(pide)h(que)g(se)-128 689
y(informe)33 b(cuales)h(\(y)f(no)g(cuan)m(tos\))g(son)g(ma)m(y)m(ores)h
(que)g(5.)p 0 TeXcolorgray -128 5857 V -128 5977 a(Jan)m(uary)g(22,)e
(2020)1255 b(7)1413 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray
eop end
%%Page: 8 8
TeXDict begin 8 7 bop 0 TeXcolorgray 0 TeXcolorgray -128
-74 4016 5 v 0 TeXcolorgray -128 229 a Fe(6)162 b(Ejercicio)52
b Fa(\233)p Fe(6)109 448 y Ff(Hacer)34 b(un)f(programa)g(para)g(que)i
(el)f(usuario)g(ingrese)g(p)s(or)f(teclado)h(25)f(n)m(\372meros)i(y)f
(que)g(se)h(informe)-128 568 y(luego)e(cuan)m(tos)h(de)f(esos)g(25)f
(son)h(ma)m(y)m(ores)i(o)d(iguales)h(a)f(5.)p 0 TeXcolorgray
-128 5857 V -128 5977 a(Jan)m(uary)i(22,)e(2020)1255
b(8)1413 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop end
%%Page: 9 9
TeXDict begin 9 8 bop 0 TeXcolorgray 0 TeXcolorgray 2287
-114 a Ff(T)-8 b(raba)s(jo)31 b(Practico)i(N)p Fb(\272)g
Ff(3)f(\(Ciclo)i(Exacto\))p -128 -74 4016 5 v 0 TeXcolorgray
-128 229 a Fe(7)162 b(Ejercicio)52 b Fa(\233)p Fe(7)109
448 y Ff(Hacer)34 b(un)h(programa)e(para)h(ingresar)g(p)s(or)g(teclado)
g(una)g(lista)h(de)f(10)g(n)m(\372meros,)i(luego)e(determinar)-128
568 y(e)f(informar)g(cuan)m(tos)g(son)g(p)s(ositiv)m(os,)h(cuan)m(tos)g
(son)f(negativ)m(os,)g(y)g(cuan)m(tos)h(iguales)f(a)f(cero.)p
0 TeXcolorgray -128 5857 V -128 5977 a(Jan)m(uary)i(22,)e(2020)1255
b(9)1413 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop end
%%Page: 10 10
TeXDict begin 10 9 bop 0 TeXcolorgray 0 TeXcolorgray
-128 -74 4016 5 v 0 TeXcolorgray -128 229 a Fe(8)162
b(Ejercicio)52 b Fa(\233)p Fe(8)109 448 y Ff(Hacer)31
b(un)g(programa)f(para)g(ingresar)h(p)s(or)f(teclado)h(20)f(n)m
(\372meros,)i(luego)f(determinar)h(e)e(informar)h(el)-128
568 y(m\341ximo.)45 b(Sup)s(oner)33 b(que)g(los)g(v)-5
b(alores)33 b(de)g(la)g(lista)f(son)h(to)s(dos)g(p)s(ositiv)m(os.)p
0 TeXcolorgray -128 5857 V -128 5977 a(Jan)m(uary)h(22,)e(2020)1231
b(10)1388 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop
end
%%Page: 11 11
TeXDict begin 11 10 bop 0 TeXcolorgray 0 TeXcolorgray
2287 -114 a Ff(T)-8 b(raba)s(jo)31 b(Practico)i(N)p Fb(\272)g
Ff(3)f(\(Ciclo)i(Exacto\))p -128 -74 4016 5 v 0 TeXcolorgray
-128 229 a Fe(9)162 b(Ejercicio)52 b Fa(\233)p Fe(9)109
448 y Ff(Hacer)44 b(un)h(programa)e(para)h(ingresar)h(p)s(or)e(teclado)
i(10)e(n)m(\372meros)j(en)m(teros,)i(luego)d(determinar)g(e)-128
568 y(informar)25 b(el)h(m\341ximo)f(y)h(su)f(p)s(osici\363n.)42
b(Sup)s(oner)25 b(que)h(los)g(v)-5 b(alores)25 b(de)h(la)e(lista)i
(pueden)g(ser)g(to)s(dos)f(p)s(ositiv)m(os,)-128 689
y(to)s(dos)33 b(negativ)m(os,)h(ceros,)f(o)f(cualquier)i(com)m
(binaci\363n.)p 0 TeXcolorgray -128 5857 V -128 5977
a(Jan)m(uary)g(22,)e(2020)1231 b(11)1388 b(Norman)32
b(R)m(uiz)p 0 TeXcolorgray eop end
%%Page: 12 12
TeXDict begin 12 11 bop 0 TeXcolorgray 0 TeXcolorgray
-128 -74 4016 5 v 0 TeXcolorgray -128 229 a Fe(10)161
b(Ejercicio)53 b Fa(\233)p Fe(10)109 448 y Ff(Hacer)39
b(un)g(programa)f(para)h(ingresar)g(p)s(or)g(teclado)g(20)f(n)m
(\372meros,)k(luego)d(determinar)h(e)f(informar)-128
568 y(el)e(m\341ximo)g(y)g(el)f(m\355nimo.)55 b(Sup)s(oner)37
b(que)g(los)g(v)-5 b(alores)36 b(de)h(la)f(lista)g(pueden)i(ser)f(to)s
(dos)f(p)s(ositiv)m(os,)i(to)s(dos)-128 689 y(negativ)m(os,)c(ceros,)g
(o)e(cualquier)i(com)m(binaci\363n.)p 0 TeXcolorgray
-128 5857 V -128 5977 a(Jan)m(uary)g(22,)e(2020)1231
b(12)1388 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop
end
%%Page: 13 13
TeXDict begin 13 12 bop 0 TeXcolorgray 0 TeXcolorgray
2287 -114 a Ff(T)-8 b(raba)s(jo)31 b(Practico)i(N)p Fb(\272)g
Ff(3)f(\(Ciclo)i(Exacto\))p -128 -74 4016 5 v 0 TeXcolorgray
-128 229 a Fe(11)161 b(Ejercicio)53 b Fa(\233)p Fe(11)145
448 y Ff(Hacer)36 b(un)g(programa)g(para)f(ingresar)i(p)s(or)e(teclado)
h(20)g(n)m(\372meros,)i(luego)e(determinar)h(e)f(informar)-128
568 y(el)d(m\341ximo)h(de)f(los)g(negativ)m(os)g(y)g(el)g(m\355nimo)h
(de)f(los)f(p)s(ositiv)m(os.)45 b(Resolv)m(erlo)34 b(de)f(dos)g
(maneras:)p 0 TeXcolorgray -8 772 a Fb(\210)p 0 TeXcolorgray
48 w Fd(a)r Ff(\))g(Sup)s(oner)h(que)f(en)g(la)g(lista)f(ha)m(y)i(n)m
(\372meros)g(p)s(ositiv)m(os,)g(negativ)m(os)f(y)g(ceros.)p
0 TeXcolorgray -8 975 a Fb(\210)p 0 TeXcolorgray 48 w
Fd(b)p Ff(\))38 b(Sup)s(oner)g(que)g(en)g(lista)g(p)s(o)s(dr\355a)f(no)
g(hab)s(er)g(n)m(\372meros)i(p)s(ositiv)m(os)g(o)e(p)s(o)s(dr\355a)g
(no)g(hab)s(er)h(n)m(\372meros)116 1096 y(negativ)m(os,)c(en)f(ese)h
(caso)f(deb)s(e)g(indicarse)h(tal)e(situaci\363n)i(con)f(un)g(cartel)g
(aclaratorio.)p 0 TeXcolorgray -128 5857 V -128 5977
a(Jan)m(uary)h(22,)e(2020)1231 b(13)1388 b(Norman)32
b(R)m(uiz)p 0 TeXcolorgray eop end
%%Page: 14 14
TeXDict begin 14 13 bop 0 TeXcolorgray 0 TeXcolorgray
-128 -74 4016 5 v 0 TeXcolorgray -128 229 a Fe(12)161
b(Ejercicio)53 b Fa(\233)p Fe(12)109 448 y Ff(Hacer)37
b(un)h(programa)f(para)g(ingresar)g(un)h(v)-5 b(alor)37
b(que)h(indica)g(la)f(can)m(tidad)h(de)g(n)m(\372meros)h(que)f(com-)
-128 568 y(p)s(onen)k(una)g(lista)g(y)g(luego)f(solicitar)h(se)h
(ingresen)g(esos)f(N)g(n)m(\372meros.)72 b(Se)42 b(pide)g(informar)f
(cuan)m(tos)i(son)-128 689 y(p)s(ositiv)m(os.)-128 809
y(P)m(or)g(ejemplo,)i(si)d(se)h(ingresa)f(el)h(v)-5 b(alor)41
b(5)h(como)g(can)m(tidad)h(de)f(n)m(\372meros,)k(en)m(tonces)e(el)e
(programa)f(deb)s(e)-128 930 y(solicitar)34 b(5)e(n)m(\372meros)i(y)f
(con)m(tar)g(cuan)m(tos)g(son)g(p)s(ositiv)m(os.)p 0
TeXcolorgray -128 5857 V -128 5977 a(Jan)m(uary)h(22,)e(2020)1231
b(14)1388 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop
end
%%Page: 15 15
TeXDict begin 15 14 bop 0 TeXcolorgray 0 TeXcolorgray
2287 -114 a Ff(T)-8 b(raba)s(jo)31 b(Practico)i(N)p Fb(\272)g
Ff(3)f(\(Ciclo)i(Exacto\))p -128 -74 4016 5 v 0 TeXcolorgray
-128 229 a Fe(13)161 b(Ejercicio)53 b Fa(\233)p Fe(13)139
448 y Ff(Hacer)32 b(un)f(programa)f(para)g(ingresar)i(5)e(n)m
(\372meros,)j(luego)e(informar)f(los)h(2)g(ma)m(y)m(ores)h(v)-5
b(alores)31 b(ingre-)-128 568 y(sados,)j(aclarando)e(cual)h(es)g(el)g
(m\341ximo)h(y)f(cual)g(el)g(que)g(le)g(sigue.)-128 689
y(P)m(or)g(ejemplo)h(si)f(la)f(lista)h(ingresada)g(es)h(10,)e(8)g(,12,)
g(14)g(,3)h(el)g(resultado)g(ser\341)g(14)f(y)h(12.)-128
809 y(A)m(tenci\363n:)45 b(si)33 b(la)g(lista)g(ingresada)g(es)g(14,)f
(8)h(,12,)f(14)g(,3)g(el)h(resultado)g(ser\341)h(14)e(y)h(14.)-128
930 y(Resolv)m(erlo)h(de)f(dos)g(maneras:)p 0 TeXcolorgray
-8 1133 a Fb(\210)p 0 TeXcolorgray 48 w Fd(a)r Ff(\))g(Sup)s(oner)h
(que)f(los)g(5)f(n)m(\372meros)i(de)f(la)g(lista)g(son)g(to)s(dos)f(p)s
(ositiv)m(os.)p 0 TeXcolorgray -8 1336 a Fb(\210)p 0
TeXcolorgray 48 w Fd(b)p Ff(\))53 b(Sup)s(oner)f(que)h(los)g(5)e(n)m
(\372meros)j(pueden)f(ser)g(to)s(dos)f(p)s(ositiv)m(os,)58
b(to)s(dos)52 b(negativ)m(os,)58 b(ceros)53 b(o)116 1457
y(cualquier)34 b(com)m(binaci\363n)g(de)f(los)g(an)m(teriores.)p
0 TeXcolorgray -128 5857 V -128 5977 a(Jan)m(uary)h(22,)e(2020)1231
b(15)1388 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop
end
%%Page: 16 16
TeXDict begin 16 15 bop 0 TeXcolorgray 0 TeXcolorgray
-128 -74 4016 5 v 0 TeXcolorgray -128 229 a Fe(14)161
b(Ejercicio)53 b Fa(\233)p Fe(14)149 448 y Ff(Hacer)41
b(un)g(programa)f(para)g(ingresar)i(p)s(or)e(teclado)h(un)g(n)m
(\372mero)g(sup)s(erior)h(o)e(igual)g(a)h(1)f(y)h(luego)-128
568 y(informar)33 b(si)g(el)g(mismo)g(es)h(un)f(n)m(\372mero)g(primo.)p
0 TeXcolorgray -128 5857 V -128 5977 a(Jan)m(uary)h(22,)e(2020)1231
b(16)1388 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop
end
%%Page: 17 17
TeXDict begin 17 16 bop 0 TeXcolorgray 0 TeXcolorgray
2287 -114 a Ff(T)-8 b(raba)s(jo)31 b(Practico)i(N)p Fb(\272)g
Ff(3)f(\(Ciclo)i(Exacto\))p -128 -74 4016 5 v 0 TeXcolorgray
-128 229 a Fe(15)161 b(Ejercicio)53 b Fa(\233)p Fe(15)140
448 y Ff(Hacer)32 b(un)g(programa)f(para)h(leer)g(tres)g(n)m(\372meros)
h(diferen)m(tes)h(y)e(determinar)h(e)f(informar)f(el)h(n)m(\372mero)
-128 568 y(del)i(medio,)f(es)h(decir)g(el)f(que)h(no)e(es)i(ni)f(ma)m
(y)m(or)g(ni)g(menor.)45 b(Sup)s(oner)33 b(que)h(los)f(3)g(n)m
(\372meros)h(ingresados)g(son)-128 689 y(siempre)h(distin)m(tos.)45
b(Ejemplo,)33 b(si)g(se)h(ingresan)f(6,)f(10,)g(8,)h(se)g(emitir\341)g
(8.)p 0 TeXcolorgray -128 5857 V -128 5977 a(Jan)m(uary)h(22,)e(2020)
1231 b(17)1388 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray
eop end
%%Page: 18 18
TeXDict begin 18 17 bop 0 TeXcolorgray 0 TeXcolorgray
-128 -74 4016 5 v 0 TeXcolorgray -128 229 a Fe(16)161
b(Ejercicio)53 b Fa(\233)p Fe(16)109 448 y Ff(Hacer)30
b(un)g(programa)f(para)h(ingresar)g(una)g(lista)g(de)g(20)g(n)m
(\372meros)h(y)f(luego)g(informar)g(si)g(to)s(dos)f(est\341n)-128
568 y(ordenados)34 b(en)f(forma)f(crecien)m(te.)45 b(P)m(or)33
b(ejemplo)h(si)f(la)f(lista)h(fuera:)-128 689 y(1,)g(5,)f(7,)h
(15,.......................120)g(se)h(emitir\341)f(un)g(cartel)g(que)g
(diga)g(\020Conjun)m(to)g(Ordenado\021)-128 809 y(3,)g(1,)f(8,)h(0,)f
(-3.......................15)i(se)f(emitir\341)g(un)g(cartel)g(que)g
(diga)g(\020Conjun)m(to)g(No)f(Ordenado\021)p 0 TeXcolorgray
-128 5857 V -128 5977 a(Jan)m(uary)i(22,)e(2020)1231
b(18)1388 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop
end
%%Page: 19 19
TeXDict begin 19 18 bop 0 TeXcolorgray 0 TeXcolorgray
2287 -114 a Ff(T)-8 b(raba)s(jo)31 b(Practico)i(N)p Fb(\272)g
Ff(3)f(\(Ciclo)i(Exacto\))p -128 -74 4016 5 v 0 TeXcolorgray
-128 229 a Fe(17)161 b(Ejercicio)53 b Fa(\233)p Fe(17)109
448 y Ff(Dada)29 b(una)i(lista)f(de)h(7)f(n)m(\372meros)i(informar)e
(cual)h(fue)g(la)f(ubicaci\363n)h(del)g(primer)g(y)g(segundo)g(n)m
(\372mero)-128 568 y(impar)i(ingresado.)-128 689 y(P)m(or)g(ejemplo)h
(8,4,5,6,9,5,7)d(se)j(informa)e(3)p Fb(\272)g Ff(y)h(5)p
Fb(\272)f Ff(p)s(osici\363n.)p 0 TeXcolorgray -128 5857
V -128 5977 a(Jan)m(uary)i(22,)e(2020)1231 b(19)1388
b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop end
%%Page: 20 20
TeXDict begin 20 19 bop 0 TeXcolorgray 0 TeXcolorgray
-128 -74 4016 5 v 0 TeXcolorgray -128 229 a Fe(18)161
b(Ejercicio)53 b Fa(\233)p Fe(18)109 448 y Ff(Dada)34
b(una)g(lista)h(de)h(8)e(n)m(\372meros)i(informar)f(cual)g(fue)g(la)f
(ubicaci\363n)i(del)f(primer)h(y)f(\372ltimo)g(n)m(\372mero)-128
568 y(impar)e(ingresado.)-128 689 y(P)m(or)g(ejemplo)h(8,4,5,6,9,5,7,6)
d(se)i(informa)g(3)p Fb(\272)f Ff(y)h(7)p Fb(\272)f Ff(p)s(osici\363n.)
p 0 TeXcolorgray -128 5857 V -128 5977 a(Jan)m(uary)i(22,)e(2020)1231
b(20)1388 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop
end
%%Page: 21 21
TeXDict begin 21 20 bop 0 TeXcolorgray 0 TeXcolorgray
2287 -114 a Ff(T)-8 b(raba)s(jo)31 b(Practico)i(N)p Fb(\272)g
Ff(3)f(\(Ciclo)i(Exacto\))p -128 -74 4016 5 v 0 TeXcolorgray
-128 229 a Fe(19)161 b(Ejercicio)53 b Fa(\233)p Fe(19)109
448 y Ff(Dada)28 b(una)i(lista)g(de)g(8)f(n)m(\372meros)i(informar)f
(el)g(1)p Fb(\272)f Ff(par)g(ingresado)i(y)f(el)g(\372ltimo)g(de)g(los)
f(nros.)43 b(primos.)-128 568 y(P)m(or)33 b(ejemplo)h
(7,4,5,6,9,13,10,6)d(se)i(informa)f(4)h(y)g(13.)-128
689 y(P)m(or)38 b(ejemplo)g(9,7,5,21,9,13,15,6)d(se)i(informa)g(6)g(y)g
(13)g(\(en)g(este)h(caso)g(el)f(primer)h(par)f(apareci\363)g
(despu\351s)-128 809 y(que)d(el)f(\372ltimo)g(primo\))p
0 TeXcolorgray -128 5857 V -128 5977 a(Jan)m(uary)h(22,)e(2020)1231
b(21)1388 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop
end
%%Page: 22 22
TeXDict begin 22 21 bop 0 TeXcolorgray 0 TeXcolorgray
-128 -74 4016 5 v 0 TeXcolorgray -128 229 a Fe(20)161
b(Ejercicio)53 b Fa(\233)p Fe(20)109 448 y Ff(Hacer)36
b(un)g(programa)f(para)g(solicitar)h(el)g(ingreso)g(de)g(10)f(ternas)h
(de)g(n)m(\372meros)h(en)m(teros)g(p)s(ositiv)m(os)g(e)-128
568 y(ir)c(mostrando)g(para)f(cada)h(una)f(de)h(las)g(ternas)g(cual)g
(es)h(el)f(ma)m(y)m(or)g(n)m(\372mero.)p 0 TeXcolorgray
-128 5857 V -128 5977 a(Jan)m(uary)h(22,)e(2020)1231
b(22)1388 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop
end
%%Page: 23 23
TeXDict begin 23 22 bop 0 TeXcolorgray 0 TeXcolorgray
2287 -114 a Ff(T)-8 b(raba)s(jo)31 b(Practico)i(N)p Fb(\272)g
Ff(3)f(\(Ciclo)i(Exacto\))p -128 -74 4016 5 v 0 TeXcolorgray
-128 229 a Fe(21)161 b(Ejercicio)53 b Fa(\233)p Fe(21)109
448 y Ff(Hacer)35 b(un)h(programa)e(para)h(ingresar)h(p)s(or)f(teclado)
g(una)g(lista)h(de)g(10)e(n)m(\372meros.)53 b(Se)36 b(pide)f(con)m(tar)
h(e)-128 568 y(informar)c(la)f(can)m(tidad)h(de)g(pares)g(p)s(ositiv)m
(os)h(consecutiv)m(os)h(cuy)m(a)f(diferencia)f(absoluta)g(sea)g(ma)m(y)
m(or)g(que)g(5.)-128 689 y(Ejemplo:)45 b(12,)32 b(-3,)g(4,)g(16,)g(8,)h
(-3,)f(-5,)g(8,)g(10,)g(16.)-128 809 y(En)j(esta)g(lista)f(existen)i(3)
e(pares)h(que)h(cumplen)f(esa)g(condici\363n:)48 b(\(4-16\))33
b(\(16-8\))g(\(10-16\),)g(p)s(or)h(lo)g(tan)m(to)g(el)-128
930 y(programa)e(emitir\341)h(un)g(3)g(como)f(resultado.)-128
1050 y(Se)i(sugiere)f(consultar)g(el)g(ejercicio)h(7)e(del)i(TP)f(2)f
(referido)h(a)f(diferencia)i(absoluta.)p 0 TeXcolorgray
-128 5857 V -128 5977 a(Jan)m(uary)g(22,)e(2020)1231
b(23)1388 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop
end
%%Page: 24 24
TeXDict begin 24 23 bop 0 TeXcolorgray 0 TeXcolorgray
-128 -74 4016 5 v 0 TeXcolorgray -128 229 a Fe(22)161
b(Ejercicio)53 b Fa(\233)p Fe(22)109 448 y Ff(Hacer)31
b(un)g(programa)f(para)g(ingresar)h(p)s(or)f(teclado)h(el)g(nom)m(bre,)
h(sueldo)g(y)f(la)f(an)m(tig\374edad)i(de)f(los)g(30)-128
568 y(empleados)j(de)g(una)e(empresa.)45 b(Cada)33 b(registro)g
(est\341)g(compuesto)h(p)s(or)e(los)h(siguien)m(tes)h(datos:)p
0 TeXcolorgray -8 772 a Fb(\210)p 0 TeXcolorgray 48 w
Ff(N\372mero)g(del)f(empleado)p 0 TeXcolorgray -8 975
a Fb(\210)p 0 TeXcolorgray 48 w Ff(Sueldo)p 0 TeXcolorgray
-8 1179 a Fb(\210)p 0 TeXcolorgray 48 w Ff(An)m(tig\374edad)-128
1382 y(Se)h(pide)f(determinar)g(e)g(informar:)p 0 TeXcolorgray
-8 1585 a Fb(\210)p 0 TeXcolorgray 48 w Fd(a)r Ff(\))g(Cual)g(es)h(el)f
(n)m(\372mero)g(del)h(empleado)f(con)g(ma)m(y)m(or)g(sueldo)h(y)f(cual)
g(es)g(su)g(an)m(tig\374edad.)p 0 TeXcolorgray -8 1789
a Fb(\210)p 0 TeXcolorgray 48 w Fd(b)p Ff(\))g(Informar)f(la)h(an)m
(tig\374edad)g(promedio)g(de)g(los)g(empleados)h(con)f(sueldo)h(ma)m(y)
m(or)f(a)f($3500.-)p 0 TeXcolorgray -128 5857 V -128
5977 a(Jan)m(uary)i(22,)e(2020)1231 b(24)1388 b(Norman)32
b(R)m(uiz)p 0 TeXcolorgray eop end
%%Page: 25 25
TeXDict begin 25 24 bop 0 TeXcolorgray 0 TeXcolorgray
2287 -114 a Ff(T)-8 b(raba)s(jo)31 b(Practico)i(N)p Fb(\272)g
Ff(3)f(\(Ciclo)i(Exacto\))p -128 -74 4016 5 v 0 TeXcolorgray
0 TeXcolorgray -128 5857 V -128 5977 a(Jan)m(uary)g(22,)e(2020)1231
b(25)1388 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop
end
%%Page: 26 26
TeXDict begin 26 25 bop 0 TeXcolorgray 0 TeXcolorgray
-128 -74 4016 5 v 0 TeXcolorgray -128 229 a Fe(23)161
b(Ejercicio)53 b Fa(\233)p Fe(23)109 448 y Ff(Se)29 b(ingresan)g(los)g
(datos)g(con)g(la)g(pro)s(ducci\363n)g(de)h(los)f(op)s(erarios)f(de)i
(una)e(empresa)i(en)g(el)f(\372ltimo)g(mes.)-128 568
y(Cada)k(registro)g(con)m(tiene:)p 0 TeXcolorgray -8
772 a Fb(\210)p 0 TeXcolorgray 48 w Ff(N\372mero)h(de)f(op)s(erario)f
(\(1)g(a)g(20\))p 0 TeXcolorgray -8 975 a Fb(\210)p 0
TeXcolorgray 48 w Ff(Sector)h(donde)h(traba)s(ja)d(\(1,)h(2,)h(3\))p
0 TeXcolorgray -8 1179 a Fb(\210)p 0 TeXcolorgray 48
w Ff(T)-8 b(otal)33 b(de)g(piezas)h(defectuosas)p 0 TeXcolorgray
-8 1382 a Fb(\210)p 0 TeXcolorgray 48 w Ff(T)-8 b(otal)33
b(de)g(piezas)h(no)e(defectuosas)-128 1585 y(Existe)37
b(un)e(total)f(de)i(20)e(registros)h(\(uno)g(para)g(cada)f(op)s
(erario\).)50 b(Cada)35 b(op)s(erario)f(traba)s(ja)g(en)h(alguno)g(de)
-128 1706 y(los)e(tres)h(sectores)g(1,)e(2)g(\363)h(3.)-128
1826 y(Se)h(pide)f(determinar)g(e)g(informar:)p 0 TeXcolorgray
-8 2030 a Fb(\210)p 0 TeXcolorgray 48 w Fd(a)r Ff(\))f(P)m(ara)g(cada)g
(uno)f(de)h(los)g(3)f(sectores)j(el)e(n)m(\372mero)g(del)g(op)s(erario)
f(que)i(obtuv)m(o)f(ma)m(y)m(or)g(can)m(tidad)h(de)116
2150 y(piezas)j(defectuosas.)50 b(\(se)34 b(emitir\341n)h(3)f
(resultados:)48 b(los)34 b(n)m(\372meros)i(de)f(op)s(erario)e(para)h
(cada)g(uno)h(de)116 2270 y(los)e(3)f(sectores\).)p 0
TeXcolorgray -8 2474 a Fb(\210)p 0 TeXcolorgray 48 w
Fd(b)p Ff(\))c(El)g(sector)h(cuy)m(os)g(empleados)g(totalizaron)e(ma)m
(y)m(or)i(p)s(orcen)m(ta)s(je)f(de)g(piezas)h(defectuosas)g(resp)s
(ecto)116 2594 y(al)k(total)f(de)h(piezas)h(fabricadas)e(en)i(ese)f
(sector.)p 0 TeXcolorgray -128 5857 V -128 5977 a(Jan)m(uary)h(22,)e
(2020)1231 b(26)1388 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray
eop end
%%Page: 27 27
TeXDict begin 27 26 bop 0 TeXcolorgray 0 TeXcolorgray
2287 -114 a Ff(T)-8 b(raba)s(jo)31 b(Practico)i(N)p Fb(\272)g
Ff(3)f(\(Ciclo)i(Exacto\))p -128 -74 4016 5 v 0 TeXcolorgray
0 TeXcolorgray -128 5857 V -128 5977 a(Jan)m(uary)g(22,)e(2020)1231
b(27)1388 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop
end
%%Page: 28 28
TeXDict begin 28 27 bop 0 TeXcolorgray 0 TeXcolorgray
-128 -74 4016 5 v 0 TeXcolorgray -128 229 a Fe(24)161
b(Ejercicio)53 b Fa(\233)p Fe(24)109 448 y Ff(Se)33 b(ingresan)g(los)g
(datos)f(de)h(los)g(10)f(art\355culos)h(que)g(v)m(enda)h(una)e
(empresa.)45 b(Cada)33 b(registro)g(con)m(tiene:)p 0
TeXcolorgray -8 651 a Fb(\210)p 0 TeXcolorgray 48 w Ff(N\372mero)h(de)f
(art\355culo)p 0 TeXcolorgray -8 855 a Fb(\210)p 0 TeXcolorgray
48 w Ff(Precio)h(Unitario)p 0 TeXcolorgray -8 1058 a
Fb(\210)p 0 TeXcolorgray 48 w Ff(Clase)g(de)f(art\355culo)g(\(`a',)f
(`b',)h(`c'\))-128 1262 y(Se)h(pide)f(determinar)g(e)g(informar:)p
0 TeXcolorgray -8 1465 a Fb(\210)p 0 TeXcolorgray 48
w Fd(a)r Ff(\))g(El)g(n)m(\372mero)h(del)f(art\355culo)g(m\341s)g(caro)
f(de)h(la)g(clase)g(`a')-14 b(.)44 b(\315dem)34 b(para)e(clase)h(`b')g
(y)g(`c')-14 b(.)p 0 TeXcolorgray -8 1669 a Fb(\210)p
0 TeXcolorgray 48 w Fd(b)p Ff(\))38 b(La)g(clase)h(\(`a',)g(`b')f(\363)
g(`c'\))g(cuy)m(os)i(art\355culos)e(totalicen)g(el)h(ma)m(y)m(or)f
(precio)h(promedio.)60 b(\(Se)38 b(deb)s(e)116 1789 y(calcular)28
b(el)g(precio)g(promedio)g(p)s(or)f(clase)h(e)g(informar)f(cual)h(de)g
(ellas)g(es)g(la)f(que)i(tiene)f(ma)m(y)m(or)g(prome-)116
1909 y(dio\))p 0 TeXcolorgray -128 5857 V -128 5977 a(Jan)m(uary)34
b(22,)e(2020)1231 b(28)1388 b(Norman)32 b(R)m(uiz)p 0
TeXcolorgray eop end
%%Page: 29 29
TeXDict begin 29 28 bop 0 TeXcolorgray 0 TeXcolorgray
2287 -114 a Ff(T)-8 b(raba)s(jo)31 b(Practico)i(N)p Fb(\272)g
Ff(3)f(\(Ciclo)i(Exacto\))p -128 -74 4016 5 v 0 TeXcolorgray
0 TeXcolorgray -128 5857 V -128 5977 a(Jan)m(uary)g(22,)e(2020)1231
b(29)1388 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop
end
%%Page: 30 30
TeXDict begin 30 29 bop 0 TeXcolorgray 0 TeXcolorgray
-128 -74 4016 5 v 0 TeXcolorgray -128 229 a Fe(25)161
b(Ejercicio)53 b Fa(\233)p Fe(25)109 448 y Ff(Hacer)39
b(un)h(programa)e(para)h(ingresar)g(una)g(lista)h(de)f(20)g(n)m
(\372meros.)64 b(Se)40 b(pide)g(luego)f(determinar)h(e)-128
568 y(informar:)p 0 TeXcolorgray -8 772 a Fb(\210)p 0
TeXcolorgray 48 w Fd(a)r Ff(\))33 b(La)g(can)m(tidad)g(de)g(ternas)g
(de)g(v)-5 b(alores)33 b(p)s(ositiv)m(os)h(consecutiv)m(os.)p
0 TeXcolorgray -8 975 a Fb(\210)p 0 TeXcolorgray 48 w
Fd(b)p Ff(\))24 b(La)f(can)m(tidad)h(de)g(ternas)g(de)g(v)-5
b(alores)24 b(negativ)m(os)h(consecutiv)m(os)h(y)e(ordenados)g(en)g
(forma)f(crecien)m(te.)-128 1179 y(Nota:)49 b(si)37 b(el)f(n)m
(\372mero)g(ingresado)g(es)h(cero,)f(no)g(se)g(lo)g(considera)g(ni)g
(negativ)m(o)g(ni)g(p)s(ositiv)m(o.)53 b(P)m(or)36 b(ejemplo,)-128
1299 y(dada)d(la)f(siguien)m(te)j(lista)d(de)i(12)e(n)m(\372meros:)109
1419 y(10,)g(5,)g(4,)h(3,)f(-8,)g(-3,)g(-1,)g(0,)g(3,)g(8,)h(-5,)f(8)
-128 1540 y(el)j(programa)f(detectar\341)h(una)g(terna)g(de)f(p)s
(ositiv)m(os)i(consecutiv)m(os)h(\(10,)e(5,)g(4\))f(y)h(una)f(terna)h
(de)g(negativ)m(os)-128 1660 y(consecutiv)m(os)h(ordenados)d(\(-8,)f
(-3,)g(-1\).)p 0 TeXcolorgray -128 5857 V -128 5977 a(Jan)m(uary)i(22,)
e(2020)1231 b(30)1388 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray
eop end
%%Page: 31 31
TeXDict begin 31 30 bop 0 TeXcolorgray 0 TeXcolorgray
2287 -114 a Ff(T)-8 b(raba)s(jo)31 b(Practico)i(N)p Fb(\272)g
Ff(3)f(\(Ciclo)i(Exacto\))p -128 -74 4016 5 v 0 TeXcolorgray
0 TeXcolorgray -128 5857 V -128 5977 a(Jan)m(uary)g(22,)e(2020)1231
b(31)1388 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop
end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
